/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

// This is a generated file from lib.es6.d.ts

define([], { contents: "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n/// <reference no-default-lib=\"true\"/>\ndeclare type PropertyKey = string | number | symbol;\n\ninterface Symbol {\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Object;\n\n    [Symbol.toStringTag]: \"Symbol\";\n}\n\ninterface SymbolConstructor {\n    /**\n      * A reference to the prototype.\n      */\n    prototype: Symbol;\n\n    /**\n      * Returns a new unique Symbol value.\n      * @param  description Description of the new Symbol object.\n      */\n    (description?: string|number): symbol;\n\n    /**\n      * Returns a Symbol object from the global symbol registry matching the given key if found.\n      * Otherwise, returns a new symbol with this key.\n      * @param key key to search for.\n      */\n    for(key: string): symbol;\n\n    /**\n      * Returns a key from the global symbol registry matching the given Symbol if found.\n      * Otherwise, returns a undefined.\n      * @param sym Symbol to find the key for.\n      */\n    keyFor(sym: symbol): string;\n\n    // Well-known Symbols\n\n    /**\n      * A method that determines if a constructor object recognizes an object as one of the\n      * constructor’s instances. Called by the semantics of the instanceof operator.\n      */\n    hasInstance: symbol;\n\n    /**\n      * A Boolean value that if true indicates that an object should flatten to its array elements\n      * by Array.prototype.concat.\n      */\n    isConcatSpreadable: symbol;\n\n    /**\n      * A method that returns the default iterator for an object. Called by the semantics of the\n      * for-of statement.\n      */\n    iterator: symbol;\n\n    /**\n      * A regular expression method that matches the regular expression against a string. Called\n      * by the String.prototype.match method.\n      */\n    match: symbol;\n\n    /**\n      * A regular expression method that replaces matched substrings of a string. Called by the\n      * String.prototype.replace method.\n      */\n    replace: symbol;\n\n    /**\n      * A regular expression method that returns the index within a string that matches the\n      * regular expression. Called by the String.prototype.search method.\n      */\n    search: symbol;\n\n    /**\n      * A function valued property that is the constructor function that is used to create\n      * derived objects.\n      */\n    species: symbol;\n\n    /**\n      * A regular expression method that splits a string at the indices that match the regular\n      * expression. Called by the String.prototype.split method.\n      */\n    split: symbol;\n\n    /**\n      * A method that converts an object to a corresponding primitive value.\n      * Called by the ToPrimitive abstract operation.\n      */\n    toPrimitive: symbol;\n\n    /**\n      * A String value that is used in the creation of the default string description of an object.\n      * Called by the built-in method Object.prototype.toString.\n      */\n    toStringTag: symbol;\n\n    /**\n      * An Object whose own property names are property names that are excluded from the 'with'\n      * environment bindings of the associated objects.\n      */\n    unscopables: symbol;\n}\ndeclare var Symbol: SymbolConstructor;\n\ninterface Object {\n    /**\n      * Determines whether an object has a property with the specified name.\n      * @param v A property name.\n      */\n    hasOwnProperty(v: PropertyKey): boolean;\n\n    /**\n      * Determines whether a specified property is enumerable.\n      * @param v A property name.\n      */\n    propertyIsEnumerable(v: PropertyKey): boolean;\n}\n\ninterface ObjectConstructor {\n    /**\n      * Copy the values of all of the enumerable own properties from one or more source objects to a\n      * target object. Returns the target object.\n      * @param target The target object to copy to.\n      * @param source The source object from which to copy properties.\n      */\n    assign<T, U>(target: T, source: U): T & U;\n\n    /**\n      * Copy the values of all of the enumerable own properties from one or more source objects to a\n      * target object. Returns the target object.\n      * @param target The target object to copy to.\n      * @param source1 The first source object from which to copy properties.\n      * @param source2 The second source object from which to copy properties.\n      */\n    assign<T, U, V>(target: T, source1: U, source2: V): T & U & V;\n\n    /**\n      * Copy the values of all of the enumerable own properties from one or more source objects to a\n      * target object. Returns the target object.\n      * @param target The target object to copy to.\n      * @param source1 The first source object from which to copy properties.\n      * @param source2 The second source object from which to copy properties.\n      * @param source3 The third source object from which to copy properties.\n      */\n    assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\n\n    /**\n      * Copy the values of all of the enumerable own properties from one or more source objects to a\n      * target object. Returns the target object.\n      * @param target The target object to copy to.\n      * @param sources One or more source objects from which to copy properties\n      */\n    assign(target: any, ...sources: any[]): any;\n\n    /**\n      * Returns an array of all symbol properties found directly on object o.\n      * @param o Object to retrieve the symbols from.\n      */\n    getOwnPropertySymbols(o: any): symbol[];\n\n    /**\n      * Returns true if the values are the same value, false otherwise.\n      * @param value1 The first value.\n      * @param value2 The second value.\n      */\n    is(value1: any, value2: any): boolean;\n\n    /**\n      * Sets the prototype of a specified object o to  object proto or null. Returns the object o.\n      * @param o The object to change its prototype.\n      * @param proto The value of the new prototype or null.\n      */\n    setPrototypeOf(o: any, proto: any): any;\n\n    /**\n      * Gets the own property descriptor of the specified object.\n      * An own property descriptor is one that is defined directly on the object and is not\n      * inherited from the object's prototype.\n      * @param o Object that contains the property.\n      * @param p Name of the property.\n    */\n    getOwnPropertyDescriptor(o: any, propertyKey: PropertyKey): PropertyDescriptor;\n\n    /**\n      * Adds a property to an object, or modifies attributes of an existing property.\n      * @param o Object on which to add or modify the property. This can be a native JavaScript\n      * object (that is, a user-defined object or a built in object) or a DOM object.\n      * @param p The property name.\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor\n      *  property.\n      */\n    defineProperty(o: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): any;\n}\n\ninterface Function {\n    /**\n      * Returns the name of the function. Function names are read-only and can not be changed.\n      */\n    name: string;\n\n    /**\n     * Determines whether the given value inherits from this function if this function was used\n     * as a constructor function.\n     *\n     * A constructor function can control which objects are recognized as its instances by\n     * 'instanceof' by overriding this method.\n     */\n    [Symbol.hasInstance](value: any): boolean;\n}\n\ninterface NumberConstructor {\n    /**\n      * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\n      * that is representable as a Number value, which is approximately:\n      * 2.2204460492503130808472633361816 x 10‍−‍16.\n      */\n    EPSILON: number;\n\n    /**\n      * Returns true if passed value is finite.\n      * Unlike the global isFininte, Number.isFinite doesn't forcibly convert the parameter to a\n      * number. Only finite values of the type number, result in true.\n      * @param number A numeric value.\n      */\n    isFinite(number: number): boolean;\n\n    /**\n      * Returns true if the value passed is an integer, false otherwise.\n      * @param number A numeric value.\n      */\n    isInteger(number: number): boolean;\n\n    /**\n      * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a\n      * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter\n      * to a number. Only values of the type number, that are also NaN, result in true.\n      * @param number A numeric value.\n      */\n    isNaN(number: number): boolean;\n\n    /**\n      * Returns true if the value passed is a safe integer.\n      * @param number A numeric value.\n      */\n    isSafeInteger(number: number): boolean;\n\n    /**\n      * The value of the largest integer n such that n and n + 1 are both exactly representable as\n      * a Number value.\n      * The value of Number.MIN_SAFE_INTEGER is 9007199254740991 2^53 − 1.\n      */\n    MAX_SAFE_INTEGER: number;\n\n    /**\n      * The value of the smallest integer n such that n and n − 1 are both exactly representable as\n      * a Number value.\n      * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\n      */\n    MIN_SAFE_INTEGER: number;\n\n    /**\n      * Converts a string to a floating-point number.\n      * @param string A string that contains a floating-point number.\n      */\n    parseFloat(string: string): number;\n\n    /**\n      * Converts A string to an integer.\n      * @param s A string to convert into a number.\n      * @param radix A value between 2 and 36 that specifies the base of the number in numString.\n      * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n      * All other strings are considered decimal.\n      */\n    parseInt(string: string, radix?: number): number;\n}\n\ninterface Array<T> {\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<T>;\n\n    /**\n     * Returns an object whose properties have the value 'true'\n     * when they will be absent when used in a 'with' statement.\n     */\n    [Symbol.unscopables](): {\n        copyWithin: boolean;\n        entries: boolean;\n        fill: boolean;\n        find: boolean;\n        findIndex: boolean;\n        keys: boolean;\n        values: boolean;\n    };\n\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, T]>;\n\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<T>;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: T, index: number, obj: Array<T>) => boolean, thisArg?: any): T;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: T) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the this object after filling the section identified by start and end with value\n      * @param value value to fill array section with\n      * @param start index to start filling the array at. If start is negative, it is treated as\n      * length+start where length is the length of the array.\n      * @param end index to stop filling the array at. If end is negative, it is treated as\n      * length+end.\n      */\n    fill(value: T, start?: number, end?: number): T[];\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): T[];\n}\n\ninterface IArguments {\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<any>;\n}\n\ninterface ArrayConstructor {\n    /**\n      * Creates an array from an array-like object.\n      * @param arrayLike An array-like object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;\n\n    /**\n      * Creates an array from an iterable object.\n      * @param iterable An iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from<T, U>(iterable: Iterable<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;\n\n    /**\n      * Creates an array from an array-like object.\n      * @param arrayLike An array-like object to convert to an array.\n      */\n    from<T>(arrayLike: ArrayLike<T>): Array<T>;\n\n    /**\n      * Creates an array from an iterable object.\n      * @param iterable An iterable object to convert to an array.\n      */\n    from<T>(iterable: Iterable<T>): Array<T>;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of<T>(...items: T[]): Array<T>;\n}\n\ninterface String {\n    /** Iterator */\n    [Symbol.iterator](): IterableIterator<string>;\n\n    /**\n      * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\n      * value of the UTF-16 encoded code point starting at the string element at position pos in\n      * the String resulting from converting this object to a String.\n      * If there is no element at that position, the result is undefined.\n      * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\n      */\n    codePointAt(pos: number): number;\n\n    /**\n      * Returns true if searchString appears as a substring of the result of converting this\n      * object to a String, at one or more positions that are\n      * greater than or equal to position; otherwise, returns false.\n      * @param searchString search string\n      * @param position If position is undefined, 0 is assumed, so as to search all of the String.\n      */\n    includes(searchString: string, position?: number): boolean;\n\n    /**\n      * Returns true if the sequence of elements of searchString converted to a String is the\n      * same as the corresponding elements of this object (converted to a String) starting at\n      * endPosition – length(this). Otherwise returns false.\n      */\n    endsWith(searchString: string, endPosition?: number): boolean;\n\n    /**\n      * Returns the String value result of normalizing the string into the normalization form\n      * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n      * @param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\n      * is \"NFC\"\n      */\n    normalize(form?: string): string;\n\n    /**\n      * Returns a String value that is made from count copies appended together. If count is 0,\n      * T is the empty String is returned.\n      * @param count number of copies to append\n      */\n    repeat(count: number): string;\n\n    /**\n      * Returns true if the sequence of elements of searchString converted to a String is the\n      * same as the corresponding elements of this object (converted to a String) starting at\n      * position. Otherwise returns false.\n      */\n    startsWith(searchString: string, position?: number): boolean;\n\n    // Overloads for objects with methods of well-known symbols.\n\n    /**\n      * Matches a string an object that supports being matched against, and returns an array containing the results of that search.\n      * @param matcher An object that supports being matched against.\n      */\n    match(matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray;\n\n    /**\n      * Replaces text in a string, using an object that supports replacement within a string.\n      * @param searchValue A object can search for and replace matches within a string.\n      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n      */\n    replace(searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string;\n\n    /**\n      * Replaces text in a string, using an object that supports replacement within a string.\n      * @param searchValue A object can search for and replace matches within a string.\n      * @param replacer A function that returns the replacement text.\n      */\n    replace(searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n      * Finds the first substring match in a regular expression search.\n      * @param searcher An object which supports searching within a string.\n      */\n    search(searcher: { [Symbol.search](string: string): number; }): number;\n\n    /**\n      * Split a string into substrings using the specified separator and return them as an array.\n      * @param splitter An object that can split a string.\n      * @param limit A value used to limit the number of elements returned in the array.\n      */\n    split(splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[];\n\n    /**\n      * Returns an <a> HTML anchor element and sets the name attribute to the text value\n      * @param name\n      */\n    anchor(name: string): string;\n\n    /** Returns a <big> HTML element */\n    big(): string;\n\n    /** Returns a <blink> HTML element */\n    blink(): string;\n\n    /** Returns a <b> HTML element */\n    bold(): string;\n\n    /** Returns a <tt> HTML element */\n    fixed(): string\n\n    /** Returns a <font> HTML element and sets the color attribute value */\n    fontcolor(color: string): string\n\n    /** Returns a <font> HTML element and sets the size attribute value */\n    fontsize(size: number): string;\n\n    /** Returns a <font> HTML element and sets the size attribute value */\n    fontsize(size: string): string;\n\n    /** Returns an <i> HTML element */\n    italics(): string;\n\n    /** Returns an <a> HTML element and sets the href attribute value */\n    link(url: string): string;\n\n    /** Returns a <small> HTML element */\n    small(): string;\n\n    /** Returns a <strike> HTML element */\n    strike(): string;\n\n    /** Returns a <sub> HTML element */\n    sub(): string;\n\n    /** Returns a <sup> HTML element */\n    sup(): string;\n}\n\ninterface StringConstructor {\n    /**\n      * Return the String value whose elements are, in order, the elements in the List elements.\n      * If length is 0, the empty string is returned.\n      */\n    fromCodePoint(...codePoints: number[]): string;\n\n    /**\n      * String.raw is intended for use as a tag function of a Tagged Template String. When called\n      * as such the first argument will be a well formed template call site object and the rest\n      * parameter will contain the substitution values.\n      * @param template A well-formed template string call site representation.\n      * @param substitutions A set of substitution values.\n      */\n    raw(template: TemplateStringsArray, ...substitutions: any[]): string;\n}\n\ninterface IteratorResult<T> {\n    done: boolean;\n    value?: T;\n}\n\ninterface Iterator<T> {\n    next(value?: any): IteratorResult<T>;\n    return?(value?: any): IteratorResult<T>;\n    throw?(e?: any): IteratorResult<T>;\n}\n\ninterface Iterable<T> {\n    [Symbol.iterator](): Iterator<T>;\n}\n\ninterface IterableIterator<T> extends Iterator<T> {\n    [Symbol.iterator](): IterableIterator<T>;\n}\n\ninterface GeneratorFunction extends Function {\n    [Symbol.toStringTag]: \"GeneratorFunction\";\n}\n\ninterface GeneratorFunctionConstructor {\n    /**\n      * Creates a new Generator function.\n      * @param args A list of arguments the function accepts.\n      */\n    new (...args: string[]): GeneratorFunction;\n    (...args: string[]): GeneratorFunction;\n    prototype: GeneratorFunction;\n}\ndeclare var GeneratorFunction: GeneratorFunctionConstructor;\n\ninterface Math {\n    /**\n      * Returns the number of leading zero bits in the 32-bit binary representation of a number.\n      * @param x A numeric expression.\n      */\n    clz32(x: number): number;\n\n    /**\n      * Returns the result of 32-bit multiplication of two numbers.\n      * @param x First number\n      * @param y Second number\n      */\n    imul(x: number, y: number): number;\n\n    /**\n      * Returns the sign of the x, indicating whether x is positive, negative or zero.\n      * @param x The numeric expression to test\n      */\n    sign(x: number): number;\n\n    /**\n      * Returns the base 10 logarithm of a number.\n      * @param x A numeric expression.\n      */\n    log10(x: number): number;\n\n    /**\n      * Returns the base 2 logarithm of a number.\n      * @param x A numeric expression.\n      */\n    log2(x: number): number;\n\n    /**\n      * Returns the natural logarithm of 1 + x.\n      * @param x A numeric expression.\n      */\n    log1p(x: number): number;\n\n    /**\n      * Returns the result of (e^x - 1) of x (e raised to the power of x, where e is the base of\n      * the natural logarithms).\n      * @param x A numeric expression.\n      */\n    expm1(x: number): number;\n\n    /**\n      * Returns the hyperbolic cosine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    cosh(x: number): number;\n\n    /**\n      * Returns the hyperbolic sine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    sinh(x: number): number;\n\n    /**\n      * Returns the hyperbolic tangent of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    tanh(x: number): number;\n\n    /**\n      * Returns the inverse hyperbolic cosine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    acosh(x: number): number;\n\n    /**\n      * Returns the inverse hyperbolic sine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    asinh(x: number): number;\n\n    /**\n      * Returns the inverse hyperbolic tangent of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    atanh(x: number): number;\n\n    /**\n      * Returns the square root of the sum of squares of its arguments.\n      * @param values Values to compute the square root for.\n      *     If no arguments are passed, the result is +0.\n      *     If there is only one argument, the result is the absolute value.\n      *     If any argument is +Infinity or -Infinity, the result is +Infinity.\n      *     If any argument is NaN, the result is NaN.\n      *     If all arguments are either +0 or −0, the result is +0.\n      */\n    hypot(...values: number[] ): number;\n\n    /**\n      * Returns the integral part of the a numeric expression, x, removing any fractional digits.\n      * If x is already an integer, the result is x.\n      * @param x A numeric expression.\n      */\n    trunc(x: number): number;\n\n    /**\n      * Returns the nearest single precision float representation of a number.\n      * @param x A numeric expression.\n      */\n    fround(x: number): number;\n\n    /**\n      * Returns an implementation-dependent approximation to the cube root of number.\n      * @param x A numeric expression.\n      */\n    cbrt(x: number): number;\n\n    [Symbol.toStringTag]: \"Math\";\n}\n\ninterface Date {\n    /**\n     * Converts a Date object to a string.\n     */\n    [Symbol.toPrimitive](hint: \"default\"): string;\n    /**\n     * Converts a Date object to a string.\n     */\n    [Symbol.toPrimitive](hint: \"string\"): string;\n    /**\n     * Converts a Date object to a number.\n     */\n    [Symbol.toPrimitive](hint: \"number\"): number;\n    /**\n     * Converts a Date object to a string or number.\n     *\n     * @param hint The strings \"number\", \"string\", or \"default\" to specify what primitive to return.\n     *\n     * @throws {TypeError} If 'hint' was given something other than \"number\", \"string\", or \"default\".\n     * @returns A number if 'hint' was \"number\", a string if 'hint' was \"string\" or \"default\".\n     */\n    [Symbol.toPrimitive](hint: string): string | number;\n}\n\ninterface RegExp {\n    /**\n      * Matches a string with this regular expression, and returns an array containing the results of\n      * that search.\n      * @param string A string to search within.\n      */\n    [Symbol.match](string: string): RegExpMatchArray;\n\n    /**\n      * Replaces text in a string, using this regular expression.\n      * @param string A String object or string literal whose contents matching against\n      *               this regular expression will be replaced\n      * @param replaceValue A String object or string literal containing the text to replace for every\n      *                     successful match of this regular expression.\n      */\n    [Symbol.replace](string: string, replaceValue: string): string;\n\n    /**\n      * Replaces text in a string, using this regular expression.\n      * @param string A String object or string literal whose contents matching against\n      *               this regular expression will be replaced\n      * @param replacer A function that returns the replacement text.\n      */\n    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n      * Finds the position beginning first substring match in a regular expression search\n      * using this regular expression.\n      *\n      * @param string The string to search within.\n      */\n    [Symbol.search](string: string): number;\n\n    /**\n      * Returns an array of substrings that were delimited by strings in the original input that\n      * match against this regular expression.\n      *\n      * If the regular expression contains capturing parentheses, then each time this\n      * regular expression matches, the results (including any undefined results) of the\n      * capturing parentheses are spliced.\n      *\n      * @param string string value to split\n      * @param limit if not undefined, the output array is truncated so that it contains no more\n      * than 'limit' elements.\n      */\n    [Symbol.split](string: string, limit?: number): string[];\n\n    /**\n      * Returns a string indicating the flags of the regular expression in question. This field is read-only.\n      * The characters in this string are sequenced and concatenated in the following order:\n      *\n      *    - \"g\" for global\n      *    - \"i\" for ignoreCase\n      *    - \"m\" for multiline\n      *    - \"u\" for unicode\n      *    - \"y\" for sticky\n      *\n      * If no flags are set, the value is the empty string.\n      */\n    flags: string;\n\n    /**\n      * Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\n      * expression. Default is false. Read-only.\n      */\n    sticky: boolean;\n\n    /**\n      * Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\n      * expression. Default is false. Read-only.\n      */\n    unicode: boolean;\n}\n\ninterface RegExpConstructor {\n    [Symbol.species](): RegExpConstructor;\n}\n\ninterface Map<K, V> {\n    clear(): void;\n    delete(key: K): boolean;\n    entries(): IterableIterator<[K, V]>;\n    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void;\n    get(key: K): V;\n    has(key: K): boolean;\n    keys(): IterableIterator<K>;\n    set(key: K, value?: V): Map<K, V>;\n    size: number;\n    values(): IterableIterator<V>;\n    [Symbol.iterator]():IterableIterator<[K,V]>;\n    [Symbol.toStringTag]: \"Map\";\n}\n\ninterface MapConstructor {\n    new (): Map<any, any>;\n    new <K, V>(): Map<K, V>;\n    new <K, V>(iterable: Iterable<[K, V]>): Map<K, V>;\n    prototype: Map<any, any>;\n}\ndeclare var Map: MapConstructor;\n\ninterface WeakMap<K, V> {\n    delete(key: K): boolean;\n    get(key: K): V;\n    has(key: K): boolean;\n    set(key: K, value?: V): WeakMap<K, V>;\n    [Symbol.toStringTag]: \"WeakMap\";\n}\n\ninterface WeakMapConstructor {\n    new (): WeakMap<any, any>;\n    new <K, V>(): WeakMap<K, V>;\n    new <K, V>(iterable: Iterable<[K, V]>): WeakMap<K, V>;\n    prototype: WeakMap<any, any>;\n}\ndeclare var WeakMap: WeakMapConstructor;\n\ninterface Set<T> {\n    add(value: T): Set<T>;\n    clear(): void;\n    delete(value: T): boolean;\n    entries(): IterableIterator<[T, T]>;\n    forEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void;\n    has(value: T): boolean;\n    keys(): IterableIterator<T>;\n    size: number;\n    values(): IterableIterator<T>;\n    [Symbol.iterator]():IterableIterator<T>;\n    [Symbol.toStringTag]: \"Set\";\n}\n\ninterface SetConstructor {\n    new (): Set<any>;\n    new <T>(): Set<T>;\n    new <T>(iterable: Iterable<T>): Set<T>;\n    prototype: Set<any>;\n}\ndeclare var Set: SetConstructor;\n\ninterface WeakSet<T> {\n    add(value: T): WeakSet<T>;\n    delete(value: T): boolean;\n    has(value: T): boolean;\n    [Symbol.toStringTag]: \"WeakSet\";\n}\n\ninterface WeakSetConstructor {\n    new (): WeakSet<any>;\n    new <T>(): WeakSet<T>;\n    new <T>(iterable: Iterable<T>): WeakSet<T>;\n    prototype: WeakSet<any>;\n}\ndeclare var WeakSet: WeakSetConstructor;\n\ninterface JSON {\n    [Symbol.toStringTag]: \"JSON\";\n}\n\n/**\n  * Represents a raw buffer of binary data, which is used to store data for the\n  * different typed arrays. ArrayBuffers cannot be read from or written to directly,\n  * but can be passed to a typed array or DataView Object to interpret the raw\n  * buffer as needed.\n  */\ninterface ArrayBuffer {\n    [Symbol.toStringTag]: \"ArrayBuffer\";\n}\n\ninterface DataView {\n    [Symbol.toStringTag]: \"DataView\";\n}\n\n/**\n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\n  * number of bytes could not be allocated an exception is raised.\n  */\ninterface Int8Array {\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, number]>;\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<number>;\n    [Symbol.iterator](): IterableIterator<number>;\n    [Symbol.toStringTag]: \"Int8Array\";\n}\n\ninterface Int8ArrayConstructor {\n    new (elements: Iterable<number>): Int8Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\n}\n\n/**\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint8Array {\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, number]>;\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<number>;\n    [Symbol.iterator](): IterableIterator<number>;\n    [Symbol.toStringTag]: \"UInt8Array\";\n}\n\ninterface Uint8ArrayConstructor {\n    new (elements: Iterable<number>): Uint8Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\n}\n\n/**\n  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\n  * If the requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint8ClampedArray {\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, number]>;\n\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<number>;\n\n    [Symbol.iterator](): IterableIterator<number>;\n    [Symbol.toStringTag]: \"Uint8ClampedArray\";\n}\n\ninterface Uint8ClampedArrayConstructor {\n    new (elements: Iterable<number>): Uint8ClampedArray;\n\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\n}\n\n/**\n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Int16Array {\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, number]>;\n\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<number>;\n\n\n    [Symbol.iterator](): IterableIterator<number>;\n    [Symbol.toStringTag]: \"Int16Array\";\n}\n\ninterface Int16ArrayConstructor {\n    new (elements: Iterable<number>): Int16Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\n}\n\n/**\n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint16Array {\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, number]>;\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<number>;\n    [Symbol.iterator](): IterableIterator<number>;\n    [Symbol.toStringTag]: \"Uint16Array\";\n}\n\ninterface Uint16ArrayConstructor {\n    new (elements: Iterable<number>): Uint16Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\n}\n\n/**\n  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Int32Array {\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, number]>;\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<number>;\n    [Symbol.iterator](): IterableIterator<number>;\n    [Symbol.toStringTag]: \"Int32Array\";\n}\n\ninterface Int32ArrayConstructor {\n    new (elements: Iterable<number>): Int32Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\n}\n\n/**\n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint32Array {\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, number]>;\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<number>;\n    [Symbol.iterator](): IterableIterator<number>;\n    [Symbol.toStringTag]: \"Uint32Array\";\n}\n\ninterface Uint32ArrayConstructor {\n    new (elements: Iterable<number>): Uint32Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\n}\n\n/**\n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\n  * of bytes could not be allocated an exception is raised.\n  */\ninterface Float32Array {\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, number]>;\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<number>;\n    [Symbol.iterator](): IterableIterator<number>;\n    [Symbol.toStringTag]: \"Float32Array\";\n}\n\ninterface Float32ArrayConstructor {\n    new (elements: Iterable<number>): Float32Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\n}\n\n/**\n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\n  * number of bytes could not be allocated an exception is raised.\n  */\ninterface Float64Array {\n    /**\n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): IterableIterator<[number, number]>;\n    /**\n      * Returns an list of keys in the array\n      */\n    keys(): IterableIterator<number>;\n    /**\n      * Returns an list of values in the array\n      */\n    values(): IterableIterator<number>;\n    [Symbol.iterator](): IterableIterator<number>;\n    [Symbol.toStringTag]: \"Float64Array\";\n}\n\ninterface Float64ArrayConstructor {\n    new (elements: Iterable<number>): Float64Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\n}\n\ninterface ProxyHandler<T> {\n    getPrototypeOf? (target: T): any;\n    setPrototypeOf? (target: T, v: any): boolean;\n    isExtensible? (target: T): boolean;\n    preventExtensions? (target: T): boolean;\n    getOwnPropertyDescriptor? (target: T, p: PropertyKey): PropertyDescriptor;\n    has? (target: T, p: PropertyKey): boolean;\n    get? (target: T, p: PropertyKey, receiver: any): any;\n    set? (target: T, p: PropertyKey, value: any, receiver: any): boolean;\n    deleteProperty? (target: T, p: PropertyKey): boolean;\n    defineProperty? (target: T, p: PropertyKey, attributes: PropertyDescriptor): boolean;\n    enumerate? (target: T): PropertyKey[];\n    ownKeys? (target: T): PropertyKey[];\n    apply? (target: T, thisArg: any, argArray?: any): any;\n    construct? (target: T, thisArg: any, argArray?: any): any;\n}\n\ninterface ProxyConstructor {\n    revocable<T>(target: T, handler: ProxyHandler<T>): { proxy: T; revoke: () => void; };\n    new <T>(target: T, handler: ProxyHandler<T>): T\n}\ndeclare var Proxy: ProxyConstructor;\n\ndeclare namespace Reflect {\n    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;\n    function construct(target: Function, argumentsList: ArrayLike<any>, newTarget?: any): any;\n    function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;\n    function deleteProperty(target: any, propertyKey: PropertyKey): boolean;\n    function enumerate(target: any): IterableIterator<any>;\n    function get(target: any, propertyKey: PropertyKey, receiver?: any): any;\n    function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;\n    function getPrototypeOf(target: any): any;\n    function has(target: any, propertyKey: string): boolean;\n    function has(target: any, propertyKey: symbol): boolean;\n    function isExtensible(target: any): boolean;\n    function ownKeys(target: any): Array<PropertyKey>;\n    function preventExtensions(target: any): boolean;\n    function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;\n    function setPrototypeOf(target: any, proto: any): boolean;\n}\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n    /**\n    * Attaches callbacks for the resolution and/or rejection of the Promise.\n    * @param onfulfilled The callback to execute when the Promise is resolved.\n    * @param onrejected The callback to execute when the Promise is rejected.\n    * @returns A Promise for the completion of which ever callback is executed.\n    */\n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>;\n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): Promise<TResult>;\n\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch(onrejected?: (reason: any) => T | PromiseLike<T>): Promise<T>;\n    catch(onrejected?: (reason: any) => void): Promise<T>;\n\n    [Symbol.toStringTag]: \"Promise\";\n}\n\ninterface PromiseConstructor {\n    /**\n      * A reference to the prototype.\n      */\n    prototype: Promise<any>;\n\n    /**\n     * Creates a new Promise.\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\n     * a resolve callback used resolve the promise with a value or the result of another promise,\n     * and a reject callback used to reject the promise with a provided reason or error.\n     */\n    new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\n\n    /**\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>, T10 | PromiseLike<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n    all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n    all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;\n    all<T1, T2, T3, T4, T5, T6>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;\n    all<T1, T2, T3, T4, T5>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>]): Promise<[T1, T2, T3, T4, T5]>;\n    all<T1, T2, T3, T4>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>]): Promise<[T1, T2, T3, T4]>;\n    all<T1, T2, T3>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]): Promise<[T1, T2, T3]>;\n    all<T1, T2>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): Promise<[T1, T2]>;\n    all<TAll>(values: Iterable<TAll | PromiseLike<TAll>>): Promise<TAll[]>;\n\n    /**\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n     * or rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\n\n    /**\n     * Creates a new rejected promise for the provided reason.\n     * @param reason The reason the promise was rejected.\n     * @returns A new rejected Promise.\n     */\n    reject(reason: any): Promise<void>;\n\n    /**\n     * Creates a new rejected promise for the provided reason.\n     * @param reason The reason the promise was rejected.\n     * @returns A new rejected Promise.\n     */\n    reject<T>(reason: any): Promise<T>;\n\n    /**\n      * Creates a new resolved promise for the provided value.\n      * @param value A promise.\n      * @returns A promise whose internal state matches the provided promise.\n      */\n    resolve<T>(value: T | PromiseLike<T>): Promise<T>;\n\n    /**\n     * Creates a new resolved promise .\n     * @returns A resolved promise.\n     */\n    resolve(): Promise<void>;\n\n    [Symbol.species]: Function;\n}\n\ndeclare var Promise: PromiseConstructor;\n/////////////////////////////\n/// ECMAScript APIs\n/////////////////////////////\n\ndeclare var NaN: number;\ndeclare var Infinity: number;\n\n/**\n  * Evaluates JavaScript code and executes it.\n  * @param x A String value that contains valid JavaScript code.\n  */\ndeclare function eval(x: string): any;\n\n/**\n  * Converts A string to an integer.\n  * @param s A string to convert into a number.\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString.\n  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n  * All other strings are considered decimal.\n  */\ndeclare function parseInt(s: string, radix?: number): number;\n\n/**\n  * Converts a string to a floating-point number.\n  * @param string A string that contains a floating-point number.\n  */\ndeclare function parseFloat(string: string): number;\n\n/**\n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\n  * @param number A numeric value.\n  */\ndeclare function isNaN(number: number): boolean;\n\n/**\n  * Determines whether a supplied number is finite.\n  * @param number Any numeric value.\n  */\ndeclare function isFinite(number: number): boolean;\n\n/**\n  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\n  * @param encodedURI A value representing an encoded URI.\n  */\ndeclare function decodeURI(encodedURI: string): string;\n\n/**\n  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n  * @param encodedURIComponent A value representing an encoded URI component.\n  */\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\n\n/**\n  * Encodes a text string as a valid Uniform Resource Identifier (URI)\n  * @param uri A value representing an encoded URI.\n  */\ndeclare function encodeURI(uri: string): string;\n\n/**\n  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\n  * @param uriComponent A value representing an encoded URI component.\n  */\ndeclare function encodeURIComponent(uriComponent: string): string;\n\ninterface PropertyDescriptor {\n    configurable?: boolean;\n    enumerable?: boolean;\n    value?: any;\n    writable?: boolean;\n    get? (): any;\n    set? (v: any): void;\n}\n\ninterface PropertyDescriptorMap {\n    [s: string]: PropertyDescriptor;\n}\n\ninterface Object {\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\n    constructor: Function;\n\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns a date converted to a string using the current locale. */\n    toLocaleString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Object;\n\n    /**\n      * Determines whether an object has a property with the specified name.\n      * @param v A property name.\n      */\n    hasOwnProperty(v: string): boolean;\n\n    /**\n      * Determines whether an object exists in another object's prototype chain.\n      * @param v Another object whose prototype chain is to be checked.\n      */\n    isPrototypeOf(v: Object): boolean;\n\n    /**\n      * Determines whether a specified property is enumerable.\n      * @param v A property name.\n      */\n    propertyIsEnumerable(v: string): boolean;\n}\n\ninterface ObjectConstructor {\n    new (value?: any): Object;\n    (): any;\n    (value: any): any;\n\n    /** A reference to the prototype for a class of objects. */\n    prototype: Object;\n\n    /**\n      * Returns the prototype of an object.\n      * @param o The object that references the prototype.\n      */\n    getPrototypeOf(o: any): any;\n\n    /**\n      * Gets the own property descriptor of the specified object.\n      * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.\n      * @param o Object that contains the property.\n      * @param p Name of the property.\n    */\n    getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor;\n\n    /**\n      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n      * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\n      * @param o Object that contains the own properties.\n      */\n    getOwnPropertyNames(o: any): string[];\n\n    /**\n      * Creates an object that has the specified prototype, and that optionally contains specified properties.\n      * @param o Object to use as a prototype. May be null\n      * @param properties JavaScript object that contains one or more property descriptors.\n      */\n    create(o: any, properties?: PropertyDescriptorMap): any;\n\n    /**\n      * Adds a property to an object, or modifies attributes of an existing property.\n      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\n      * @param p The property name.\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n      */\n    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any;\n\n    /**\n      * Adds one or more properties to an object, and/or modifies attributes of existing properties.\n      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\n      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\n      */\n    defineProperties(o: any, properties: PropertyDescriptorMap): any;\n\n    /**\n      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\n      * @param o Object on which to lock the attributes.\n      */\n    seal<T>(o: T): T;\n\n    /**\n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n      * @param o Object on which to lock the attributes.\n      */\n    freeze<T>(o: T): T;\n\n    /**\n      * Prevents the addition of new properties to an object.\n      * @param o Object to make non-extensible.\n      */\n    preventExtensions<T>(o: T): T;\n\n    /**\n      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\n      * @param o Object to test.\n      */\n    isSealed(o: any): boolean;\n\n    /**\n      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\n      * @param o Object to test.\n      */\n    isFrozen(o: any): boolean;\n\n    /**\n      * Returns a value that indicates whether new properties can be added to an object.\n      * @param o Object to test.\n      */\n    isExtensible(o: any): boolean;\n\n    /**\n      * Returns the names of the enumerable properties and methods of an object.\n      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n      */\n    keys(o: any): string[];\n}\n\n/**\n  * Provides functionality common to all JavaScript objects.\n  */\ndeclare var Object: ObjectConstructor;\n\n/**\n  * Creates a new function.\n  */\ninterface Function {\n    /**\n      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\n      * @param thisArg The object to be used as the this object.\n      * @param argArray A set of arguments to be passed to the function.\n      */\n    apply(thisArg: any, argArray?: any): any;\n\n    /**\n      * Calls a method of an object, substituting another object for the current object.\n      * @param thisArg The object to be used as the current object.\n      * @param argArray A list of arguments to be passed to the method.\n      */\n    call(thisArg: any, ...argArray: any[]): any;\n\n    /**\n      * For a given function, creates a bound function that has the same body as the original function.\n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n      * @param thisArg An object to which the this keyword can refer inside the new function.\n      * @param argArray A list of arguments to be passed to the new function.\n      */\n    bind(thisArg: any, ...argArray: any[]): any;\n\n    prototype: any;\n    length: number;\n\n    // Non-standard extensions\n    arguments: any;\n    caller: Function;\n}\n\ninterface FunctionConstructor {\n    /**\n      * Creates a new function.\n      * @param args A list of arguments the function accepts.\n      */\n    new (...args: string[]): Function;\n    (...args: string[]): Function;\n    prototype: Function;\n}\n\ndeclare var Function: FunctionConstructor;\n\ninterface IArguments {\n    [index: number]: any;\n    length: number;\n    callee: Function;\n}\n\ninterface String {\n    /** Returns a string representation of a string. */\n    toString(): string;\n\n    /**\n      * Returns the character at the specified index.\n      * @param pos The zero-based index of the desired character.\n      */\n    charAt(pos: number): string;\n\n    /**\n      * Returns the Unicode value of the character at the specified location.\n      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n      */\n    charCodeAt(index: number): number;\n\n    /**\n      * Returns a string that contains the concatenation of two or more strings.\n      * @param strings The strings to append to the end of the string.\n      */\n    concat(...strings: string[]): string;\n\n    /**\n      * Returns the position of the first occurrence of a substring.\n      * @param searchString The substring to search for in the string\n      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\n      */\n    indexOf(searchString: string, position?: number): number;\n\n    /**\n      * Returns the last occurrence of a substring in the string.\n      * @param searchString The substring to search for.\n      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\n      */\n    lastIndexOf(searchString: string, position?: number): number;\n\n    /**\n      * Determines whether two strings are equivalent in the current locale.\n      * @param that String to compare to target string\n      */\n    localeCompare(that: string): number;\n\n    /**\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\n      * @param regexp A variable name or string literal containing the regular expression pattern and flags.\n      */\n    match(regexp: string): RegExpMatchArray;\n\n    /**\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\n      * @param regexp A regular expression object that contains the regular expression pattern and applicable flags.\n      */\n    match(regexp: RegExp): RegExpMatchArray;\n\n    /**\n      * Replaces text in a string, using a regular expression or search string.\n      * @param searchValue A string that represents the regular expression.\n      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n      */\n    replace(searchValue: string, replaceValue: string): string;\n\n    /**\n      * Replaces text in a string, using a regular expression or search string.\n      * @param searchValue A string that represents the regular expression.\n      * @param replacer A function that returns the replacement text.\n      */\n    replace(searchValue: string, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n      * Replaces text in a string, using a regular expression or search string.\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags.\n      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\n      */\n    replace(searchValue: RegExp, replaceValue: string): string;\n\n    /**\n      * Replaces text in a string, using a regular expression or search string.\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\n      * @param replacer A function that returns the replacement text.\n      */\n    replace(searchValue: RegExp, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n      * Finds the first substring match in a regular expression search.\n      * @param regexp The regular expression pattern and applicable flags.\n      */\n    search(regexp: string): number;\n\n    /**\n      * Finds the first substring match in a regular expression search.\n      * @param regexp The regular expression pattern and applicable flags.\n      */\n    search(regexp: RegExp): number;\n\n    /**\n      * Returns a section of a string.\n      * @param start The index to the beginning of the specified portion of stringObj.\n      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\n      * If this value is not specified, the substring continues to the end of stringObj.\n      */\n    slice(start?: number, end?: number): string;\n\n    /**\n      * Split a string into substrings using the specified separator and return them as an array.\n      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n      * @param limit A value used to limit the number of elements returned in the array.\n      */\n    split(separator: string, limit?: number): string[];\n\n    /**\n      * Split a string into substrings using the specified separator and return them as an array.\n      * @param separator A Regular Express that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n      * @param limit A value used to limit the number of elements returned in the array.\n      */\n    split(separator: RegExp, limit?: number): string[];\n\n    /**\n      * Returns the substring at the specified location within a String object.\n      * @param start The zero-based index number indicating the beginning of the substring.\n      * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\n      * If end is omitted, the characters from start through the end of the original string are returned.\n      */\n    substring(start: number, end?: number): string;\n\n    /** Converts all the alphabetic characters in a string to lowercase. */\n    toLowerCase(): string;\n\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\n    toLocaleLowerCase(): string;\n\n    /** Converts all the alphabetic characters in a string to uppercase. */\n    toUpperCase(): string;\n\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\n    toLocaleUpperCase(): string;\n\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\n    trim(): string;\n\n    /** Returns the length of a String object. */\n    length: number;\n\n    // IE extensions\n    /**\n      * Gets a substring beginning at the specified location and having the specified length.\n      * @param from The starting position of the desired substring. The index of the first character in the string is zero.\n      * @param length The number of characters to include in the returned substring.\n      */\n    substr(from: number, length?: number): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): string;\n\n    [index: number]: string;\n}\n\ninterface StringConstructor {\n    new (value?: any): String;\n    (value?: any): string;\n    prototype: String;\n    fromCharCode(...codes: number[]): string;\n}\n\n/**\n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\n  */\ndeclare var String: StringConstructor;\n\ninterface Boolean {\n    /** Returns the primitive value of the specified object. */\n    valueOf(): boolean;\n}\n\ninterface BooleanConstructor {\n    new (value?: any): Boolean;\n    (value?: any): boolean;\n    prototype: Boolean;\n}\n\ndeclare var Boolean: BooleanConstructor;\n\ninterface Number {\n    /**\n      * Returns a string representation of an object.\n      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\n      */\n    toString(radix?: number): string;\n\n    /**\n      * Returns a string representing a number in fixed-point notation.\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n      */\n    toFixed(fractionDigits?: number): string;\n\n    /**\n      * Returns a string containing a number represented in exponential notation.\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n      */\n    toExponential(fractionDigits?: number): string;\n\n    /**\n      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\n      */\n    toPrecision(precision?: number): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): number;\n}\n\ninterface NumberConstructor {\n    new (value?: any): Number;\n    (value?: any): number;\n    prototype: Number;\n\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\n    MAX_VALUE: number;\n\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\n    MIN_VALUE: number;\n\n    /**\n      * A value that is not a number.\n      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\n      */\n    NaN: number;\n\n    /**\n      * A value that is less than the largest negative number that can be represented in JavaScript.\n      * JavaScript displays NEGATIVE_INFINITY values as -infinity.\n      */\n    NEGATIVE_INFINITY: number;\n\n    /**\n      * A value greater than the largest number that can be represented in JavaScript.\n      * JavaScript displays POSITIVE_INFINITY values as infinity.\n      */\n    POSITIVE_INFINITY: number;\n}\n\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\ndeclare var Number: NumberConstructor;\n\ninterface TemplateStringsArray extends Array<string> {\n    raw: string[];\n}\n\ninterface Math {\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\n    E: number;\n    /** The natural logarithm of 10. */\n    LN10: number;\n    /** The natural logarithm of 2. */\n    LN2: number;\n    /** The base-2 logarithm of e. */\n    LOG2E: number;\n    /** The base-10 logarithm of e. */\n    LOG10E: number;\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\n    PI: number;\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\n    SQRT1_2: number;\n    /** The square root of 2. */\n    SQRT2: number;\n    /**\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\n      * @param x A numeric expression for which the absolute value is needed.\n      */\n    abs(x: number): number;\n    /**\n      * Returns the arc cosine (or inverse cosine) of a number.\n      * @param x A numeric expression.\n      */\n    acos(x: number): number;\n    /**\n      * Returns the arcsine of a number.\n      * @param x A numeric expression.\n      */\n    asin(x: number): number;\n    /**\n      * Returns the arctangent of a number.\n      * @param x A numeric expression for which the arctangent is needed.\n      */\n    atan(x: number): number;\n    /**\n      * Returns the angle (in radians) from the X axis to a point.\n      * @param y A numeric expression representing the cartesian y-coordinate.\n      * @param x A numeric expression representing the cartesian x-coordinate.\n      */\n    atan2(y: number, x: number): number;\n    /**\n      * Returns the smallest number greater than or equal to its numeric argument.\n      * @param x A numeric expression.\n      */\n    ceil(x: number): number;\n    /**\n      * Returns the cosine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    cos(x: number): number;\n    /**\n      * Returns e (the base of natural logarithms) raised to a power.\n      * @param x A numeric expression representing the power of e.\n      */\n    exp(x: number): number;\n    /**\n      * Returns the greatest number less than or equal to its numeric argument.\n      * @param x A numeric expression.\n      */\n    floor(x: number): number;\n    /**\n      * Returns the natural logarithm (base e) of a number.\n      * @param x A numeric expression.\n      */\n    log(x: number): number;\n    /**\n      * Returns the larger of a set of supplied numeric expressions.\n      * @param values Numeric expressions to be evaluated.\n      */\n    max(...values: number[]): number;\n    /**\n      * Returns the smaller of a set of supplied numeric expressions.\n      * @param values Numeric expressions to be evaluated.\n      */\n    min(...values: number[]): number;\n    /**\n      * Returns the value of a base expression taken to a specified power.\n      * @param x The base value of the expression.\n      * @param y The exponent value of the expression.\n      */\n    pow(x: number, y: number): number;\n    /** Returns a pseudorandom number between 0 and 1. */\n    random(): number;\n    /**\n      * Returns a supplied numeric expression rounded to the nearest number.\n      * @param x The value to be rounded to the nearest number.\n      */\n    round(x: number): number;\n    /**\n      * Returns the sine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    sin(x: number): number;\n    /**\n      * Returns the square root of a number.\n      * @param x A numeric expression.\n      */\n    sqrt(x: number): number;\n    /**\n      * Returns the tangent of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    tan(x: number): number;\n}\n/** An intrinsic object that provides basic mathematics functionality and constants. */\ndeclare var Math: Math;\n\n/** Enables basic storage and retrieval of dates and times. */\ninterface Date {\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\n    toString(): string;\n    /** Returns a date as a string value. */\n    toDateString(): string;\n    /** Returns a time as a string value. */\n    toTimeString(): string;\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\n    toLocaleString(): string;\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\n    toLocaleDateString(): string;\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\n    toLocaleTimeString(): string;\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n    valueOf(): number;\n    /** Gets the time value in milliseconds. */\n    getTime(): number;\n    /** Gets the year, using local time. */\n    getFullYear(): number;\n    /** Gets the year using Universal Coordinated Time (UTC). */\n    getUTCFullYear(): number;\n    /** Gets the month, using local time. */\n    getMonth(): number;\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMonth(): number;\n    /** Gets the day-of-the-month, using local time. */\n    getDate(): number;\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\n    getUTCDate(): number;\n    /** Gets the day of the week, using local time. */\n    getDay(): number;\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\n    getUTCDay(): number;\n    /** Gets the hours in a date, using local time. */\n    getHours(): number;\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\n    getUTCHours(): number;\n    /** Gets the minutes of a Date object, using local time. */\n    getMinutes(): number;\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMinutes(): number;\n    /** Gets the seconds of a Date object, using local time. */\n    getSeconds(): number;\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCSeconds(): number;\n    /** Gets the milliseconds of a Date, using local time. */\n    getMilliseconds(): number;\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMilliseconds(): number;\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\n    getTimezoneOffset(): number;\n    /**\n      * Sets the date and time value in the Date object.\n      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\n      */\n    setTime(time: number): number;\n    /**\n      * Sets the milliseconds value in the Date object using local time.\n      * @param ms A numeric value equal to the millisecond value.\n      */\n    setMilliseconds(ms: number): number;\n    /**\n      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n      * @param ms A numeric value equal to the millisecond value.\n      */\n    setUTCMilliseconds(ms: number): number;\n\n    /**\n      * Sets the seconds value in the Date object using local time.\n      * @param sec A numeric value equal to the seconds value.\n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setSeconds(sec: number, ms?: number): number;\n    /**\n      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n      * @param sec A numeric value equal to the seconds value.\n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setUTCSeconds(sec: number, ms?: number): number;\n    /**\n      * Sets the minutes value in the Date object using local time.\n      * @param min A numeric value equal to the minutes value.\n      * @param sec A numeric value equal to the seconds value.\n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n      * @param min A numeric value equal to the minutes value.\n      * @param sec A numeric value equal to the seconds value.\n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n      * Sets the hour value in the Date object using local time.\n      * @param hours A numeric value equal to the hours value.\n      * @param min A numeric value equal to the minutes value.\n      * @param sec A numeric value equal to the seconds value.\n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n      * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n      * @param hours A numeric value equal to the hours value.\n      * @param min A numeric value equal to the minutes value.\n      * @param sec A numeric value equal to the seconds value.\n      * @param ms A numeric value equal to the milliseconds value.\n      */\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n      * Sets the numeric day-of-the-month value of the Date object using local time.\n      * @param date A numeric value equal to the day of the month.\n      */\n    setDate(date: number): number;\n    /**\n      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n      * @param date A numeric value equal to the day of the month.\n      */\n    setUTCDate(date: number): number;\n    /**\n      * Sets the month value in the Date object using local time.\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\n      */\n    setMonth(month: number, date?: number): number;\n    /**\n      * Sets the month value in the Date object using Universal Coordinated Time (UTC).\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\n      */\n    setUTCMonth(month: number, date?: number): number;\n    /**\n      * Sets the year of the Date object using local time.\n      * @param year A numeric value for the year.\n      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n      * @param date A numeric value equal for the day of the month.\n      */\n    setFullYear(year: number, month?: number, date?: number): number;\n    /**\n      * Sets the year value in the Date object using Universal Coordinated Time (UTC).\n      * @param year A numeric value equal to the year.\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n      * @param date A numeric value equal to the day of the month.\n      */\n    setUTCFullYear(year: number, month?: number, date?: number): number;\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\n    toUTCString(): string;\n    /** Returns a date as a string value in ISO format. */\n    toISOString(): string;\n    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\n    toJSON(key?: any): string;\n}\n\ninterface DateConstructor {\n    new (): Date;\n    new (value: number): Date;\n    new (value: string): Date;\n    new (year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n    (): string;\n    prototype: Date;\n    /**\n      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\n      * @param s A date string\n      */\n    parse(s: string): number;\n    /**\n      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\n      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n      * @param month The month as an number between 0 and 11 (January to December).\n      * @param date The date as an number between 1 and 31.\n      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.\n      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.\n      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.\n      * @param ms An number from 0 to 999 that specifies the milliseconds.\n      */\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n    now(): number;\n}\n\ndeclare var Date: DateConstructor;\n\ninterface RegExpMatchArray extends Array<string> {\n    index?: number;\n    input?: string;\n}\n\ninterface RegExpExecArray extends Array<string> {\n    index: number;\n    input: string;\n}\n\ninterface RegExp {\n    /**\n      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\n      * @param string The String object or string literal on which to perform the search.\n      */\n    exec(string: string): RegExpExecArray;\n\n    /**\n      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\n      * @param string String on which to perform the search.\n      */\n    test(string: string): boolean;\n\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\n    source: string;\n\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\n    global: boolean;\n\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\n    ignoreCase: boolean;\n\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\n    multiline: boolean;\n\n    lastIndex: number;\n\n    // Non-standard extensions\n    compile(): RegExp;\n}\n\ninterface RegExpConstructor {\n    new (pattern: string, flags?: string): RegExp;\n    (pattern: string, flags?: string): RegExp;\n    prototype: RegExp;\n\n    // Non-standard extensions\n    $1: string;\n    $2: string;\n    $3: string;\n    $4: string;\n    $5: string;\n    $6: string;\n    $7: string;\n    $8: string;\n    $9: string;\n    lastMatch: string;\n}\n\ndeclare var RegExp: RegExpConstructor;\n\ninterface Error {\n    name: string;\n    message: string;\n}\n\ninterface ErrorConstructor {\n    new (message?: string): Error;\n    (message?: string): Error;\n    prototype: Error;\n}\n\ndeclare var Error: ErrorConstructor;\n\ninterface EvalError extends Error {\n}\n\ninterface EvalErrorConstructor {\n    new (message?: string): EvalError;\n    (message?: string): EvalError;\n    prototype: EvalError;\n}\n\ndeclare var EvalError: EvalErrorConstructor;\n\ninterface RangeError extends Error {\n}\n\ninterface RangeErrorConstructor {\n    new (message?: string): RangeError;\n    (message?: string): RangeError;\n    prototype: RangeError;\n}\n\ndeclare var RangeError: RangeErrorConstructor;\n\ninterface ReferenceError extends Error {\n}\n\ninterface ReferenceErrorConstructor {\n    new (message?: string): ReferenceError;\n    (message?: string): ReferenceError;\n    prototype: ReferenceError;\n}\n\ndeclare var ReferenceError: ReferenceErrorConstructor;\n\ninterface SyntaxError extends Error {\n}\n\ninterface SyntaxErrorConstructor {\n    new (message?: string): SyntaxError;\n    (message?: string): SyntaxError;\n    prototype: SyntaxError;\n}\n\ndeclare var SyntaxError: SyntaxErrorConstructor;\n\ninterface TypeError extends Error {\n}\n\ninterface TypeErrorConstructor {\n    new (message?: string): TypeError;\n    (message?: string): TypeError;\n    prototype: TypeError;\n}\n\ndeclare var TypeError: TypeErrorConstructor;\n\ninterface URIError extends Error {\n}\n\ninterface URIErrorConstructor {\n    new (message?: string): URIError;\n    (message?: string): URIError;\n    prototype: URIError;\n}\n\ndeclare var URIError: URIErrorConstructor;\n\ninterface JSON {\n    /**\n      * Converts a JavaScript Object Notation (JSON) string into an object.\n      * @param text A valid JSON string.\n      * @param reviver A function that transforms the results. This function is called for each member of the object.\n      * If a member contains nested objects, the nested objects are transformed before the parent object is.\n      */\n    parse(text: string, reviver?: (key: any, value: any) => any): any;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      */\n    stringify(value: any): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer A function that transforms the results.\n      */\n    stringify(value: any, replacer: (key: string, value: any) => any): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer Array that transforms the results.\n      */\n    stringify(value: any, replacer: any[]): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer A function that transforms the results.\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n      */\n    stringify(value: any, replacer: (key: string, value: any) => any, space: string | number): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer Array that transforms the results.\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n      */\n    stringify(value: any, replacer: any[], space: string | number): string;\n}\n/**\n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\n  */\ndeclare var JSON: JSON;\n\n\n/////////////////////////////\n/// ECMAScript Array API (specially handled by compiler)\n/////////////////////////////\n\ninterface Array<T> {\n    /**\n      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\n      */\n    length: number;\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n    toLocaleString(): string;\n    /**\n      * Appends new elements to an array, and returns the new length of the array.\n      * @param items New elements of the Array.\n      */\n    push(...items: T[]): number;\n    /**\n      * Removes the last element from an array and returns it.\n      */\n    pop(): T;\n    /**\n      * Combines two or more arrays.\n      * @param items Additional items to add to the end of array1.\n      */\n    concat<U extends T[]>(...items: U[]): T[];\n    /**\n      * Combines two or more arrays.\n      * @param items Additional items to add to the end of array1.\n      */\n    concat(...items: T[]): T[];\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): T[];\n    /**\n      * Removes the first element from an array and returns it.\n      */\n    shift(): T;\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): T[];\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: T, b: T) => number): T[];\n\n    /**\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n      * @param start The zero-based location in the array from which to start removing elements.\n      */\n    splice(start: number): T[];\n\n    /**\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n      * @param start The zero-based location in the array from which to start removing elements.\n      * @param deleteCount The number of elements to remove.\n      * @param items Elements to insert into the array in place of the deleted elements.\n      */\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n\n    /**\n      * Inserts new elements at the start of an array.\n      * @param items  Elements to insert at the start of the Array.\n      */\n    unshift(...items: T[]): number;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n      */\n    indexOf(searchElement: T, fromIndex?: number): number;\n\n    /**\n      * Returns the index of the last occurrence of a specified value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n      */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n      */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n    [n: number]: T;\n}\n\ninterface ArrayConstructor {\n    new (arrayLength?: number): any[];\n    new <T>(arrayLength: number): T[];\n    new <T>(...items: T[]): T[];\n    (arrayLength?: number): any[];\n    <T>(arrayLength: number): T[];\n    <T>(...items: T[]): T[];\n    isArray(arg: any): arg is Array<any>;\n    prototype: Array<any>;\n}\n\ndeclare var Array: ArrayConstructor;\n\ninterface TypedPropertyDescriptor<T> {\n    enumerable?: boolean;\n    configurable?: boolean;\n    writable?: boolean;\n    value?: T;\n    get?: () => T;\n    set?: (value: T) => void;\n}\n\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;\n\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\n\ninterface PromiseLike<T> {\n    /**\n    * Attaches callbacks for the resolution and/or rejection of the Promise.\n    * @param onfulfilled The callback to execute when the Promise is resolved.\n    * @param onrejected The callback to execute when the Promise is rejected.\n    * @returns A Promise for the completion of which ever callback is executed.\n    */\n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): PromiseLike<TResult>;\n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): PromiseLike<TResult>;\n}\n\ninterface ArrayLike<T> {\n    length: number;\n    [n: number]: T;\n}\n\n\n/**\n  * Represents a raw buffer of binary data, which is used to store data for the\n  * different typed arrays. ArrayBuffers cannot be read from or written to directly,\n  * but can be passed to a typed array or DataView Object to interpret the raw\n  * buffer as needed.\n  */\ninterface ArrayBuffer {\n    /**\n      * Read-only. The length of the ArrayBuffer (in bytes).\n      */\n    byteLength: number;\n\n    /**\n      * Returns a section of an ArrayBuffer.\n      */\n    slice(begin:number, end?:number): ArrayBuffer;\n}\n\ninterface ArrayBufferConstructor {\n    prototype: ArrayBuffer;\n    new (byteLength: number): ArrayBuffer;\n    isView(arg: any): arg is ArrayBufferView;\n}\ndeclare var ArrayBuffer: ArrayBufferConstructor;\n\ninterface ArrayBufferView {\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n}\n\ninterface DataView {\n    buffer: ArrayBuffer;\n    byteLength: number;\n    byteOffset: number;\n    /**\n      * Gets the Float32 value at the specified byte offset from the start of the view. There is\n      * no alignment constraint; multi-byte values may be fetched from any offset.\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\n      */\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n      * Gets the Float64 value at the specified byte offset from the start of the view. There is\n      * no alignment constraint; multi-byte values may be fetched from any offset.\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\n      */\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n      * Gets the Int8 value at the specified byte offset from the start of the view. There is\n      * no alignment constraint; multi-byte values may be fetched from any offset.\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\n      */\n    getInt8(byteOffset: number): number;\n\n    /**\n      * Gets the Int16 value at the specified byte offset from the start of the view. There is\n      * no alignment constraint; multi-byte values may be fetched from any offset.\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\n      */\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\n    /**\n      * Gets the Int32 value at the specified byte offset from the start of the view. There is\n      * no alignment constraint; multi-byte values may be fetched from any offset.\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\n      */\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n      * Gets the Uint8 value at the specified byte offset from the start of the view. There is\n      * no alignment constraint; multi-byte values may be fetched from any offset.\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\n      */\n    getUint8(byteOffset: number): number;\n\n    /**\n      * Gets the Uint16 value at the specified byte offset from the start of the view. There is\n      * no alignment constraint; multi-byte values may be fetched from any offset.\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\n      */\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n      * Gets the Uint32 value at the specified byte offset from the start of the view. There is\n      * no alignment constraint; multi-byte values may be fetched from any offset.\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\n      */\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n      * Stores an Float32 value at the specified byte offset from the start of the view.\n      * @param byteOffset The place in the buffer at which the value should be set.\n      * @param value The value to set.\n      * @param littleEndian If false or undefined, a big-endian value should be written,\n      * otherwise a little-endian value should be written.\n      */\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n      * Stores an Float64 value at the specified byte offset from the start of the view.\n      * @param byteOffset The place in the buffer at which the value should be set.\n      * @param value The value to set.\n      * @param littleEndian If false or undefined, a big-endian value should be written,\n      * otherwise a little-endian value should be written.\n      */\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n      * Stores an Int8 value at the specified byte offset from the start of the view.\n      * @param byteOffset The place in the buffer at which the value should be set.\n      * @param value The value to set.\n      */\n    setInt8(byteOffset: number, value: number): void;\n\n    /**\n      * Stores an Int16 value at the specified byte offset from the start of the view.\n      * @param byteOffset The place in the buffer at which the value should be set.\n      * @param value The value to set.\n      * @param littleEndian If false or undefined, a big-endian value should be written,\n      * otherwise a little-endian value should be written.\n      */\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n      * Stores an Int32 value at the specified byte offset from the start of the view.\n      * @param byteOffset The place in the buffer at which the value should be set.\n      * @param value The value to set.\n      * @param littleEndian If false or undefined, a big-endian value should be written,\n      * otherwise a little-endian value should be written.\n      */\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n      * Stores an Uint8 value at the specified byte offset from the start of the view.\n      * @param byteOffset The place in the buffer at which the value should be set.\n      * @param value The value to set.\n      */\n    setUint8(byteOffset: number, value: number): void;\n\n    /**\n      * Stores an Uint16 value at the specified byte offset from the start of the view.\n      * @param byteOffset The place in the buffer at which the value should be set.\n      * @param value The value to set.\n      * @param littleEndian If false or undefined, a big-endian value should be written,\n      * otherwise a little-endian value should be written.\n      */\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n      * Stores an Uint32 value at the specified byte offset from the start of the view.\n      * @param byteOffset The place in the buffer at which the value should be set.\n      * @param value The value to set.\n      * @param littleEndian If false or undefined, a big-endian value should be written,\n      * otherwise a little-endian value should be written.\n      */\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\n}\n\ninterface DataViewConstructor {\n    new (buffer: ArrayBuffer, byteOffset?: number, byteLength?: number): DataView;\n}\ndeclare var DataView: DataViewConstructor;\n\n/**\n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\n  * number of bytes could not be allocated an exception is raised.\n  */\ninterface Int8Array {\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): Int8Array;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as\n        * length+start where length is the length of the array.\n        * @param end index to stop filling the array at. If end is negative, it is treated as\n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Int8Array;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\n      * the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): Int8Array;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the\n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that\n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an\n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): Int8Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Int8Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If\n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Int8Array;\n\n    /**\n      * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive.\n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Int8Array;\n\n    /**\n      * Converts a number to a string by using the current locale.\n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    [index: number]: number;\n}\ninterface Int8ArrayConstructor {\n    prototype: Int8Array;\n    new (length: number): Int8Array;\n    new (array: ArrayLike<number>): Int8Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int8Array;\n\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Int8Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\n\n}\ndeclare var Int8Array: Int8ArrayConstructor;\n\n/**\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint8Array {\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): Uint8Array;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as\n        * length+start where length is the length of the array.\n        * @param end index to stop filling the array at. If end is negative, it is treated as\n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Uint8Array;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\n      * the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): Uint8Array;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the\n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that\n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an\n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): Uint8Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Uint8Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If\n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Uint8Array;\n\n    /**\n      * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive.\n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Uint8Array;\n\n    /**\n      * Converts a number to a string by using the current locale.\n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    [index: number]: number;\n}\n\ninterface Uint8ArrayConstructor {\n    prototype: Uint8Array;\n    new (length: number): Uint8Array;\n    new (array: ArrayLike<number>): Uint8Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8Array;\n\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Uint8Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\n\n}\ndeclare var Uint8Array: Uint8ArrayConstructor;\n\n/**\n  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\n  * If the requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint8ClampedArray {\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): Uint8ClampedArray;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as\n        * length+start where length is the length of the array.\n        * @param end index to stop filling the array at. If end is negative, it is treated as\n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Uint8ClampedArray;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\n      * the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): Uint8ClampedArray;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the\n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that\n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an\n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): Uint8ClampedArray;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: Uint8ClampedArray, offset?: number): void;\n\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Uint8ClampedArray;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If\n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Uint8ClampedArray;\n\n    /**\n      * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive.\n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Uint8ClampedArray;\n\n    /**\n      * Converts a number to a string by using the current locale.\n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    [index: number]: number;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    prototype: Uint8ClampedArray;\n    new (length: number): Uint8ClampedArray;\n    new (array: ArrayLike<number>): Uint8ClampedArray;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8ClampedArray;\n\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Uint8ClampedArray;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\n}\ndeclare var Uint8ClampedArray: Uint8ClampedArrayConstructor;\n\n/**\n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Int16Array {\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): Int16Array;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as\n        * length+start where length is the length of the array.\n        * @param end index to stop filling the array at. If end is negative, it is treated as\n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Int16Array;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\n      * the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): Int16Array;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the\n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that\n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an\n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): Int16Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Int16Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If\n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Int16Array;\n\n    /**\n      * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive.\n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Int16Array;\n\n    /**\n      * Converts a number to a string by using the current locale.\n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    [index: number]: number;\n}\n\ninterface Int16ArrayConstructor {\n    prototype: Int16Array;\n    new (length: number): Int16Array;\n    new (array: ArrayLike<number>): Int16Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int16Array;\n\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Int16Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\n\n}\ndeclare var Int16Array: Int16ArrayConstructor;\n\n/**\n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint16Array {\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): Uint16Array;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as\n        * length+start where length is the length of the array.\n        * @param end index to stop filling the array at. If end is negative, it is treated as\n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Uint16Array;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\n      * the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): Uint16Array;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the\n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that\n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an\n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): Uint16Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Uint16Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If\n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Uint16Array;\n\n    /**\n      * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive.\n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Uint16Array;\n\n    /**\n      * Converts a number to a string by using the current locale.\n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    [index: number]: number;\n}\n\ninterface Uint16ArrayConstructor {\n    prototype: Uint16Array;\n    new (length: number): Uint16Array;\n    new (array: ArrayLike<number>): Uint16Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint16Array;\n\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Uint16Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\n\n}\ndeclare var Uint16Array: Uint16ArrayConstructor;\n/**\n  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Int32Array {\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): Int32Array;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as\n        * length+start where length is the length of the array.\n        * @param end index to stop filling the array at. If end is negative, it is treated as\n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Int32Array;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\n      * the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): Int32Array;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the\n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that\n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an\n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): Int32Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Int32Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If\n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Int32Array;\n\n    /**\n      * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive.\n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Int32Array;\n\n    /**\n      * Converts a number to a string by using the current locale.\n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    [index: number]: number;\n}\n\ninterface Int32ArrayConstructor {\n    prototype: Int32Array;\n    new (length: number): Int32Array;\n    new (array: ArrayLike<number>): Int32Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int32Array;\n\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Int32Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\n}\ndeclare var Int32Array: Int32ArrayConstructor;\n\n/**\n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint32Array {\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): Uint32Array;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as\n        * length+start where length is the length of the array.\n        * @param end index to stop filling the array at. If end is negative, it is treated as\n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Uint32Array;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\n      * the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): Uint32Array;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the\n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that\n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an\n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): Uint32Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Uint32Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If\n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Uint32Array;\n\n    /**\n      * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive.\n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Uint32Array;\n\n    /**\n      * Converts a number to a string by using the current locale.\n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    [index: number]: number;\n}\n\ninterface Uint32ArrayConstructor {\n    prototype: Uint32Array;\n    new (length: number): Uint32Array;\n    new (array: ArrayLike<number>): Uint32Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint32Array;\n\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Uint32Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\n}\ndeclare var Uint32Array: Uint32ArrayConstructor;\n\n/**\n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\n  * of bytes could not be allocated an exception is raised.\n  */\ninterface Float32Array {\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): Float32Array;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as\n        * length+start where length is the length of the array.\n        * @param end index to stop filling the array at. If end is negative, it is treated as\n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Float32Array;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\n      * the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): Float32Array;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the\n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that\n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an\n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): Float32Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Float32Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If\n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Float32Array;\n\n    /**\n      * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive.\n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Float32Array;\n\n    /**\n      * Converts a number to a string by using the current locale.\n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    [index: number]: number;\n}\n\ninterface Float32ArrayConstructor {\n    prototype: Float32Array;\n    new (length: number): Float32Array;\n    new (array: ArrayLike<number>): Float32Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float32Array;\n\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Float32Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\n\n}\ndeclare var Float32Array: Float32ArrayConstructor;\n\n/**\n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\n  * number of bytes could not be allocated an exception is raised.\n  */\ninterface Float64Array {\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array.\n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /**\n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the\n      * length of the array.\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value.\n      */\n    copyWithin(target: number, start: number, end?: number): Float64Array;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as\n        * length+start where length is the length of the array.\n        * @param end index to stop filling the array at. If end is negative, it is treated as\n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Float64Array;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\n      * the callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): Float64Array;\n\n    /**\n      * Returns the value of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the index of the first element in the array where predicate is true, and undefined\n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending\n      * order, until it finds one where predicate returns true. If such an element is found, find\n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of\n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the\n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that\n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\n      * callbackfn function one time for each element in the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of\n      * the callback function is the accumulated result, and is provided as an argument in the next\n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an\n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array, in descending order.\n      * The return value of the callback function is the accumulated result, and is provided as an\n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array.\n      */\n    reverse(): Float64Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Float64Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If\n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Float64Array;\n\n    /**\n      * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive.\n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Float64Array;\n\n    /**\n      * Converts a number to a string by using the current locale.\n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    [index: number]: number;\n}\n\ninterface Float64ArrayConstructor {\n    prototype: Float64Array;\n    new (length: number): Float64Array;\n    new (array: ArrayLike<number>): Float64Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float64Array;\n\n    /**\n      * The size in bytes of each element in the array.\n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Float64Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\n}\ndeclare var Float64Array: Float64ArrayConstructor;\n/////////////////////////////\n/// ECMAScript Internationalization API\n/////////////////////////////\n\ndeclare module Intl {\n    interface CollatorOptions {\n        usage?: string;\n        localeMatcher?: string;\n        numeric?: boolean;\n        caseFirst?: string;\n        sensitivity?: string;\n        ignorePunctuation?: boolean;\n    }\n\n    interface ResolvedCollatorOptions {\n        locale: string;\n        usage: string;\n        sensitivity: string;\n        ignorePunctuation: boolean;\n        collation: string;\n        caseFirst: string;\n        numeric: boolean;\n    }\n\n    interface Collator {\n        compare(x: string, y: string): number;\n        resolvedOptions(): ResolvedCollatorOptions;\n    }\n    var Collator: {\n        new (locales?: string[], options?: CollatorOptions): Collator;\n        new (locale?: string, options?: CollatorOptions): Collator;\n        (locales?: string[], options?: CollatorOptions): Collator;\n        (locale?: string, options?: CollatorOptions): Collator;\n        supportedLocalesOf(locales: string[], options?: CollatorOptions): string[];\n        supportedLocalesOf(locale: string, options?: CollatorOptions): string[];\n    }\n\n    interface NumberFormatOptions {\n        localeMatcher?: string;\n        style?: string;\n        currency?: string;\n        currencyDisplay?: string;\n        useGrouping?: boolean;\n        minimumIntegerDigits?: number;\n        minimumFractionDigits?: number;\n        maximumFractionDigits?: number;\n        minimumSignificantDigits?: number;\n        maximumSignificantDigits?: number;\n    }\n\n    interface ResolvedNumberFormatOptions {\n        locale: string;\n        numberingSystem: string;\n        style: string;\n        currency?: string;\n        currencyDisplay?: string;\n        minimumIntegerDigits: number;\n        minimumFractionDigits: number;\n        maximumFractionDigits: number;\n        minimumSignificantDigits?: number;\n        maximumSignificantDigits?: number;\n        useGrouping: boolean;\n    }\n\n    interface NumberFormat {\n        format(value: number): string;\n        resolvedOptions(): ResolvedNumberFormatOptions;\n    }\n    var NumberFormat: {\n        new (locales?: string[], options?: NumberFormatOptions): NumberFormat;\n        new (locale?: string, options?: NumberFormatOptions): NumberFormat;\n        (locales?: string[], options?: NumberFormatOptions): NumberFormat;\n        (locale?: string, options?: NumberFormatOptions): NumberFormat;\n        supportedLocalesOf(locales: string[], options?: NumberFormatOptions): string[];\n        supportedLocalesOf(locale: string, options?: NumberFormatOptions): string[];\n    }\n\n    interface DateTimeFormatOptions {\n        localeMatcher?: string;\n        weekday?: string;\n        era?: string;\n        year?: string;\n        month?: string;\n        day?: string;\n        hour?: string;\n        minute?: string;\n        second?: string;\n        timeZoneName?: string;\n        formatMatcher?: string;\n        hour12?: boolean;\n        timeZone?: string;\n    }\n\n    interface ResolvedDateTimeFormatOptions {\n        locale: string;\n        calendar: string;\n        numberingSystem: string;\n        timeZone: string;\n        hour12?: boolean;\n        weekday?: string;\n        era?: string;\n        year?: string;\n        month?: string;\n        day?: string;\n        hour?: string;\n        minute?: string;\n        second?: string;\n        timeZoneName?: string;\n    }\n\n    interface DateTimeFormat {\n        format(date?: Date | number): string;\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\n    }\n    var DateTimeFormat: {\n        new (locales?: string[], options?: DateTimeFormatOptions): DateTimeFormat;\n        new (locale?: string, options?: DateTimeFormatOptions): DateTimeFormat;\n        (locales?: string[], options?: DateTimeFormatOptions): DateTimeFormat;\n        (locale?: string, options?: DateTimeFormatOptions): DateTimeFormat;\n        supportedLocalesOf(locales: string[], options?: DateTimeFormatOptions): string[];\n        supportedLocalesOf(locale: string, options?: DateTimeFormatOptions): string[];\n    }\n}\n\ninterface String {\n    /**\n      * Determines whether two strings are equivalent in the current locale.\n      * @param that String to compare to target string\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\n      */\n    localeCompare(that: string, locales: string[], options?: Intl.CollatorOptions): number;\n\n    /**\n      * Determines whether two strings are equivalent in the current locale.\n      * @param that String to compare to target string\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\n      */\n    localeCompare(that: string, locale: string, options?: Intl.CollatorOptions): number;\n}\n\ninterface Number {\n    /**\n      * Converts a number to a string by using the current or specified locale.\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n      * @param options An object that contains one or more properties that specify comparison options.\n      */\n    toLocaleString(locales?: string[], options?: Intl.NumberFormatOptions): string;\n\n    /**\n      * Converts a number to a string by using the current or specified locale.\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\n      * @param options An object that contains one or more properties that specify comparison options.\n      */\n    toLocaleString(locale?: string, options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Date {\n    /**\n      * Converts a date and time to a string by using the current or specified locale.\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n      * @param options An object that contains one or more properties that specify comparison options.\n      */\n    toLocaleString(locales?: string[], options?: Intl.DateTimeFormatOptions): string;\n    /**\n      * Converts a date to a string by using the current or specified locale.\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n      * @param options An object that contains one or more properties that specify comparison options.\n      */\n    toLocaleDateString(locales?: string[], options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n      * Converts a time to a string by using the current or specified locale.\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\n      * @param options An object that contains one or more properties that specify comparison options.\n      */\n    toLocaleTimeString(locale?: string[], options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n      * Converts a date and time to a string by using the current or specified locale.\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\n      * @param options An object that contains one or more properties that specify comparison options.\n      */\n    toLocaleString(locale?: string, options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n      * Converts a date to a string by using the current or specified locale.\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\n      * @param options An object that contains one or more properties that specify comparison options.\n      */\n    toLocaleDateString(locale?: string, options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n      * Converts a time to a string by using the current or specified locale.\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\n      * @param options An object that contains one or more properties that specify comparison options.\n      */\n    toLocaleTimeString(locale?: string, options?: Intl.DateTimeFormatOptions): string;\n}\n\n\n/////////////////////////////\n/// IE DOM APIs\n/////////////////////////////\n\ninterface Algorithm {\n    name?: string;\n}\n\ninterface AriaRequestEventInit extends EventInit {\n    attributeName?: string;\n    attributeValue?: string;\n}\n\ninterface ClipboardEventInit extends EventInit {\n    data?: string;\n    dataType?: string;\n}\n\ninterface CommandEventInit extends EventInit {\n    commandName?: string;\n    detail?: string;\n}\n\ninterface CompositionEventInit extends UIEventInit {\n    data?: string;\n}\n\ninterface ConfirmSiteSpecificExceptionsInformation extends ExceptionInformation {\n    arrayOfDomainStrings?: string[];\n}\n\ninterface CustomEventInit extends EventInit {\n    detail?: any;\n}\n\ninterface DeviceAccelerationDict {\n    x?: number;\n    y?: number;\n    z?: number;\n}\n\ninterface DeviceRotationRateDict {\n    alpha?: number;\n    beta?: number;\n    gamma?: number;\n}\n\ninterface EventInit {\n    bubbles?: boolean;\n    cancelable?: boolean;\n}\n\ninterface ExceptionInformation {\n    domain?: string;\n}\n\ninterface FocusEventInit extends UIEventInit {\n    relatedTarget?: EventTarget;\n}\n\ninterface HashChangeEventInit extends EventInit {\n    newURL?: string;\n    oldURL?: string;\n}\n\ninterface KeyAlgorithm {\n    name?: string;\n}\n\ninterface KeyboardEventInit extends SharedKeyboardAndMouseEventInit {\n    key?: string;\n    location?: number;\n    repeat?: boolean;\n}\n\ninterface MouseEventInit extends SharedKeyboardAndMouseEventInit {\n    screenX?: number;\n    screenY?: number;\n    clientX?: number;\n    clientY?: number;\n    button?: number;\n    buttons?: number;\n    relatedTarget?: EventTarget;\n}\n\ninterface MsZoomToOptions {\n    contentX?: number;\n    contentY?: number;\n    viewportX?: string;\n    viewportY?: string;\n    scaleFactor?: number;\n    animate?: string;\n}\n\ninterface MutationObserverInit {\n    childList?: boolean;\n    attributes?: boolean;\n    characterData?: boolean;\n    subtree?: boolean;\n    attributeOldValue?: boolean;\n    characterDataOldValue?: boolean;\n    attributeFilter?: string[];\n}\n\ninterface ObjectURLOptions {\n    oneTimeOnly?: boolean;\n}\n\ninterface PointerEventInit extends MouseEventInit {\n    pointerId?: number;\n    width?: number;\n    height?: number;\n    pressure?: number;\n    tiltX?: number;\n    tiltY?: number;\n    pointerType?: string;\n    isPrimary?: boolean;\n}\n\ninterface PositionOptions {\n    enableHighAccuracy?: boolean;\n    timeout?: number;\n    maximumAge?: number;\n}\n\ninterface SharedKeyboardAndMouseEventInit extends UIEventInit {\n    ctrlKey?: boolean;\n    shiftKey?: boolean;\n    altKey?: boolean;\n    metaKey?: boolean;\n    keyModifierStateAltGraph?: boolean;\n    keyModifierStateCapsLock?: boolean;\n    keyModifierStateFn?: boolean;\n    keyModifierStateFnLock?: boolean;\n    keyModifierStateHyper?: boolean;\n    keyModifierStateNumLock?: boolean;\n    keyModifierStateOS?: boolean;\n    keyModifierStateScrollLock?: boolean;\n    keyModifierStateSuper?: boolean;\n    keyModifierStateSymbol?: boolean;\n    keyModifierStateSymbolLock?: boolean;\n}\n\ninterface StoreExceptionsInformation extends ExceptionInformation {\n    siteName?: string;\n    explanationString?: string;\n    detailURI?: string;\n}\n\ninterface StoreSiteSpecificExceptionsInformation extends StoreExceptionsInformation {\n    arrayOfDomainStrings?: string[];\n}\n\ninterface UIEventInit extends EventInit {\n    view?: Window;\n    detail?: number;\n}\n\ninterface WebGLContextAttributes {\n    alpha?: boolean;\n    depth?: boolean;\n    stencil?: boolean;\n    antialias?: boolean;\n    premultipliedAlpha?: boolean;\n    preserveDrawingBuffer?: boolean;\n}\n\ninterface WebGLContextEventInit extends EventInit {\n    statusMessage?: string;\n}\n\ninterface WheelEventInit extends MouseEventInit {\n    deltaX?: number;\n    deltaY?: number;\n    deltaZ?: number;\n    deltaMode?: number;\n}\n\ninterface EventListener {\n    (evt: Event): void;\n}\n\ninterface ANGLE_instanced_arrays {\n    drawArraysInstancedANGLE(mode: number, first: number, count: number, primcount: number): void;\n    drawElementsInstancedANGLE(mode: number, count: number, type: number, offset: number, primcount: number): void;\n    vertexAttribDivisorANGLE(index: number, divisor: number): void;\n    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number;\n}\n\ndeclare var ANGLE_instanced_arrays: {\n    prototype: ANGLE_instanced_arrays;\n    new(): ANGLE_instanced_arrays;\n    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number;\n}\n\ninterface AnalyserNode extends AudioNode {\n    fftSize: number;\n    frequencyBinCount: number;\n    maxDecibels: number;\n    minDecibels: number;\n    smoothingTimeConstant: number;\n    getByteFrequencyData(array: Uint8Array): void;\n    getByteTimeDomainData(array: Uint8Array): void;\n    getFloatFrequencyData(array: Float32Array): void;\n    getFloatTimeDomainData(array: Float32Array): void;\n}\n\ndeclare var AnalyserNode: {\n    prototype: AnalyserNode;\n    new(): AnalyserNode;\n}\n\ninterface AnimationEvent extends Event {\n    animationName: string;\n    elapsedTime: number;\n    initAnimationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, animationNameArg: string, elapsedTimeArg: number): void;\n}\n\ndeclare var AnimationEvent: {\n    prototype: AnimationEvent;\n    new(): AnimationEvent;\n}\n\ninterface ApplicationCache extends EventTarget {\n    oncached: (ev: Event) => any;\n    onchecking: (ev: Event) => any;\n    ondownloading: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onnoupdate: (ev: Event) => any;\n    onobsolete: (ev: Event) => any;\n    onprogress: (ev: ProgressEvent) => any;\n    onupdateready: (ev: Event) => any;\n    status: number;\n    abort(): void;\n    swapCache(): void;\n    update(): void;\n    CHECKING: number;\n    DOWNLOADING: number;\n    IDLE: number;\n    OBSOLETE: number;\n    UNCACHED: number;\n    UPDATEREADY: number;\n    addEventListener(type: \"cached\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"checking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"downloading\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"noupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"obsolete\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"updateready\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var ApplicationCache: {\n    prototype: ApplicationCache;\n    new(): ApplicationCache;\n    CHECKING: number;\n    DOWNLOADING: number;\n    IDLE: number;\n    OBSOLETE: number;\n    UNCACHED: number;\n    UPDATEREADY: number;\n}\n\ninterface AriaRequestEvent extends Event {\n    attributeName: string;\n    attributeValue: string;\n}\n\ndeclare var AriaRequestEvent: {\n    prototype: AriaRequestEvent;\n    new(type: string, eventInitDict?: AriaRequestEventInit): AriaRequestEvent;\n}\n\ninterface Attr extends Node {\n    name: string;\n    ownerElement: Element;\n    specified: boolean;\n    value: string;\n}\n\ndeclare var Attr: {\n    prototype: Attr;\n    new(): Attr;\n}\n\ninterface AudioBuffer {\n    duration: number;\n    length: number;\n    numberOfChannels: number;\n    sampleRate: number;\n    getChannelData(channel: number): Float32Array;\n}\n\ndeclare var AudioBuffer: {\n    prototype: AudioBuffer;\n    new(): AudioBuffer;\n}\n\ninterface AudioBufferSourceNode extends AudioNode {\n    buffer: AudioBuffer;\n    loop: boolean;\n    loopEnd: number;\n    loopStart: number;\n    onended: (ev: Event) => any;\n    playbackRate: AudioParam;\n    start(when?: number, offset?: number, duration?: number): void;\n    stop(when?: number): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var AudioBufferSourceNode: {\n    prototype: AudioBufferSourceNode;\n    new(): AudioBufferSourceNode;\n}\n\ninterface AudioContext extends EventTarget {\n    currentTime: number;\n    destination: AudioDestinationNode;\n    listener: AudioListener;\n    sampleRate: number;\n    state: string;\n    createAnalyser(): AnalyserNode;\n    createBiquadFilter(): BiquadFilterNode;\n    createBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer;\n    createBufferSource(): AudioBufferSourceNode;\n    createChannelMerger(numberOfInputs?: number): ChannelMergerNode;\n    createChannelSplitter(numberOfOutputs?: number): ChannelSplitterNode;\n    createConvolver(): ConvolverNode;\n    createDelay(maxDelayTime?: number): DelayNode;\n    createDynamicsCompressor(): DynamicsCompressorNode;\n    createGain(): GainNode;\n    createMediaElementSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode;\n    createOscillator(): OscillatorNode;\n    createPanner(): PannerNode;\n    createPeriodicWave(real: Float32Array, imag: Float32Array): PeriodicWave;\n    createScriptProcessor(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): ScriptProcessorNode;\n    createStereoPanner(): StereoPannerNode;\n    createWaveShaper(): WaveShaperNode;\n    decodeAudioData(audioData: ArrayBuffer, successCallback: DecodeSuccessCallback, errorCallback?: DecodeErrorCallback): void;\n}\n\ndeclare var AudioContext: {\n    prototype: AudioContext;\n    new(): AudioContext;\n}\n\ninterface AudioDestinationNode extends AudioNode {\n    maxChannelCount: number;\n}\n\ndeclare var AudioDestinationNode: {\n    prototype: AudioDestinationNode;\n    new(): AudioDestinationNode;\n}\n\ninterface AudioListener {\n    dopplerFactor: number;\n    speedOfSound: number;\n    setOrientation(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number): void;\n    setPosition(x: number, y: number, z: number): void;\n    setVelocity(x: number, y: number, z: number): void;\n}\n\ndeclare var AudioListener: {\n    prototype: AudioListener;\n    new(): AudioListener;\n}\n\ninterface AudioNode extends EventTarget {\n    channelCount: number;\n    channelCountMode: string;\n    channelInterpretation: string;\n    context: AudioContext;\n    numberOfInputs: number;\n    numberOfOutputs: number;\n    connect(destination: AudioNode, output?: number, input?: number): void;\n    disconnect(output?: number): void;\n}\n\ndeclare var AudioNode: {\n    prototype: AudioNode;\n    new(): AudioNode;\n}\n\ninterface AudioParam {\n    defaultValue: number;\n    value: number;\n    cancelScheduledValues(startTime: number): void;\n    exponentialRampToValueAtTime(value: number, endTime: number): void;\n    linearRampToValueAtTime(value: number, endTime: number): void;\n    setTargetAtTime(target: number, startTime: number, timeConstant: number): void;\n    setValueAtTime(value: number, startTime: number): void;\n    setValueCurveAtTime(values: Float32Array, startTime: number, duration: number): void;\n}\n\ndeclare var AudioParam: {\n    prototype: AudioParam;\n    new(): AudioParam;\n}\n\ninterface AudioProcessingEvent extends Event {\n    inputBuffer: AudioBuffer;\n    outputBuffer: AudioBuffer;\n    playbackTime: number;\n}\n\ndeclare var AudioProcessingEvent: {\n    prototype: AudioProcessingEvent;\n    new(): AudioProcessingEvent;\n}\n\ninterface AudioTrack {\n    enabled: boolean;\n    id: string;\n    kind: string;\n    label: string;\n    language: string;\n    sourceBuffer: SourceBuffer;\n}\n\ndeclare var AudioTrack: {\n    prototype: AudioTrack;\n    new(): AudioTrack;\n}\n\ninterface AudioTrackList extends EventTarget {\n    length: number;\n    onaddtrack: (ev: TrackEvent) => any;\n    onchange: (ev: Event) => any;\n    onremovetrack: (ev: TrackEvent) => any;\n    getTrackById(id: string): AudioTrack;\n    item(index: number): AudioTrack;\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"removetrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n    [index: number]: AudioTrack;\n}\n\ndeclare var AudioTrackList: {\n    prototype: AudioTrackList;\n    new(): AudioTrackList;\n}\n\ninterface BarProp {\n    visible: boolean;\n}\n\ndeclare var BarProp: {\n    prototype: BarProp;\n    new(): BarProp;\n}\n\ninterface BeforeUnloadEvent extends Event {\n    returnValue: any;\n}\n\ndeclare var BeforeUnloadEvent: {\n    prototype: BeforeUnloadEvent;\n    new(): BeforeUnloadEvent;\n}\n\ninterface BiquadFilterNode extends AudioNode {\n    Q: AudioParam;\n    detune: AudioParam;\n    frequency: AudioParam;\n    gain: AudioParam;\n    type: string;\n    getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void;\n}\n\ndeclare var BiquadFilterNode: {\n    prototype: BiquadFilterNode;\n    new(): BiquadFilterNode;\n}\n\ninterface Blob {\n    size: number;\n    type: string;\n    msClose(): void;\n    msDetachStream(): any;\n    slice(start?: number, end?: number, contentType?: string): Blob;\n}\n\ndeclare var Blob: {\n    prototype: Blob;\n    new (blobParts?: any[], options?: BlobPropertyBag): Blob;\n}\n\ninterface CDATASection extends Text {\n}\n\ndeclare var CDATASection: {\n    prototype: CDATASection;\n    new(): CDATASection;\n}\n\ninterface CSS {\n    supports(property: string, value?: string): boolean;\n}\ndeclare var CSS: CSS;\n\ninterface CSSConditionRule extends CSSGroupingRule {\n    conditionText: string;\n}\n\ndeclare var CSSConditionRule: {\n    prototype: CSSConditionRule;\n    new(): CSSConditionRule;\n}\n\ninterface CSSFontFaceRule extends CSSRule {\n    style: CSSStyleDeclaration;\n}\n\ndeclare var CSSFontFaceRule: {\n    prototype: CSSFontFaceRule;\n    new(): CSSFontFaceRule;\n}\n\ninterface CSSGroupingRule extends CSSRule {\n    cssRules: CSSRuleList;\n    deleteRule(index?: number): void;\n    insertRule(rule: string, index?: number): number;\n}\n\ndeclare var CSSGroupingRule: {\n    prototype: CSSGroupingRule;\n    new(): CSSGroupingRule;\n}\n\ninterface CSSImportRule extends CSSRule {\n    href: string;\n    media: MediaList;\n    styleSheet: CSSStyleSheet;\n}\n\ndeclare var CSSImportRule: {\n    prototype: CSSImportRule;\n    new(): CSSImportRule;\n}\n\ninterface CSSKeyframeRule extends CSSRule {\n    keyText: string;\n    style: CSSStyleDeclaration;\n}\n\ndeclare var CSSKeyframeRule: {\n    prototype: CSSKeyframeRule;\n    new(): CSSKeyframeRule;\n}\n\ninterface CSSKeyframesRule extends CSSRule {\n    cssRules: CSSRuleList;\n    name: string;\n    appendRule(rule: string): void;\n    deleteRule(rule: string): void;\n    findRule(rule: string): CSSKeyframeRule;\n}\n\ndeclare var CSSKeyframesRule: {\n    prototype: CSSKeyframesRule;\n    new(): CSSKeyframesRule;\n}\n\ninterface CSSMediaRule extends CSSConditionRule {\n    media: MediaList;\n}\n\ndeclare var CSSMediaRule: {\n    prototype: CSSMediaRule;\n    new(): CSSMediaRule;\n}\n\ninterface CSSNamespaceRule extends CSSRule {\n    namespaceURI: string;\n    prefix: string;\n}\n\ndeclare var CSSNamespaceRule: {\n    prototype: CSSNamespaceRule;\n    new(): CSSNamespaceRule;\n}\n\ninterface CSSPageRule extends CSSRule {\n    pseudoClass: string;\n    selector: string;\n    selectorText: string;\n    style: CSSStyleDeclaration;\n}\n\ndeclare var CSSPageRule: {\n    prototype: CSSPageRule;\n    new(): CSSPageRule;\n}\n\ninterface CSSRule {\n    cssText: string;\n    parentRule: CSSRule;\n    parentStyleSheet: CSSStyleSheet;\n    type: number;\n    CHARSET_RULE: number;\n    FONT_FACE_RULE: number;\n    IMPORT_RULE: number;\n    KEYFRAMES_RULE: number;\n    KEYFRAME_RULE: number;\n    MEDIA_RULE: number;\n    NAMESPACE_RULE: number;\n    PAGE_RULE: number;\n    STYLE_RULE: number;\n    SUPPORTS_RULE: number;\n    UNKNOWN_RULE: number;\n    VIEWPORT_RULE: number;\n}\n\ndeclare var CSSRule: {\n    prototype: CSSRule;\n    new(): CSSRule;\n    CHARSET_RULE: number;\n    FONT_FACE_RULE: number;\n    IMPORT_RULE: number;\n    KEYFRAMES_RULE: number;\n    KEYFRAME_RULE: number;\n    MEDIA_RULE: number;\n    NAMESPACE_RULE: number;\n    PAGE_RULE: number;\n    STYLE_RULE: number;\n    SUPPORTS_RULE: number;\n    UNKNOWN_RULE: number;\n    VIEWPORT_RULE: number;\n}\n\ninterface CSSRuleList {\n    length: number;\n    item(index: number): CSSRule;\n    [index: number]: CSSRule;\n}\n\ndeclare var CSSRuleList: {\n    prototype: CSSRuleList;\n    new(): CSSRuleList;\n}\n\ninterface CSSStyleDeclaration {\n    alignContent: string;\n    alignItems: string;\n    alignSelf: string;\n    alignmentBaseline: string;\n    animation: string;\n    animationDelay: string;\n    animationDirection: string;\n    animationDuration: string;\n    animationFillMode: string;\n    animationIterationCount: string;\n    animationName: string;\n    animationPlayState: string;\n    animationTimingFunction: string;\n    backfaceVisibility: string;\n    background: string;\n    backgroundAttachment: string;\n    backgroundClip: string;\n    backgroundColor: string;\n    backgroundImage: string;\n    backgroundOrigin: string;\n    backgroundPosition: string;\n    backgroundPositionX: string;\n    backgroundPositionY: string;\n    backgroundRepeat: string;\n    backgroundSize: string;\n    baselineShift: string;\n    border: string;\n    borderBottom: string;\n    borderBottomColor: string;\n    borderBottomLeftRadius: string;\n    borderBottomRightRadius: string;\n    borderBottomStyle: string;\n    borderBottomWidth: string;\n    borderCollapse: string;\n    borderColor: string;\n    borderImage: string;\n    borderImageOutset: string;\n    borderImageRepeat: string;\n    borderImageSlice: string;\n    borderImageSource: string;\n    borderImageWidth: string;\n    borderLeft: string;\n    borderLeftColor: string;\n    borderLeftStyle: string;\n    borderLeftWidth: string;\n    borderRadius: string;\n    borderRight: string;\n    borderRightColor: string;\n    borderRightStyle: string;\n    borderRightWidth: string;\n    borderSpacing: string;\n    borderStyle: string;\n    borderTop: string;\n    borderTopColor: string;\n    borderTopLeftRadius: string;\n    borderTopRightRadius: string;\n    borderTopStyle: string;\n    borderTopWidth: string;\n    borderWidth: string;\n    bottom: string;\n    boxShadow: string;\n    boxSizing: string;\n    breakAfter: string;\n    breakBefore: string;\n    breakInside: string;\n    captionSide: string;\n    clear: string;\n    clip: string;\n    clipPath: string;\n    clipRule: string;\n    color: string;\n    colorInterpolationFilters: string;\n    columnCount: any;\n    columnFill: string;\n    columnGap: any;\n    columnRule: string;\n    columnRuleColor: any;\n    columnRuleStyle: string;\n    columnRuleWidth: any;\n    columnSpan: string;\n    columnWidth: any;\n    columns: string;\n    content: string;\n    counterIncrement: string;\n    counterReset: string;\n    cssFloat: string;\n    cssText: string;\n    cursor: string;\n    direction: string;\n    display: string;\n    dominantBaseline: string;\n    emptyCells: string;\n    enableBackground: string;\n    fill: string;\n    fillOpacity: string;\n    fillRule: string;\n    filter: string;\n    flex: string;\n    flexBasis: string;\n    flexDirection: string;\n    flexFlow: string;\n    flexGrow: string;\n    flexShrink: string;\n    flexWrap: string;\n    floodColor: string;\n    floodOpacity: string;\n    font: string;\n    fontFamily: string;\n    fontFeatureSettings: string;\n    fontSize: string;\n    fontSizeAdjust: string;\n    fontStretch: string;\n    fontStyle: string;\n    fontVariant: string;\n    fontWeight: string;\n    glyphOrientationHorizontal: string;\n    glyphOrientationVertical: string;\n    height: string;\n    imeMode: string;\n    justifyContent: string;\n    kerning: string;\n    left: string;\n    length: number;\n    letterSpacing: string;\n    lightingColor: string;\n    lineHeight: string;\n    listStyle: string;\n    listStyleImage: string;\n    listStylePosition: string;\n    listStyleType: string;\n    margin: string;\n    marginBottom: string;\n    marginLeft: string;\n    marginRight: string;\n    marginTop: string;\n    marker: string;\n    markerEnd: string;\n    markerMid: string;\n    markerStart: string;\n    mask: string;\n    maxHeight: string;\n    maxWidth: string;\n    minHeight: string;\n    minWidth: string;\n    msContentZoomChaining: string;\n    msContentZoomLimit: string;\n    msContentZoomLimitMax: any;\n    msContentZoomLimitMin: any;\n    msContentZoomSnap: string;\n    msContentZoomSnapPoints: string;\n    msContentZoomSnapType: string;\n    msContentZooming: string;\n    msFlowFrom: string;\n    msFlowInto: string;\n    msFontFeatureSettings: string;\n    msGridColumn: any;\n    msGridColumnAlign: string;\n    msGridColumnSpan: any;\n    msGridColumns: string;\n    msGridRow: any;\n    msGridRowAlign: string;\n    msGridRowSpan: any;\n    msGridRows: string;\n    msHighContrastAdjust: string;\n    msHyphenateLimitChars: string;\n    msHyphenateLimitLines: any;\n    msHyphenateLimitZone: any;\n    msHyphens: string;\n    msImeAlign: string;\n    msOverflowStyle: string;\n    msScrollChaining: string;\n    msScrollLimit: string;\n    msScrollLimitXMax: any;\n    msScrollLimitXMin: any;\n    msScrollLimitYMax: any;\n    msScrollLimitYMin: any;\n    msScrollRails: string;\n    msScrollSnapPointsX: string;\n    msScrollSnapPointsY: string;\n    msScrollSnapType: string;\n    msScrollSnapX: string;\n    msScrollSnapY: string;\n    msScrollTranslation: string;\n    msTextCombineHorizontal: string;\n    msTextSizeAdjust: any;\n    msTouchAction: string;\n    msTouchSelect: string;\n    msUserSelect: string;\n    msWrapFlow: string;\n    msWrapMargin: any;\n    msWrapThrough: string;\n    opacity: string;\n    order: string;\n    orphans: string;\n    outline: string;\n    outlineColor: string;\n    outlineStyle: string;\n    outlineWidth: string;\n    overflow: string;\n    overflowX: string;\n    overflowY: string;\n    padding: string;\n    paddingBottom: string;\n    paddingLeft: string;\n    paddingRight: string;\n    paddingTop: string;\n    pageBreakAfter: string;\n    pageBreakBefore: string;\n    pageBreakInside: string;\n    parentRule: CSSRule;\n    perspective: string;\n    perspectiveOrigin: string;\n    pointerEvents: string;\n    position: string;\n    quotes: string;\n    right: string;\n    rubyAlign: string;\n    rubyOverhang: string;\n    rubyPosition: string;\n    stopColor: string;\n    stopOpacity: string;\n    stroke: string;\n    strokeDasharray: string;\n    strokeDashoffset: string;\n    strokeLinecap: string;\n    strokeLinejoin: string;\n    strokeMiterlimit: string;\n    strokeOpacity: string;\n    strokeWidth: string;\n    tableLayout: string;\n    textAlign: string;\n    textAlignLast: string;\n    textAnchor: string;\n    textDecoration: string;\n    textFillColor: string;\n    textIndent: string;\n    textJustify: string;\n    textKashida: string;\n    textKashidaSpace: string;\n    textOverflow: string;\n    textShadow: string;\n    textTransform: string;\n    textUnderlinePosition: string;\n    top: string;\n    touchAction: string;\n    transform: string;\n    transformOrigin: string;\n    transformStyle: string;\n    transition: string;\n    transitionDelay: string;\n    transitionDuration: string;\n    transitionProperty: string;\n    transitionTimingFunction: string;\n    unicodeBidi: string;\n    verticalAlign: string;\n    visibility: string;\n    webkitAlignContent: string;\n    webkitAlignItems: string;\n    webkitAlignSelf: string;\n    webkitAnimation: string;\n    webkitAnimationDelay: string;\n    webkitAnimationDirection: string;\n    webkitAnimationDuration: string;\n    webkitAnimationFillMode: string;\n    webkitAnimationIterationCount: string;\n    webkitAnimationName: string;\n    webkitAnimationPlayState: string;\n    webkitAnimationTimingFunction: string;\n    webkitAppearance: string;\n    webkitBackfaceVisibility: string;\n    webkitBackground: string;\n    webkitBackgroundAttachment: string;\n    webkitBackgroundClip: string;\n    webkitBackgroundColor: string;\n    webkitBackgroundImage: string;\n    webkitBackgroundOrigin: string;\n    webkitBackgroundPosition: string;\n    webkitBackgroundPositionX: string;\n    webkitBackgroundPositionY: string;\n    webkitBackgroundRepeat: string;\n    webkitBackgroundSize: string;\n    webkitBorderBottomLeftRadius: string;\n    webkitBorderBottomRightRadius: string;\n    webkitBorderImage: string;\n    webkitBorderImageOutset: string;\n    webkitBorderImageRepeat: string;\n    webkitBorderImageSlice: string;\n    webkitBorderImageSource: string;\n    webkitBorderImageWidth: string;\n    webkitBorderRadius: string;\n    webkitBorderTopLeftRadius: string;\n    webkitBorderTopRightRadius: string;\n    webkitBoxAlign: string;\n    webkitBoxDirection: string;\n    webkitBoxFlex: string;\n    webkitBoxOrdinalGroup: string;\n    webkitBoxOrient: string;\n    webkitBoxPack: string;\n    webkitBoxSizing: string;\n    webkitColumnBreakAfter: string;\n    webkitColumnBreakBefore: string;\n    webkitColumnBreakInside: string;\n    webkitColumnCount: any;\n    webkitColumnGap: any;\n    webkitColumnRule: string;\n    webkitColumnRuleColor: any;\n    webkitColumnRuleStyle: string;\n    webkitColumnRuleWidth: any;\n    webkitColumnSpan: string;\n    webkitColumnWidth: any;\n    webkitColumns: string;\n    webkitFilter: string;\n    webkitFlex: string;\n    webkitFlexBasis: string;\n    webkitFlexDirection: string;\n    webkitFlexFlow: string;\n    webkitFlexGrow: string;\n    webkitFlexShrink: string;\n    webkitFlexWrap: string;\n    webkitJustifyContent: string;\n    webkitOrder: string;\n    webkitPerspective: string;\n    webkitPerspectiveOrigin: string;\n    webkitTapHighlightColor: string;\n    webkitTextFillColor: string;\n    webkitTextSizeAdjust: any;\n    webkitTransform: string;\n    webkitTransformOrigin: string;\n    webkitTransformStyle: string;\n    webkitTransition: string;\n    webkitTransitionDelay: string;\n    webkitTransitionDuration: string;\n    webkitTransitionProperty: string;\n    webkitTransitionTimingFunction: string;\n    webkitUserSelect: string;\n    webkitWritingMode: string;\n    whiteSpace: string;\n    widows: string;\n    width: string;\n    wordBreak: string;\n    wordSpacing: string;\n    wordWrap: string;\n    writingMode: string;\n    zIndex: string;\n    zoom: string;\n    getPropertyPriority(propertyName: string): string;\n    getPropertyValue(propertyName: string): string;\n    item(index: number): string;\n    removeProperty(propertyName: string): string;\n    setProperty(propertyName: string, value: string, priority?: string): void;\n    [index: number]: string;\n}\n\ndeclare var CSSStyleDeclaration: {\n    prototype: CSSStyleDeclaration;\n    new(): CSSStyleDeclaration;\n}\n\ninterface CSSStyleRule extends CSSRule {\n    readOnly: boolean;\n    selectorText: string;\n    style: CSSStyleDeclaration;\n}\n\ndeclare var CSSStyleRule: {\n    prototype: CSSStyleRule;\n    new(): CSSStyleRule;\n}\n\ninterface CSSStyleSheet extends StyleSheet {\n    cssRules: CSSRuleList;\n    cssText: string;\n    href: string;\n    id: string;\n    imports: StyleSheetList;\n    isAlternate: boolean;\n    isPrefAlternate: boolean;\n    ownerRule: CSSRule;\n    owningElement: Element;\n    pages: StyleSheetPageList;\n    readOnly: boolean;\n    rules: CSSRuleList;\n    addImport(bstrURL: string, lIndex?: number): number;\n    addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;\n    addRule(bstrSelector: string, bstrStyle?: string, lIndex?: number): number;\n    deleteRule(index?: number): void;\n    insertRule(rule: string, index?: number): number;\n    removeImport(lIndex: number): void;\n    removeRule(lIndex: number): void;\n}\n\ndeclare var CSSStyleSheet: {\n    prototype: CSSStyleSheet;\n    new(): CSSStyleSheet;\n}\n\ninterface CSSSupportsRule extends CSSConditionRule {\n}\n\ndeclare var CSSSupportsRule: {\n    prototype: CSSSupportsRule;\n    new(): CSSSupportsRule;\n}\n\ninterface CanvasGradient {\n    addColorStop(offset: number, color: string): void;\n}\n\ndeclare var CanvasGradient: {\n    prototype: CanvasGradient;\n    new(): CanvasGradient;\n}\n\ninterface CanvasPattern {\n}\n\ndeclare var CanvasPattern: {\n    prototype: CanvasPattern;\n    new(): CanvasPattern;\n}\n\ninterface CanvasRenderingContext2D {\n    canvas: HTMLCanvasElement;\n    fillStyle: string | CanvasGradient | CanvasPattern;\n    font: string;\n    globalAlpha: number;\n    globalCompositeOperation: string;\n    lineCap: string;\n    lineDashOffset: number;\n    lineJoin: string;\n    lineWidth: number;\n    miterLimit: number;\n    msFillRule: string;\n    msImageSmoothingEnabled: boolean;\n    shadowBlur: number;\n    shadowColor: string;\n    shadowOffsetX: number;\n    shadowOffsetY: number;\n    strokeStyle: string | CanvasGradient | CanvasPattern;\n    textAlign: string;\n    textBaseline: string;\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\n    beginPath(): void;\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\n    clearRect(x: number, y: number, w: number, h: number): void;\n    clip(fillRule?: string): void;\n    closePath(): void;\n    createImageData(imageDataOrSw: number | ImageData, sh?: number): ImageData;\n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\n    createPattern(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, repetition: string): CanvasPattern;\n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\n    drawImage(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number): void;\n    fill(fillRule?: string): void;\n    fillRect(x: number, y: number, w: number, h: number): void;\n    fillText(text: string, x: number, y: number, maxWidth?: number): void;\n    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\n    getLineDash(): number[];\n    isPointInPath(x: number, y: number, fillRule?: string): boolean;\n    lineTo(x: number, y: number): void;\n    measureText(text: string): TextMetrics;\n    moveTo(x: number, y: number): void;\n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void;\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\n    rect(x: number, y: number, w: number, h: number): void;\n    restore(): void;\n    rotate(angle: number): void;\n    save(): void;\n    scale(x: number, y: number): void;\n    setLineDash(segments: number[]): void;\n    setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\n    stroke(): void;\n    strokeRect(x: number, y: number, w: number, h: number): void;\n    strokeText(text: string, x: number, y: number, maxWidth?: number): void;\n    transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\n    translate(x: number, y: number): void;\n}\n\ndeclare var CanvasRenderingContext2D: {\n    prototype: CanvasRenderingContext2D;\n    new(): CanvasRenderingContext2D;\n}\n\ninterface ChannelMergerNode extends AudioNode {\n}\n\ndeclare var ChannelMergerNode: {\n    prototype: ChannelMergerNode;\n    new(): ChannelMergerNode;\n}\n\ninterface ChannelSplitterNode extends AudioNode {\n}\n\ndeclare var ChannelSplitterNode: {\n    prototype: ChannelSplitterNode;\n    new(): ChannelSplitterNode;\n}\n\ninterface CharacterData extends Node, ChildNode {\n    data: string;\n    length: number;\n    appendData(arg: string): void;\n    deleteData(offset: number, count: number): void;\n    insertData(offset: number, arg: string): void;\n    replaceData(offset: number, count: number, arg: string): void;\n    substringData(offset: number, count: number): string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var CharacterData: {\n    prototype: CharacterData;\n    new(): CharacterData;\n}\n\ninterface ClientRect {\n    bottom: number;\n    height: number;\n    left: number;\n    right: number;\n    top: number;\n    width: number;\n}\n\ndeclare var ClientRect: {\n    prototype: ClientRect;\n    new(): ClientRect;\n}\n\ninterface ClientRectList {\n    length: number;\n    item(index: number): ClientRect;\n    [index: number]: ClientRect;\n}\n\ndeclare var ClientRectList: {\n    prototype: ClientRectList;\n    new(): ClientRectList;\n}\n\ninterface ClipboardEvent extends Event {\n    clipboardData: DataTransfer;\n}\n\ndeclare var ClipboardEvent: {\n    prototype: ClipboardEvent;\n    new(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent;\n}\n\ninterface CloseEvent extends Event {\n    code: number;\n    reason: string;\n    wasClean: boolean;\n    initCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void;\n}\n\ndeclare var CloseEvent: {\n    prototype: CloseEvent;\n    new(): CloseEvent;\n}\n\ninterface CommandEvent extends Event {\n    commandName: string;\n    detail: string;\n}\n\ndeclare var CommandEvent: {\n    prototype: CommandEvent;\n    new(type: string, eventInitDict?: CommandEventInit): CommandEvent;\n}\n\ninterface Comment extends CharacterData {\n    text: string;\n}\n\ndeclare var Comment: {\n    prototype: Comment;\n    new(): Comment;\n}\n\ninterface CompositionEvent extends UIEvent {\n    data: string;\n    locale: string;\n    initCompositionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, locale: string): void;\n}\n\ndeclare var CompositionEvent: {\n    prototype: CompositionEvent;\n    new(typeArg: string, eventInitDict?: CompositionEventInit): CompositionEvent;\n}\n\ninterface Console {\n    assert(test?: boolean, message?: string, ...optionalParams: any[]): void;\n    clear(): void;\n    count(countTitle?: string): void;\n    debug(message?: string, ...optionalParams: any[]): void;\n    dir(value?: any, ...optionalParams: any[]): void;\n    dirxml(value: any): void;\n    error(message?: any, ...optionalParams: any[]): void;\n    group(groupTitle?: string): void;\n    groupCollapsed(groupTitle?: string): void;\n    groupEnd(): void;\n    info(message?: any, ...optionalParams: any[]): void;\n    log(message?: any, ...optionalParams: any[]): void;\n    msIsIndependentlyComposed(element: Element): boolean;\n    profile(reportName?: string): void;\n    profileEnd(): void;\n    select(element: Element): void;\n    time(timerName?: string): void;\n    timeEnd(timerName?: string): void;\n    trace(message?: any, ...optionalParams: any[]): void;\n    warn(message?: any, ...optionalParams: any[]): void;\n}\n\ndeclare var Console: {\n    prototype: Console;\n    new(): Console;\n}\n\ninterface ConvolverNode extends AudioNode {\n    buffer: AudioBuffer;\n    normalize: boolean;\n}\n\ndeclare var ConvolverNode: {\n    prototype: ConvolverNode;\n    new(): ConvolverNode;\n}\n\ninterface Coordinates {\n    accuracy: number;\n    altitude: number;\n    altitudeAccuracy: number;\n    heading: number;\n    latitude: number;\n    longitude: number;\n    speed: number;\n}\n\ndeclare var Coordinates: {\n    prototype: Coordinates;\n    new(): Coordinates;\n}\n\ninterface Crypto extends Object, RandomSource {\n    subtle: SubtleCrypto;\n}\n\ndeclare var Crypto: {\n    prototype: Crypto;\n    new(): Crypto;\n}\n\ninterface CryptoKey {\n    algorithm: KeyAlgorithm;\n    extractable: boolean;\n    type: string;\n    usages: string[];\n}\n\ndeclare var CryptoKey: {\n    prototype: CryptoKey;\n    new(): CryptoKey;\n}\n\ninterface CryptoKeyPair {\n    privateKey: CryptoKey;\n    publicKey: CryptoKey;\n}\n\ndeclare var CryptoKeyPair: {\n    prototype: CryptoKeyPair;\n    new(): CryptoKeyPair;\n}\n\ninterface CustomEvent extends Event {\n    detail: any;\n    initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: any): void;\n}\n\ndeclare var CustomEvent: {\n    prototype: CustomEvent;\n    new(typeArg: string, eventInitDict?: CustomEventInit): CustomEvent;\n}\n\ninterface DOMError {\n    name: string;\n    toString(): string;\n}\n\ndeclare var DOMError: {\n    prototype: DOMError;\n    new(): DOMError;\n}\n\ninterface DOMException {\n    code: number;\n    message: string;\n    name: string;\n    toString(): string;\n    ABORT_ERR: number;\n    DATA_CLONE_ERR: number;\n    DOMSTRING_SIZE_ERR: number;\n    HIERARCHY_REQUEST_ERR: number;\n    INDEX_SIZE_ERR: number;\n    INUSE_ATTRIBUTE_ERR: number;\n    INVALID_ACCESS_ERR: number;\n    INVALID_CHARACTER_ERR: number;\n    INVALID_MODIFICATION_ERR: number;\n    INVALID_NODE_TYPE_ERR: number;\n    INVALID_STATE_ERR: number;\n    NAMESPACE_ERR: number;\n    NETWORK_ERR: number;\n    NOT_FOUND_ERR: number;\n    NOT_SUPPORTED_ERR: number;\n    NO_DATA_ALLOWED_ERR: number;\n    NO_MODIFICATION_ALLOWED_ERR: number;\n    PARSE_ERR: number;\n    QUOTA_EXCEEDED_ERR: number;\n    SECURITY_ERR: number;\n    SERIALIZE_ERR: number;\n    SYNTAX_ERR: number;\n    TIMEOUT_ERR: number;\n    TYPE_MISMATCH_ERR: number;\n    URL_MISMATCH_ERR: number;\n    VALIDATION_ERR: number;\n    WRONG_DOCUMENT_ERR: number;\n}\n\ndeclare var DOMException: {\n    prototype: DOMException;\n    new(): DOMException;\n    ABORT_ERR: number;\n    DATA_CLONE_ERR: number;\n    DOMSTRING_SIZE_ERR: number;\n    HIERARCHY_REQUEST_ERR: number;\n    INDEX_SIZE_ERR: number;\n    INUSE_ATTRIBUTE_ERR: number;\n    INVALID_ACCESS_ERR: number;\n    INVALID_CHARACTER_ERR: number;\n    INVALID_MODIFICATION_ERR: number;\n    INVALID_NODE_TYPE_ERR: number;\n    INVALID_STATE_ERR: number;\n    NAMESPACE_ERR: number;\n    NETWORK_ERR: number;\n    NOT_FOUND_ERR: number;\n    NOT_SUPPORTED_ERR: number;\n    NO_DATA_ALLOWED_ERR: number;\n    NO_MODIFICATION_ALLOWED_ERR: number;\n    PARSE_ERR: number;\n    QUOTA_EXCEEDED_ERR: number;\n    SECURITY_ERR: number;\n    SERIALIZE_ERR: number;\n    SYNTAX_ERR: number;\n    TIMEOUT_ERR: number;\n    TYPE_MISMATCH_ERR: number;\n    URL_MISMATCH_ERR: number;\n    VALIDATION_ERR: number;\n    WRONG_DOCUMENT_ERR: number;\n}\n\ninterface DOMImplementation {\n    createDocument(namespaceURI: string, qualifiedName: string, doctype: DocumentType): Document;\n    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType;\n    createHTMLDocument(title: string): Document;\n    hasFeature(feature: string, version: string): boolean;\n}\n\ndeclare var DOMImplementation: {\n    prototype: DOMImplementation;\n    new(): DOMImplementation;\n}\n\ninterface DOMParser {\n    parseFromString(source: string, mimeType: string): Document;\n}\n\ndeclare var DOMParser: {\n    prototype: DOMParser;\n    new(): DOMParser;\n}\n\ninterface DOMSettableTokenList extends DOMTokenList {\n    value: string;\n}\n\ndeclare var DOMSettableTokenList: {\n    prototype: DOMSettableTokenList;\n    new(): DOMSettableTokenList;\n}\n\ninterface DOMStringList {\n    length: number;\n    contains(str: string): boolean;\n    item(index: number): string;\n    [index: number]: string;\n}\n\ndeclare var DOMStringList: {\n    prototype: DOMStringList;\n    new(): DOMStringList;\n}\n\ninterface DOMStringMap {\n    [name: string]: string;\n}\n\ndeclare var DOMStringMap: {\n    prototype: DOMStringMap;\n    new(): DOMStringMap;\n}\n\ninterface DOMTokenList {\n    length: number;\n    add(...token: string[]): void;\n    contains(token: string): boolean;\n    item(index: number): string;\n    remove(...token: string[]): void;\n    toString(): string;\n    toggle(token: string, force?: boolean): boolean;\n    [index: number]: string;\n}\n\ndeclare var DOMTokenList: {\n    prototype: DOMTokenList;\n    new(): DOMTokenList;\n}\n\ninterface DataCue extends TextTrackCue {\n    data: ArrayBuffer;\n}\n\ndeclare var DataCue: {\n    prototype: DataCue;\n    new(): DataCue;\n}\n\ninterface DataTransfer {\n    dropEffect: string;\n    effectAllowed: string;\n    files: FileList;\n    items: DataTransferItemList;\n    types: DOMStringList;\n    clearData(format?: string): boolean;\n    getData(format: string): string;\n    setData(format: string, data: string): boolean;\n}\n\ndeclare var DataTransfer: {\n    prototype: DataTransfer;\n    new(): DataTransfer;\n}\n\ninterface DataTransferItem {\n    kind: string;\n    type: string;\n    getAsFile(): File;\n    getAsString(_callback: FunctionStringCallback): void;\n}\n\ndeclare var DataTransferItem: {\n    prototype: DataTransferItem;\n    new(): DataTransferItem;\n}\n\ninterface DataTransferItemList {\n    length: number;\n    add(data: File): DataTransferItem;\n    clear(): void;\n    item(index: number): DataTransferItem;\n    remove(index: number): void;\n    [index: number]: DataTransferItem;\n}\n\ndeclare var DataTransferItemList: {\n    prototype: DataTransferItemList;\n    new(): DataTransferItemList;\n}\n\ninterface DeferredPermissionRequest {\n    id: number;\n    type: string;\n    uri: string;\n    allow(): void;\n    deny(): void;\n}\n\ndeclare var DeferredPermissionRequest: {\n    prototype: DeferredPermissionRequest;\n    new(): DeferredPermissionRequest;\n}\n\ninterface DelayNode extends AudioNode {\n    delayTime: AudioParam;\n}\n\ndeclare var DelayNode: {\n    prototype: DelayNode;\n    new(): DelayNode;\n}\n\ninterface DeviceAcceleration {\n    x: number;\n    y: number;\n    z: number;\n}\n\ndeclare var DeviceAcceleration: {\n    prototype: DeviceAcceleration;\n    new(): DeviceAcceleration;\n}\n\ninterface DeviceMotionEvent extends Event {\n    acceleration: DeviceAcceleration;\n    accelerationIncludingGravity: DeviceAcceleration;\n    interval: number;\n    rotationRate: DeviceRotationRate;\n    initDeviceMotionEvent(type: string, bubbles: boolean, cancelable: boolean, acceleration: DeviceAccelerationDict, accelerationIncludingGravity: DeviceAccelerationDict, rotationRate: DeviceRotationRateDict, interval: number): void;\n}\n\ndeclare var DeviceMotionEvent: {\n    prototype: DeviceMotionEvent;\n    new(): DeviceMotionEvent;\n}\n\ninterface DeviceOrientationEvent extends Event {\n    absolute: boolean;\n    alpha: number;\n    beta: number;\n    gamma: number;\n    initDeviceOrientationEvent(type: string, bubbles: boolean, cancelable: boolean, alpha: number, beta: number, gamma: number, absolute: boolean): void;\n}\n\ndeclare var DeviceOrientationEvent: {\n    prototype: DeviceOrientationEvent;\n    new(): DeviceOrientationEvent;\n}\n\ninterface DeviceRotationRate {\n    alpha: number;\n    beta: number;\n    gamma: number;\n}\n\ndeclare var DeviceRotationRate: {\n    prototype: DeviceRotationRate;\n    new(): DeviceRotationRate;\n}\n\ninterface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent {\n    /**\n      * Sets or gets the URL for the current document.\n      */\n    URL: string;\n    /**\n      * Gets the URL for the document, stripped of any character encoding.\n      */\n    URLUnencoded: string;\n    /**\n      * Gets the object that has the focus when the parent document has focus.\n      */\n    activeElement: Element;\n    /**\n      * Sets or gets the color of all active links in the document.\n      */\n    alinkColor: string;\n    /**\n      * Returns a reference to the collection of elements contained by the object.\n      */\n    all: HTMLCollection;\n    /**\n      * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.\n      */\n    anchors: HTMLCollection;\n    /**\n      * Retrieves a collection of all applet objects in the document.\n      */\n    applets: HTMLCollection;\n    /**\n      * Deprecated. Sets or retrieves a value that indicates the background color behind the object.\n      */\n    bgColor: string;\n    /**\n      * Specifies the beginning and end of the document body.\n      */\n    body: HTMLElement;\n    characterSet: string;\n    /**\n      * Gets or sets the character set used to encode the object.\n      */\n    charset: string;\n    /**\n      * Gets a value that indicates whether standards-compliant mode is switched on for the object.\n      */\n    compatMode: string;\n    cookie: string;\n    /**\n      * Gets the default character set from the current regional language settings.\n      */\n    defaultCharset: string;\n    defaultView: Window;\n    /**\n      * Sets or gets a value that indicates whether the document can be edited.\n      */\n    designMode: string;\n    /**\n      * Sets or retrieves a value that indicates the reading order of the object.\n      */\n    dir: string;\n    /**\n      * Gets an object representing the document type declaration associated with the current document.\n      */\n    doctype: DocumentType;\n    /**\n      * Gets a reference to the root node of the document.\n      */\n    documentElement: HTMLElement;\n    /**\n      * Sets or gets the security domain of the document.\n      */\n    domain: string;\n    /**\n      * Retrieves a collection of all embed objects in the document.\n      */\n    embeds: HTMLCollection;\n    /**\n      * Sets or gets the foreground (text) color of the document.\n      */\n    fgColor: string;\n    /**\n      * Retrieves a collection, in source order, of all form objects in the document.\n      */\n    forms: HTMLCollection;\n    fullscreenElement: Element;\n    fullscreenEnabled: boolean;\n    head: HTMLHeadElement;\n    hidden: boolean;\n    /**\n      * Retrieves a collection, in source order, of img objects in the document.\n      */\n    images: HTMLCollection;\n    /**\n      * Gets the implementation object of the current document.\n      */\n    implementation: DOMImplementation;\n    /**\n      * Returns the character encoding used to create the webpage that is loaded into the document object.\n      */\n    inputEncoding: string;\n    /**\n      * Gets the date that the page was last modified, if the page supplies one.\n      */\n    lastModified: string;\n    /**\n      * Sets or gets the color of the document links.\n      */\n    linkColor: string;\n    /**\n      * Retrieves a collection of all a objects that specify the href property and all area objects in the document.\n      */\n    links: HTMLCollection;\n    /**\n      * Contains information about the current URL.\n      */\n    location: Location;\n    media: string;\n    msCSSOMElementFloatMetrics: boolean;\n    msCapsLockWarningOff: boolean;\n    msHidden: boolean;\n    msVisibilityState: string;\n    /**\n      * Fires when the user aborts the download.\n      * @param ev The event.\n      */\n    onabort: (ev: Event) => any;\n    /**\n      * Fires when the object is set as the active element.\n      * @param ev The event.\n      */\n    onactivate: (ev: UIEvent) => any;\n    /**\n      * Fires immediately before the object is set as the active element.\n      * @param ev The event.\n      */\n    onbeforeactivate: (ev: UIEvent) => any;\n    /**\n      * Fires immediately before the activeElement is changed from the current object to another object in the parent document.\n      * @param ev The event.\n      */\n    onbeforedeactivate: (ev: UIEvent) => any;\n    /**\n      * Fires when the object loses the input focus.\n      * @param ev The focus event.\n      */\n    onblur: (ev: FocusEvent) => any;\n    /**\n      * Occurs when playback is possible, but would require further buffering.\n      * @param ev The event.\n      */\n    oncanplay: (ev: Event) => any;\n    oncanplaythrough: (ev: Event) => any;\n    /**\n      * Fires when the contents of the object or selection have changed.\n      * @param ev The event.\n      */\n    onchange: (ev: Event) => any;\n    /**\n      * Fires when the user clicks the left mouse button on the object\n      * @param ev The mouse event.\n      */\n    onclick: (ev: MouseEvent) => any;\n    /**\n      * Fires when the user clicks the right mouse button in the client area, opening the context menu.\n      * @param ev The mouse event.\n      */\n    oncontextmenu: (ev: PointerEvent) => any;\n    /**\n      * Fires when the user double-clicks the object.\n      * @param ev The mouse event.\n      */\n    ondblclick: (ev: MouseEvent) => any;\n    /**\n      * Fires when the activeElement is changed from the current object to another object in the parent document.\n      * @param ev The UI Event\n      */\n    ondeactivate: (ev: UIEvent) => any;\n    /**\n      * Fires on the source object continuously during a drag operation.\n      * @param ev The event.\n      */\n    ondrag: (ev: DragEvent) => any;\n    /**\n      * Fires on the source object when the user releases the mouse at the close of a drag operation.\n      * @param ev The event.\n      */\n    ondragend: (ev: DragEvent) => any;\n    /**\n      * Fires on the target element when the user drags the object to a valid drop target.\n      * @param ev The drag event.\n      */\n    ondragenter: (ev: DragEvent) => any;\n    /**\n      * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\n      * @param ev The drag event.\n      */\n    ondragleave: (ev: DragEvent) => any;\n    /**\n      * Fires on the target element continuously while the user drags the object over a valid drop target.\n      * @param ev The event.\n      */\n    ondragover: (ev: DragEvent) => any;\n    /**\n      * Fires on the source object when the user starts to drag a text selection or selected object.\n      * @param ev The event.\n      */\n    ondragstart: (ev: DragEvent) => any;\n    ondrop: (ev: DragEvent) => any;\n    /**\n      * Occurs when the duration attribute is updated.\n      * @param ev The event.\n      */\n    ondurationchange: (ev: Event) => any;\n    /**\n      * Occurs when the media element is reset to its initial state.\n      * @param ev The event.\n      */\n    onemptied: (ev: Event) => any;\n    /**\n      * Occurs when the end of playback is reached.\n      * @param ev The event\n      */\n    onended: (ev: Event) => any;\n    /**\n      * Fires when an error occurs during object loading.\n      * @param ev The event.\n      */\n    onerror: (ev: Event) => any;\n    /**\n      * Fires when the object receives focus.\n      * @param ev The event.\n      */\n    onfocus: (ev: FocusEvent) => any;\n    onfullscreenchange: (ev: Event) => any;\n    onfullscreenerror: (ev: Event) => any;\n    oninput: (ev: Event) => any;\n    /**\n      * Fires when the user presses a key.\n      * @param ev The keyboard event\n      */\n    onkeydown: (ev: KeyboardEvent) => any;\n    /**\n      * Fires when the user presses an alphanumeric key.\n      * @param ev The event.\n      */\n    onkeypress: (ev: KeyboardEvent) => any;\n    /**\n      * Fires when the user releases a key.\n      * @param ev The keyboard event\n      */\n    onkeyup: (ev: KeyboardEvent) => any;\n    /**\n      * Fires immediately after the browser loads the object.\n      * @param ev The event.\n      */\n    onload: (ev: Event) => any;\n    /**\n      * Occurs when media data is loaded at the current playback position.\n      * @param ev The event.\n      */\n    onloadeddata: (ev: Event) => any;\n    /**\n      * Occurs when the duration and dimensions of the media have been determined.\n      * @param ev The event.\n      */\n    onloadedmetadata: (ev: Event) => any;\n    /**\n      * Occurs when Internet Explorer begins looking for media data.\n      * @param ev The event.\n      */\n    onloadstart: (ev: Event) => any;\n    /**\n      * Fires when the user clicks the object with either mouse button.\n      * @param ev The mouse event.\n      */\n    onmousedown: (ev: MouseEvent) => any;\n    /**\n      * Fires when the user moves the mouse over the object.\n      * @param ev The mouse event.\n      */\n    onmousemove: (ev: MouseEvent) => any;\n    /**\n      * Fires when the user moves the mouse pointer outside the boundaries of the object.\n      * @param ev The mouse event.\n      */\n    onmouseout: (ev: MouseEvent) => any;\n    /**\n      * Fires when the user moves the mouse pointer into the object.\n      * @param ev The mouse event.\n      */\n    onmouseover: (ev: MouseEvent) => any;\n    /**\n      * Fires when the user releases a mouse button while the mouse is over the object.\n      * @param ev The mouse event.\n      */\n    onmouseup: (ev: MouseEvent) => any;\n    /**\n      * Fires when the wheel button is rotated.\n      * @param ev The mouse event\n      */\n    onmousewheel: (ev: MouseWheelEvent) => any;\n    onmscontentzoom: (ev: UIEvent) => any;\n    onmsgesturechange: (ev: MSGestureEvent) => any;\n    onmsgesturedoubletap: (ev: MSGestureEvent) => any;\n    onmsgestureend: (ev: MSGestureEvent) => any;\n    onmsgesturehold: (ev: MSGestureEvent) => any;\n    onmsgesturestart: (ev: MSGestureEvent) => any;\n    onmsgesturetap: (ev: MSGestureEvent) => any;\n    onmsinertiastart: (ev: MSGestureEvent) => any;\n    onmsmanipulationstatechanged: (ev: MSManipulationEvent) => any;\n    onmspointercancel: (ev: MSPointerEvent) => any;\n    onmspointerdown: (ev: MSPointerEvent) => any;\n    onmspointerenter: (ev: MSPointerEvent) => any;\n    onmspointerleave: (ev: MSPointerEvent) => any;\n    onmspointermove: (ev: MSPointerEvent) => any;\n    onmspointerout: (ev: MSPointerEvent) => any;\n    onmspointerover: (ev: MSPointerEvent) => any;\n    onmspointerup: (ev: MSPointerEvent) => any;\n    /**\n      * Occurs when an item is removed from a Jump List of a webpage running in Site Mode.\n      * @param ev The event.\n      */\n    onmssitemodejumplistitemremoved: (ev: MSSiteModeEvent) => any;\n    /**\n      * Occurs when a user clicks a button in a Thumbnail Toolbar of a webpage running in Site Mode.\n      * @param ev The event.\n      */\n    onmsthumbnailclick: (ev: MSSiteModeEvent) => any;\n    /**\n      * Occurs when playback is paused.\n      * @param ev The event.\n      */\n    onpause: (ev: Event) => any;\n    /**\n      * Occurs when the play method is requested.\n      * @param ev The event.\n      */\n    onplay: (ev: Event) => any;\n    /**\n      * Occurs when the audio or video has started playing.\n      * @param ev The event.\n      */\n    onplaying: (ev: Event) => any;\n    onpointerlockchange: (ev: Event) => any;\n    onpointerlockerror: (ev: Event) => any;\n    /**\n      * Occurs to indicate progress while downloading media data.\n      * @param ev The event.\n      */\n    onprogress: (ev: ProgressEvent) => any;\n    /**\n      * Occurs when the playback rate is increased or decreased.\n      * @param ev The event.\n      */\n    onratechange: (ev: Event) => any;\n    /**\n      * Fires when the state of the object has changed.\n      * @param ev The event\n      */\n    onreadystatechange: (ev: ProgressEvent) => any;\n    /**\n      * Fires when the user resets a form.\n      * @param ev The event.\n      */\n    onreset: (ev: Event) => any;\n    /**\n      * Fires when the user repositions the scroll box in the scroll bar on the object.\n      * @param ev The event.\n      */\n    onscroll: (ev: UIEvent) => any;\n    /**\n      * Occurs when the seek operation ends.\n      * @param ev The event.\n      */\n    onseeked: (ev: Event) => any;\n    /**\n      * Occurs when the current playback position is moved.\n      * @param ev The event.\n      */\n    onseeking: (ev: Event) => any;\n    /**\n      * Fires when the current selection changes.\n      * @param ev The event.\n      */\n    onselect: (ev: UIEvent) => any;\n    onselectstart: (ev: Event) => any;\n    /**\n      * Occurs when the download has stopped.\n      * @param ev The event.\n      */\n    onstalled: (ev: Event) => any;\n    /**\n      * Fires when the user clicks the Stop button or leaves the Web page.\n      * @param ev The event.\n      */\n    onstop: (ev: Event) => any;\n    onsubmit: (ev: Event) => any;\n    /**\n      * Occurs if the load operation has been intentionally halted.\n      * @param ev The event.\n      */\n    onsuspend: (ev: Event) => any;\n    /**\n      * Occurs to indicate the current playback position.\n      * @param ev The event.\n      */\n    ontimeupdate: (ev: Event) => any;\n    ontouchcancel: (ev: TouchEvent) => any;\n    ontouchend: (ev: TouchEvent) => any;\n    ontouchmove: (ev: TouchEvent) => any;\n    ontouchstart: (ev: TouchEvent) => any;\n    /**\n      * Occurs when the volume is changed, or playback is muted or unmuted.\n      * @param ev The event.\n      */\n    onvolumechange: (ev: Event) => any;\n    /**\n      * Occurs when playback stops because the next frame of a video resource is not available.\n      * @param ev The event.\n      */\n    onwaiting: (ev: Event) => any;\n    onwebkitfullscreenchange: (ev: Event) => any;\n    onwebkitfullscreenerror: (ev: Event) => any;\n    plugins: HTMLCollection;\n    pointerLockElement: Element;\n    /**\n      * Retrieves a value that indicates the current state of the object.\n      */\n    readyState: string;\n    /**\n      * Gets the URL of the location that referred the user to the current page.\n      */\n    referrer: string;\n    /**\n      * Gets the root svg element in the document hierarchy.\n      */\n    rootElement: SVGSVGElement;\n    /**\n      * Retrieves a collection of all script objects in the document.\n      */\n    scripts: HTMLCollection;\n    security: string;\n    /**\n      * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.\n      */\n    styleSheets: StyleSheetList;\n    /**\n      * Contains the title of the document.\n      */\n    title: string;\n    visibilityState: string;\n    /**\n      * Sets or gets the color of the links that the user has visited.\n      */\n    vlinkColor: string;\n    webkitCurrentFullScreenElement: Element;\n    webkitFullscreenElement: Element;\n    webkitFullscreenEnabled: boolean;\n    webkitIsFullScreen: boolean;\n    xmlEncoding: string;\n    xmlStandalone: boolean;\n    /**\n      * Gets or sets the version attribute specified in the declaration of an XML document.\n      */\n    xmlVersion: string;\n    currentScript: HTMLScriptElement;\n    adoptNode(source: Node): Node;\n    captureEvents(): void;\n    clear(): void;\n    /**\n      * Closes an output stream and forces the sent data to display.\n      */\n    close(): void;\n    /**\n      * Creates an attribute object with a specified name.\n      * @param name String that sets the attribute object's name.\n      */\n    createAttribute(name: string): Attr;\n    createAttributeNS(namespaceURI: string, qualifiedName: string): Attr;\n    createCDATASection(data: string): CDATASection;\n    /**\n      * Creates a comment object with the specified data.\n      * @param data Sets the comment object's data.\n      */\n    createComment(data: string): Comment;\n    /**\n      * Creates a new document.\n      */\n    createDocumentFragment(): DocumentFragment;\n    /**\n      * Creates an instance of the element for the specified tag.\n      * @param tagName The name of an element.\n      */\n    createElement(tagName: \"a\"): HTMLAnchorElement;\n    createElement(tagName: \"abbr\"): HTMLPhraseElement;\n    createElement(tagName: \"acronym\"): HTMLPhraseElement;\n    createElement(tagName: \"address\"): HTMLBlockElement;\n    createElement(tagName: \"applet\"): HTMLAppletElement;\n    createElement(tagName: \"area\"): HTMLAreaElement;\n    createElement(tagName: \"audio\"): HTMLAudioElement;\n    createElement(tagName: \"b\"): HTMLPhraseElement;\n    createElement(tagName: \"base\"): HTMLBaseElement;\n    createElement(tagName: \"basefont\"): HTMLBaseFontElement;\n    createElement(tagName: \"bdo\"): HTMLPhraseElement;\n    createElement(tagName: \"big\"): HTMLPhraseElement;\n    createElement(tagName: \"blockquote\"): HTMLBlockElement;\n    createElement(tagName: \"body\"): HTMLBodyElement;\n    createElement(tagName: \"br\"): HTMLBRElement;\n    createElement(tagName: \"button\"): HTMLButtonElement;\n    createElement(tagName: \"canvas\"): HTMLCanvasElement;\n    createElement(tagName: \"caption\"): HTMLTableCaptionElement;\n    createElement(tagName: \"center\"): HTMLBlockElement;\n    createElement(tagName: \"cite\"): HTMLPhraseElement;\n    createElement(tagName: \"code\"): HTMLPhraseElement;\n    createElement(tagName: \"col\"): HTMLTableColElement;\n    createElement(tagName: \"colgroup\"): HTMLTableColElement;\n    createElement(tagName: \"datalist\"): HTMLDataListElement;\n    createElement(tagName: \"dd\"): HTMLDDElement;\n    createElement(tagName: \"del\"): HTMLModElement;\n    createElement(tagName: \"dfn\"): HTMLPhraseElement;\n    createElement(tagName: \"dir\"): HTMLDirectoryElement;\n    createElement(tagName: \"div\"): HTMLDivElement;\n    createElement(tagName: \"dl\"): HTMLDListElement;\n    createElement(tagName: \"dt\"): HTMLDTElement;\n    createElement(tagName: \"em\"): HTMLPhraseElement;\n    createElement(tagName: \"embed\"): HTMLEmbedElement;\n    createElement(tagName: \"fieldset\"): HTMLFieldSetElement;\n    createElement(tagName: \"font\"): HTMLFontElement;\n    createElement(tagName: \"form\"): HTMLFormElement;\n    createElement(tagName: \"frame\"): HTMLFrameElement;\n    createElement(tagName: \"frameset\"): HTMLFrameSetElement;\n    createElement(tagName: \"h1\"): HTMLHeadingElement;\n    createElement(tagName: \"h2\"): HTMLHeadingElement;\n    createElement(tagName: \"h3\"): HTMLHeadingElement;\n    createElement(tagName: \"h4\"): HTMLHeadingElement;\n    createElement(tagName: \"h5\"): HTMLHeadingElement;\n    createElement(tagName: \"h6\"): HTMLHeadingElement;\n    createElement(tagName: \"head\"): HTMLHeadElement;\n    createElement(tagName: \"hr\"): HTMLHRElement;\n    createElement(tagName: \"html\"): HTMLHtmlElement;\n    createElement(tagName: \"i\"): HTMLPhraseElement;\n    createElement(tagName: \"iframe\"): HTMLIFrameElement;\n    createElement(tagName: \"img\"): HTMLImageElement;\n    createElement(tagName: \"input\"): HTMLInputElement;\n    createElement(tagName: \"ins\"): HTMLModElement;\n    createElement(tagName: \"isindex\"): HTMLIsIndexElement;\n    createElement(tagName: \"kbd\"): HTMLPhraseElement;\n    createElement(tagName: \"keygen\"): HTMLBlockElement;\n    createElement(tagName: \"label\"): HTMLLabelElement;\n    createElement(tagName: \"legend\"): HTMLLegendElement;\n    createElement(tagName: \"li\"): HTMLLIElement;\n    createElement(tagName: \"link\"): HTMLLinkElement;\n    createElement(tagName: \"listing\"): HTMLBlockElement;\n    createElement(tagName: \"map\"): HTMLMapElement;\n    createElement(tagName: \"marquee\"): HTMLMarqueeElement;\n    createElement(tagName: \"menu\"): HTMLMenuElement;\n    createElement(tagName: \"meta\"): HTMLMetaElement;\n    createElement(tagName: \"nextid\"): HTMLNextIdElement;\n    createElement(tagName: \"nobr\"): HTMLPhraseElement;\n    createElement(tagName: \"object\"): HTMLObjectElement;\n    createElement(tagName: \"ol\"): HTMLOListElement;\n    createElement(tagName: \"optgroup\"): HTMLOptGroupElement;\n    createElement(tagName: \"option\"): HTMLOptionElement;\n    createElement(tagName: \"p\"): HTMLParagraphElement;\n    createElement(tagName: \"param\"): HTMLParamElement;\n    createElement(tagName: \"plaintext\"): HTMLBlockElement;\n    createElement(tagName: \"pre\"): HTMLPreElement;\n    createElement(tagName: \"progress\"): HTMLProgressElement;\n    createElement(tagName: \"q\"): HTMLQuoteElement;\n    createElement(tagName: \"rt\"): HTMLPhraseElement;\n    createElement(tagName: \"ruby\"): HTMLPhraseElement;\n    createElement(tagName: \"s\"): HTMLPhraseElement;\n    createElement(tagName: \"samp\"): HTMLPhraseElement;\n    createElement(tagName: \"script\"): HTMLScriptElement;\n    createElement(tagName: \"select\"): HTMLSelectElement;\n    createElement(tagName: \"small\"): HTMLPhraseElement;\n    createElement(tagName: \"source\"): HTMLSourceElement;\n    createElement(tagName: \"span\"): HTMLSpanElement;\n    createElement(tagName: \"strike\"): HTMLPhraseElement;\n    createElement(tagName: \"strong\"): HTMLPhraseElement;\n    createElement(tagName: \"style\"): HTMLStyleElement;\n    createElement(tagName: \"sub\"): HTMLPhraseElement;\n    createElement(tagName: \"sup\"): HTMLPhraseElement;\n    createElement(tagName: \"table\"): HTMLTableElement;\n    createElement(tagName: \"tbody\"): HTMLTableSectionElement;\n    createElement(tagName: \"td\"): HTMLTableDataCellElement;\n    createElement(tagName: \"textarea\"): HTMLTextAreaElement;\n    createElement(tagName: \"tfoot\"): HTMLTableSectionElement;\n    createElement(tagName: \"th\"): HTMLTableHeaderCellElement;\n    createElement(tagName: \"thead\"): HTMLTableSectionElement;\n    createElement(tagName: \"title\"): HTMLTitleElement;\n    createElement(tagName: \"tr\"): HTMLTableRowElement;\n    createElement(tagName: \"track\"): HTMLTrackElement;\n    createElement(tagName: \"tt\"): HTMLPhraseElement;\n    createElement(tagName: \"u\"): HTMLPhraseElement;\n    createElement(tagName: \"ul\"): HTMLUListElement;\n    createElement(tagName: \"var\"): HTMLPhraseElement;\n    createElement(tagName: \"video\"): HTMLVideoElement;\n    createElement(tagName: \"x-ms-webview\"): MSHTMLWebViewElement;\n    createElement(tagName: \"xmp\"): HTMLBlockElement;\n    createElement(tagName: string): HTMLElement;\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"a\"): SVGAElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"circle\"): SVGCircleElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"clipPath\"): SVGClipPathElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"componentTransferFunction\"): SVGComponentTransferFunctionElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"defs\"): SVGDefsElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"desc\"): SVGDescElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"ellipse\"): SVGEllipseElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feBlend\"): SVGFEBlendElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feColorMatrix\"): SVGFEColorMatrixElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feComponentTransfer\"): SVGFEComponentTransferElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feComposite\"): SVGFECompositeElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feConvolveMatrix\"): SVGFEConvolveMatrixElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feDiffuseLighting\"): SVGFEDiffuseLightingElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feDisplacementMap\"): SVGFEDisplacementMapElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feDistantLight\"): SVGFEDistantLightElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFlood\"): SVGFEFloodElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncA\"): SVGFEFuncAElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncB\"): SVGFEFuncBElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncG\"): SVGFEFuncGElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncR\"): SVGFEFuncRElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feGaussianBlur\"): SVGFEGaussianBlurElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feImage\"): SVGFEImageElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feMerge\"): SVGFEMergeElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feMergeNode\"): SVGFEMergeNodeElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feMorphology\"): SVGFEMorphologyElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feOffset\"): SVGFEOffsetElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"fePointLight\"): SVGFEPointLightElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feSpecularLighting\"): SVGFESpecularLightingElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feSpotLight\"): SVGFESpotLightElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feTile\"): SVGFETileElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feTurbulence\"): SVGFETurbulenceElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"filter\"): SVGFilterElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"foreignObject\"): SVGForeignObjectElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"g\"): SVGGElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"image\"): SVGImageElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"gradient\"): SVGGradientElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"line\"): SVGLineElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"linearGradient\"): SVGLinearGradientElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"marker\"): SVGMarkerElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"mask\"): SVGMaskElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"path\"): SVGPathElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"metadata\"): SVGMetadataElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"pattern\"): SVGPatternElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"polygon\"): SVGPolygonElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"polyline\"): SVGPolylineElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"radialGradient\"): SVGRadialGradientElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"rect\"): SVGRectElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"svg\"): SVGSVGElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"script\"): SVGScriptElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"stop\"): SVGStopElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"style\"): SVGStyleElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"switch\"): SVGSwitchElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"symbol\"): SVGSymbolElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"tspan\"): SVGTSpanElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"textContent\"): SVGTextContentElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"text\"): SVGTextElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"textPath\"): SVGTextPathElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"textPositioning\"): SVGTextPositioningElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"title\"): SVGTitleElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"use\"): SVGUseElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"view\"): SVGViewElement\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: string): SVGElement\n    createElementNS(namespaceURI: string, qualifiedName: string): Element;\n    createExpression(expression: string, resolver: XPathNSResolver): XPathExpression;\n    createNSResolver(nodeResolver: Node): XPathNSResolver;\n    /**\n      * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n      * @param root The root element or node to start traversing on.\n      * @param whatToShow The type of nodes or elements to appear in the node list\n      * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\n      */\n    createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): NodeIterator;\n    createProcessingInstruction(target: string, data: string): ProcessingInstruction;\n    /**\n      *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document.\n      */\n    createRange(): Range;\n    /**\n      * Creates a text string from the specified value.\n      * @param data String that specifies the nodeValue property of the text node.\n      */\n    createTextNode(data: string): Text;\n    createTouch(view: any, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch;\n    createTouchList(...touches: Touch[]): TouchList;\n    /**\n      * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.\n      * @param root The root element or node to start traversing on.\n      * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.\n      * @param filter A custom NodeFilter function to use.\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\n      */\n    createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): TreeWalker;\n    /**\n      * Returns the element for the specified x coordinate and the specified y coordinate.\n      * @param x The x-offset\n      * @param y The y-offset\n      */\n    elementFromPoint(x: number, y: number): Element;\n    evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult;\n    /**\n      * Executes a command on the current document, current selection, or the given range.\n      * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.\n      * @param showUI Display the user interface, defaults to false.\n      * @param value Value to assign.\n      */\n    execCommand(commandId: string, showUI?: boolean, value?: any): boolean;\n    /**\n      * Displays help information for the given command identifier.\n      * @param commandId Displays help information for the given command identifier.\n      */\n    execCommandShowHelp(commandId: string): boolean;\n    exitFullscreen(): void;\n    exitPointerLock(): void;\n    /**\n      * Causes the element to receive the focus and executes the code specified by the onfocus event.\n      */\n    focus(): void;\n    /**\n      * Returns a reference to the first object with the specified value of the ID or NAME attribute.\n      * @param elementId String that specifies the ID value. Case-insensitive.\n      */\n    getElementById(elementId: string): HTMLElement;\n    getElementsByClassName(classNames: string): NodeListOf<Element>;\n    /**\n      * Gets a collection of objects based on the value of the NAME or ID attribute.\n      * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.\n      */\n    getElementsByName(elementName: string): NodeListOf<Element>;\n    /**\n      * Retrieves a collection of objects based on the specified element name.\n      * @param name Specifies the name of an element.\n      */\n    getElementsByTagName(tagname: \"a\"): NodeListOf<HTMLAnchorElement>;\n    getElementsByTagName(tagname: \"abbr\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"acronym\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"address\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(tagname: \"applet\"): NodeListOf<HTMLAppletElement>;\n    getElementsByTagName(tagname: \"area\"): NodeListOf<HTMLAreaElement>;\n    getElementsByTagName(tagname: \"article\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"aside\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"audio\"): NodeListOf<HTMLAudioElement>;\n    getElementsByTagName(tagname: \"b\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"base\"): NodeListOf<HTMLBaseElement>;\n    getElementsByTagName(tagname: \"basefont\"): NodeListOf<HTMLBaseFontElement>;\n    getElementsByTagName(tagname: \"bdo\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"big\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"blockquote\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(tagname: \"body\"): NodeListOf<HTMLBodyElement>;\n    getElementsByTagName(tagname: \"br\"): NodeListOf<HTMLBRElement>;\n    getElementsByTagName(tagname: \"button\"): NodeListOf<HTMLButtonElement>;\n    getElementsByTagName(tagname: \"canvas\"): NodeListOf<HTMLCanvasElement>;\n    getElementsByTagName(tagname: \"caption\"): NodeListOf<HTMLTableCaptionElement>;\n    getElementsByTagName(tagname: \"center\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(tagname: \"circle\"): NodeListOf<SVGCircleElement>;\n    getElementsByTagName(tagname: \"cite\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"clippath\"): NodeListOf<SVGClipPathElement>;\n    getElementsByTagName(tagname: \"code\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"col\"): NodeListOf<HTMLTableColElement>;\n    getElementsByTagName(tagname: \"colgroup\"): NodeListOf<HTMLTableColElement>;\n    getElementsByTagName(tagname: \"datalist\"): NodeListOf<HTMLDataListElement>;\n    getElementsByTagName(tagname: \"dd\"): NodeListOf<HTMLDDElement>;\n    getElementsByTagName(tagname: \"defs\"): NodeListOf<SVGDefsElement>;\n    getElementsByTagName(tagname: \"del\"): NodeListOf<HTMLModElement>;\n    getElementsByTagName(tagname: \"desc\"): NodeListOf<SVGDescElement>;\n    getElementsByTagName(tagname: \"dfn\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"dir\"): NodeListOf<HTMLDirectoryElement>;\n    getElementsByTagName(tagname: \"div\"): NodeListOf<HTMLDivElement>;\n    getElementsByTagName(tagname: \"dl\"): NodeListOf<HTMLDListElement>;\n    getElementsByTagName(tagname: \"dt\"): NodeListOf<HTMLDTElement>;\n    getElementsByTagName(tagname: \"ellipse\"): NodeListOf<SVGEllipseElement>;\n    getElementsByTagName(tagname: \"em\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"embed\"): NodeListOf<HTMLEmbedElement>;\n    getElementsByTagName(tagname: \"feblend\"): NodeListOf<SVGFEBlendElement>;\n    getElementsByTagName(tagname: \"fecolormatrix\"): NodeListOf<SVGFEColorMatrixElement>;\n    getElementsByTagName(tagname: \"fecomponenttransfer\"): NodeListOf<SVGFEComponentTransferElement>;\n    getElementsByTagName(tagname: \"fecomposite\"): NodeListOf<SVGFECompositeElement>;\n    getElementsByTagName(tagname: \"feconvolvematrix\"): NodeListOf<SVGFEConvolveMatrixElement>;\n    getElementsByTagName(tagname: \"fediffuselighting\"): NodeListOf<SVGFEDiffuseLightingElement>;\n    getElementsByTagName(tagname: \"fedisplacementmap\"): NodeListOf<SVGFEDisplacementMapElement>;\n    getElementsByTagName(tagname: \"fedistantlight\"): NodeListOf<SVGFEDistantLightElement>;\n    getElementsByTagName(tagname: \"feflood\"): NodeListOf<SVGFEFloodElement>;\n    getElementsByTagName(tagname: \"fefunca\"): NodeListOf<SVGFEFuncAElement>;\n    getElementsByTagName(tagname: \"fefuncb\"): NodeListOf<SVGFEFuncBElement>;\n    getElementsByTagName(tagname: \"fefuncg\"): NodeListOf<SVGFEFuncGElement>;\n    getElementsByTagName(tagname: \"fefuncr\"): NodeListOf<SVGFEFuncRElement>;\n    getElementsByTagName(tagname: \"fegaussianblur\"): NodeListOf<SVGFEGaussianBlurElement>;\n    getElementsByTagName(tagname: \"feimage\"): NodeListOf<SVGFEImageElement>;\n    getElementsByTagName(tagname: \"femerge\"): NodeListOf<SVGFEMergeElement>;\n    getElementsByTagName(tagname: \"femergenode\"): NodeListOf<SVGFEMergeNodeElement>;\n    getElementsByTagName(tagname: \"femorphology\"): NodeListOf<SVGFEMorphologyElement>;\n    getElementsByTagName(tagname: \"feoffset\"): NodeListOf<SVGFEOffsetElement>;\n    getElementsByTagName(tagname: \"fepointlight\"): NodeListOf<SVGFEPointLightElement>;\n    getElementsByTagName(tagname: \"fespecularlighting\"): NodeListOf<SVGFESpecularLightingElement>;\n    getElementsByTagName(tagname: \"fespotlight\"): NodeListOf<SVGFESpotLightElement>;\n    getElementsByTagName(tagname: \"fetile\"): NodeListOf<SVGFETileElement>;\n    getElementsByTagName(tagname: \"feturbulence\"): NodeListOf<SVGFETurbulenceElement>;\n    getElementsByTagName(tagname: \"fieldset\"): NodeListOf<HTMLFieldSetElement>;\n    getElementsByTagName(tagname: \"figcaption\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"figure\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"filter\"): NodeListOf<SVGFilterElement>;\n    getElementsByTagName(tagname: \"font\"): NodeListOf<HTMLFontElement>;\n    getElementsByTagName(tagname: \"footer\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"foreignobject\"): NodeListOf<SVGForeignObjectElement>;\n    getElementsByTagName(tagname: \"form\"): NodeListOf<HTMLFormElement>;\n    getElementsByTagName(tagname: \"frame\"): NodeListOf<HTMLFrameElement>;\n    getElementsByTagName(tagname: \"frameset\"): NodeListOf<HTMLFrameSetElement>;\n    getElementsByTagName(tagname: \"g\"): NodeListOf<SVGGElement>;\n    getElementsByTagName(tagname: \"h1\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(tagname: \"h2\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(tagname: \"h3\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(tagname: \"h4\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(tagname: \"h5\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(tagname: \"h6\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(tagname: \"head\"): NodeListOf<HTMLHeadElement>;\n    getElementsByTagName(tagname: \"header\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"hgroup\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"hr\"): NodeListOf<HTMLHRElement>;\n    getElementsByTagName(tagname: \"html\"): NodeListOf<HTMLHtmlElement>;\n    getElementsByTagName(tagname: \"i\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"iframe\"): NodeListOf<HTMLIFrameElement>;\n    getElementsByTagName(tagname: \"image\"): NodeListOf<SVGImageElement>;\n    getElementsByTagName(tagname: \"img\"): NodeListOf<HTMLImageElement>;\n    getElementsByTagName(tagname: \"input\"): NodeListOf<HTMLInputElement>;\n    getElementsByTagName(tagname: \"ins\"): NodeListOf<HTMLModElement>;\n    getElementsByTagName(tagname: \"isindex\"): NodeListOf<HTMLIsIndexElement>;\n    getElementsByTagName(tagname: \"kbd\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"keygen\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(tagname: \"label\"): NodeListOf<HTMLLabelElement>;\n    getElementsByTagName(tagname: \"legend\"): NodeListOf<HTMLLegendElement>;\n    getElementsByTagName(tagname: \"li\"): NodeListOf<HTMLLIElement>;\n    getElementsByTagName(tagname: \"line\"): NodeListOf<SVGLineElement>;\n    getElementsByTagName(tagname: \"lineargradient\"): NodeListOf<SVGLinearGradientElement>;\n    getElementsByTagName(tagname: \"link\"): NodeListOf<HTMLLinkElement>;\n    getElementsByTagName(tagname: \"listing\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(tagname: \"map\"): NodeListOf<HTMLMapElement>;\n    getElementsByTagName(tagname: \"mark\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"marker\"): NodeListOf<SVGMarkerElement>;\n    getElementsByTagName(tagname: \"marquee\"): NodeListOf<HTMLMarqueeElement>;\n    getElementsByTagName(tagname: \"mask\"): NodeListOf<SVGMaskElement>;\n    getElementsByTagName(tagname: \"menu\"): NodeListOf<HTMLMenuElement>;\n    getElementsByTagName(tagname: \"meta\"): NodeListOf<HTMLMetaElement>;\n    getElementsByTagName(tagname: \"metadata\"): NodeListOf<SVGMetadataElement>;\n    getElementsByTagName(tagname: \"nav\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"nextid\"): NodeListOf<HTMLNextIdElement>;\n    getElementsByTagName(tagname: \"nobr\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"noframes\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"noscript\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"object\"): NodeListOf<HTMLObjectElement>;\n    getElementsByTagName(tagname: \"ol\"): NodeListOf<HTMLOListElement>;\n    getElementsByTagName(tagname: \"optgroup\"): NodeListOf<HTMLOptGroupElement>;\n    getElementsByTagName(tagname: \"option\"): NodeListOf<HTMLOptionElement>;\n    getElementsByTagName(tagname: \"p\"): NodeListOf<HTMLParagraphElement>;\n    getElementsByTagName(tagname: \"param\"): NodeListOf<HTMLParamElement>;\n    getElementsByTagName(tagname: \"path\"): NodeListOf<SVGPathElement>;\n    getElementsByTagName(tagname: \"pattern\"): NodeListOf<SVGPatternElement>;\n    getElementsByTagName(tagname: \"plaintext\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(tagname: \"polygon\"): NodeListOf<SVGPolygonElement>;\n    getElementsByTagName(tagname: \"polyline\"): NodeListOf<SVGPolylineElement>;\n    getElementsByTagName(tagname: \"pre\"): NodeListOf<HTMLPreElement>;\n    getElementsByTagName(tagname: \"progress\"): NodeListOf<HTMLProgressElement>;\n    getElementsByTagName(tagname: \"q\"): NodeListOf<HTMLQuoteElement>;\n    getElementsByTagName(tagname: \"radialgradient\"): NodeListOf<SVGRadialGradientElement>;\n    getElementsByTagName(tagname: \"rect\"): NodeListOf<SVGRectElement>;\n    getElementsByTagName(tagname: \"rt\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"ruby\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"s\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"samp\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"script\"): NodeListOf<HTMLScriptElement>;\n    getElementsByTagName(tagname: \"section\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"select\"): NodeListOf<HTMLSelectElement>;\n    getElementsByTagName(tagname: \"small\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"source\"): NodeListOf<HTMLSourceElement>;\n    getElementsByTagName(tagname: \"span\"): NodeListOf<HTMLSpanElement>;\n    getElementsByTagName(tagname: \"stop\"): NodeListOf<SVGStopElement>;\n    getElementsByTagName(tagname: \"strike\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"strong\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"style\"): NodeListOf<HTMLStyleElement>;\n    getElementsByTagName(tagname: \"sub\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"sup\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"svg\"): NodeListOf<SVGSVGElement>;\n    getElementsByTagName(tagname: \"switch\"): NodeListOf<SVGSwitchElement>;\n    getElementsByTagName(tagname: \"symbol\"): NodeListOf<SVGSymbolElement>;\n    getElementsByTagName(tagname: \"table\"): NodeListOf<HTMLTableElement>;\n    getElementsByTagName(tagname: \"tbody\"): NodeListOf<HTMLTableSectionElement>;\n    getElementsByTagName(tagname: \"td\"): NodeListOf<HTMLTableDataCellElement>;\n    getElementsByTagName(tagname: \"text\"): NodeListOf<SVGTextElement>;\n    getElementsByTagName(tagname: \"textpath\"): NodeListOf<SVGTextPathElement>;\n    getElementsByTagName(tagname: \"textarea\"): NodeListOf<HTMLTextAreaElement>;\n    getElementsByTagName(tagname: \"tfoot\"): NodeListOf<HTMLTableSectionElement>;\n    getElementsByTagName(tagname: \"th\"): NodeListOf<HTMLTableHeaderCellElement>;\n    getElementsByTagName(tagname: \"thead\"): NodeListOf<HTMLTableSectionElement>;\n    getElementsByTagName(tagname: \"title\"): NodeListOf<HTMLTitleElement>;\n    getElementsByTagName(tagname: \"tr\"): NodeListOf<HTMLTableRowElement>;\n    getElementsByTagName(tagname: \"track\"): NodeListOf<HTMLTrackElement>;\n    getElementsByTagName(tagname: \"tspan\"): NodeListOf<SVGTSpanElement>;\n    getElementsByTagName(tagname: \"tt\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"u\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"ul\"): NodeListOf<HTMLUListElement>;\n    getElementsByTagName(tagname: \"use\"): NodeListOf<SVGUseElement>;\n    getElementsByTagName(tagname: \"var\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(tagname: \"video\"): NodeListOf<HTMLVideoElement>;\n    getElementsByTagName(tagname: \"view\"): NodeListOf<SVGViewElement>;\n    getElementsByTagName(tagname: \"wbr\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(tagname: \"x-ms-webview\"): NodeListOf<MSHTMLWebViewElement>;\n    getElementsByTagName(tagname: \"xmp\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(tagname: string): NodeListOf<Element>;\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeListOf<Element>;\n    /**\n      * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.\n      */\n    getSelection(): Selection;\n    /**\n      * Gets a value indicating whether the object currently has focus.\n      */\n    hasFocus(): boolean;\n    importNode(importedNode: Node, deep: boolean): Node;\n    msElementsFromPoint(x: number, y: number): NodeList;\n    msElementsFromRect(left: number, top: number, width: number, height: number): NodeList;\n    /**\n      * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.\n      * @param url Specifies a MIME type for the document.\n      * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.\n      * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, \"fullscreen=yes, toolbar=yes\"). The following values are supported.\n      * @param replace Specifies whether the existing entry for the document is replaced in the history list.\n      */\n    open(url?: string, name?: string, features?: string, replace?: boolean): Document;\n    /**\n      * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.\n      * @param commandId Specifies a command identifier.\n      */\n    queryCommandEnabled(commandId: string): boolean;\n    /**\n      * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.\n      * @param commandId String that specifies a command identifier.\n      */\n    queryCommandIndeterm(commandId: string): boolean;\n    /**\n      * Returns a Boolean value that indicates the current state of the command.\n      * @param commandId String that specifies a command identifier.\n      */\n    queryCommandState(commandId: string): boolean;\n    /**\n      * Returns a Boolean value that indicates whether the current command is supported on the current range.\n      * @param commandId Specifies a command identifier.\n      */\n    queryCommandSupported(commandId: string): boolean;\n    /**\n      * Retrieves the string associated with a command.\n      * @param commandId String that contains the identifier of a command. This can be any command identifier given in the list of Command Identifiers.\n      */\n    queryCommandText(commandId: string): string;\n    /**\n      * Returns the current value of the document, range, or current selection for the given command.\n      * @param commandId String that specifies a command identifier.\n      */\n    queryCommandValue(commandId: string): string;\n    releaseEvents(): void;\n    /**\n      * Allows updating the print settings for the page.\n      */\n    updateSettings(): void;\n    webkitCancelFullScreen(): void;\n    webkitExitFullscreen(): void;\n    /**\n      * Writes one or more HTML expressions to a document in the specified window.\n      * @param content Specifies the text and HTML tags to write.\n      */\n    write(...content: string[]): void;\n    /**\n      * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.\n      * @param content The text and HTML tags to write.\n      */\n    writeln(...content: string[]): void;\n    createElement(tagName: \"picture\"): HTMLPictureElement;\n    getElementsByTagName(tagname: \"picture\"): NodeListOf<HTMLPictureElement>;\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"fullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"fullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mssitemodejumplistitemremoved\", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"msthumbnailclick\", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerlockchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerlockerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stop\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Document: {\n    prototype: Document;\n    new(): Document;\n}\n\ninterface DocumentFragment extends Node, NodeSelector {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var DocumentFragment: {\n    prototype: DocumentFragment;\n    new(): DocumentFragment;\n}\n\ninterface DocumentType extends Node, ChildNode {\n    entities: NamedNodeMap;\n    internalSubset: string;\n    name: string;\n    notations: NamedNodeMap;\n    publicId: string;\n    systemId: string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var DocumentType: {\n    prototype: DocumentType;\n    new(): DocumentType;\n}\n\ninterface DragEvent extends MouseEvent {\n    dataTransfer: DataTransfer;\n    initDragEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void;\n    msConvertURL(file: File, targetType: string, targetURL?: string): void;\n}\n\ndeclare var DragEvent: {\n    prototype: DragEvent;\n    new(): DragEvent;\n}\n\ninterface DynamicsCompressorNode extends AudioNode {\n    attack: AudioParam;\n    knee: AudioParam;\n    ratio: AudioParam;\n    reduction: AudioParam;\n    release: AudioParam;\n    threshold: AudioParam;\n}\n\ndeclare var DynamicsCompressorNode: {\n    prototype: DynamicsCompressorNode;\n    new(): DynamicsCompressorNode;\n}\n\ninterface EXT_texture_filter_anisotropic {\n    MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;\n    TEXTURE_MAX_ANISOTROPY_EXT: number;\n}\n\ndeclare var EXT_texture_filter_anisotropic: {\n    prototype: EXT_texture_filter_anisotropic;\n    new(): EXT_texture_filter_anisotropic;\n    MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;\n    TEXTURE_MAX_ANISOTROPY_EXT: number;\n}\n\ninterface Element extends Node, GlobalEventHandlers, ElementTraversal, NodeSelector, ChildNode {\n    classList: DOMTokenList;\n    clientHeight: number;\n    clientLeft: number;\n    clientTop: number;\n    clientWidth: number;\n    msContentZoomFactor: number;\n    msRegionOverflow: string;\n    onariarequest: (ev: AriaRequestEvent) => any;\n    oncommand: (ev: CommandEvent) => any;\n    ongotpointercapture: (ev: PointerEvent) => any;\n    onlostpointercapture: (ev: PointerEvent) => any;\n    onmsgesturechange: (ev: MSGestureEvent) => any;\n    onmsgesturedoubletap: (ev: MSGestureEvent) => any;\n    onmsgestureend: (ev: MSGestureEvent) => any;\n    onmsgesturehold: (ev: MSGestureEvent) => any;\n    onmsgesturestart: (ev: MSGestureEvent) => any;\n    onmsgesturetap: (ev: MSGestureEvent) => any;\n    onmsgotpointercapture: (ev: MSPointerEvent) => any;\n    onmsinertiastart: (ev: MSGestureEvent) => any;\n    onmslostpointercapture: (ev: MSPointerEvent) => any;\n    onmspointercancel: (ev: MSPointerEvent) => any;\n    onmspointerdown: (ev: MSPointerEvent) => any;\n    onmspointerenter: (ev: MSPointerEvent) => any;\n    onmspointerleave: (ev: MSPointerEvent) => any;\n    onmspointermove: (ev: MSPointerEvent) => any;\n    onmspointerout: (ev: MSPointerEvent) => any;\n    onmspointerover: (ev: MSPointerEvent) => any;\n    onmspointerup: (ev: MSPointerEvent) => any;\n    ontouchcancel: (ev: TouchEvent) => any;\n    ontouchend: (ev: TouchEvent) => any;\n    ontouchmove: (ev: TouchEvent) => any;\n    ontouchstart: (ev: TouchEvent) => any;\n    onwebkitfullscreenchange: (ev: Event) => any;\n    onwebkitfullscreenerror: (ev: Event) => any;\n    scrollHeight: number;\n    scrollLeft: number;\n    scrollTop: number;\n    scrollWidth: number;\n    tagName: string;\n    id: string;\n    className: string;\n    innerHTML: string;\n    getAttribute(name?: string): string;\n    getAttributeNS(namespaceURI: string, localName: string): string;\n    getAttributeNode(name: string): Attr;\n    getAttributeNodeNS(namespaceURI: string, localName: string): Attr;\n    getBoundingClientRect(): ClientRect;\n    getClientRects(): ClientRectList;\n    getElementsByTagName(name: \"a\"): NodeListOf<HTMLAnchorElement>;\n    getElementsByTagName(name: \"abbr\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"acronym\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"address\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(name: \"applet\"): NodeListOf<HTMLAppletElement>;\n    getElementsByTagName(name: \"area\"): NodeListOf<HTMLAreaElement>;\n    getElementsByTagName(name: \"article\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"aside\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"audio\"): NodeListOf<HTMLAudioElement>;\n    getElementsByTagName(name: \"b\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"base\"): NodeListOf<HTMLBaseElement>;\n    getElementsByTagName(name: \"basefont\"): NodeListOf<HTMLBaseFontElement>;\n    getElementsByTagName(name: \"bdo\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"big\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"blockquote\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(name: \"body\"): NodeListOf<HTMLBodyElement>;\n    getElementsByTagName(name: \"br\"): NodeListOf<HTMLBRElement>;\n    getElementsByTagName(name: \"button\"): NodeListOf<HTMLButtonElement>;\n    getElementsByTagName(name: \"canvas\"): NodeListOf<HTMLCanvasElement>;\n    getElementsByTagName(name: \"caption\"): NodeListOf<HTMLTableCaptionElement>;\n    getElementsByTagName(name: \"center\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(name: \"circle\"): NodeListOf<SVGCircleElement>;\n    getElementsByTagName(name: \"cite\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"clippath\"): NodeListOf<SVGClipPathElement>;\n    getElementsByTagName(name: \"code\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"col\"): NodeListOf<HTMLTableColElement>;\n    getElementsByTagName(name: \"colgroup\"): NodeListOf<HTMLTableColElement>;\n    getElementsByTagName(name: \"datalist\"): NodeListOf<HTMLDataListElement>;\n    getElementsByTagName(name: \"dd\"): NodeListOf<HTMLDDElement>;\n    getElementsByTagName(name: \"defs\"): NodeListOf<SVGDefsElement>;\n    getElementsByTagName(name: \"del\"): NodeListOf<HTMLModElement>;\n    getElementsByTagName(name: \"desc\"): NodeListOf<SVGDescElement>;\n    getElementsByTagName(name: \"dfn\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"dir\"): NodeListOf<HTMLDirectoryElement>;\n    getElementsByTagName(name: \"div\"): NodeListOf<HTMLDivElement>;\n    getElementsByTagName(name: \"dl\"): NodeListOf<HTMLDListElement>;\n    getElementsByTagName(name: \"dt\"): NodeListOf<HTMLDTElement>;\n    getElementsByTagName(name: \"ellipse\"): NodeListOf<SVGEllipseElement>;\n    getElementsByTagName(name: \"em\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"embed\"): NodeListOf<HTMLEmbedElement>;\n    getElementsByTagName(name: \"feblend\"): NodeListOf<SVGFEBlendElement>;\n    getElementsByTagName(name: \"fecolormatrix\"): NodeListOf<SVGFEColorMatrixElement>;\n    getElementsByTagName(name: \"fecomponenttransfer\"): NodeListOf<SVGFEComponentTransferElement>;\n    getElementsByTagName(name: \"fecomposite\"): NodeListOf<SVGFECompositeElement>;\n    getElementsByTagName(name: \"feconvolvematrix\"): NodeListOf<SVGFEConvolveMatrixElement>;\n    getElementsByTagName(name: \"fediffuselighting\"): NodeListOf<SVGFEDiffuseLightingElement>;\n    getElementsByTagName(name: \"fedisplacementmap\"): NodeListOf<SVGFEDisplacementMapElement>;\n    getElementsByTagName(name: \"fedistantlight\"): NodeListOf<SVGFEDistantLightElement>;\n    getElementsByTagName(name: \"feflood\"): NodeListOf<SVGFEFloodElement>;\n    getElementsByTagName(name: \"fefunca\"): NodeListOf<SVGFEFuncAElement>;\n    getElementsByTagName(name: \"fefuncb\"): NodeListOf<SVGFEFuncBElement>;\n    getElementsByTagName(name: \"fefuncg\"): NodeListOf<SVGFEFuncGElement>;\n    getElementsByTagName(name: \"fefuncr\"): NodeListOf<SVGFEFuncRElement>;\n    getElementsByTagName(name: \"fegaussianblur\"): NodeListOf<SVGFEGaussianBlurElement>;\n    getElementsByTagName(name: \"feimage\"): NodeListOf<SVGFEImageElement>;\n    getElementsByTagName(name: \"femerge\"): NodeListOf<SVGFEMergeElement>;\n    getElementsByTagName(name: \"femergenode\"): NodeListOf<SVGFEMergeNodeElement>;\n    getElementsByTagName(name: \"femorphology\"): NodeListOf<SVGFEMorphologyElement>;\n    getElementsByTagName(name: \"feoffset\"): NodeListOf<SVGFEOffsetElement>;\n    getElementsByTagName(name: \"fepointlight\"): NodeListOf<SVGFEPointLightElement>;\n    getElementsByTagName(name: \"fespecularlighting\"): NodeListOf<SVGFESpecularLightingElement>;\n    getElementsByTagName(name: \"fespotlight\"): NodeListOf<SVGFESpotLightElement>;\n    getElementsByTagName(name: \"fetile\"): NodeListOf<SVGFETileElement>;\n    getElementsByTagName(name: \"feturbulence\"): NodeListOf<SVGFETurbulenceElement>;\n    getElementsByTagName(name: \"fieldset\"): NodeListOf<HTMLFieldSetElement>;\n    getElementsByTagName(name: \"figcaption\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"figure\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"filter\"): NodeListOf<SVGFilterElement>;\n    getElementsByTagName(name: \"font\"): NodeListOf<HTMLFontElement>;\n    getElementsByTagName(name: \"footer\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"foreignobject\"): NodeListOf<SVGForeignObjectElement>;\n    getElementsByTagName(name: \"form\"): NodeListOf<HTMLFormElement>;\n    getElementsByTagName(name: \"frame\"): NodeListOf<HTMLFrameElement>;\n    getElementsByTagName(name: \"frameset\"): NodeListOf<HTMLFrameSetElement>;\n    getElementsByTagName(name: \"g\"): NodeListOf<SVGGElement>;\n    getElementsByTagName(name: \"h1\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(name: \"h2\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(name: \"h3\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(name: \"h4\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(name: \"h5\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(name: \"h6\"): NodeListOf<HTMLHeadingElement>;\n    getElementsByTagName(name: \"head\"): NodeListOf<HTMLHeadElement>;\n    getElementsByTagName(name: \"header\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"hgroup\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"hr\"): NodeListOf<HTMLHRElement>;\n    getElementsByTagName(name: \"html\"): NodeListOf<HTMLHtmlElement>;\n    getElementsByTagName(name: \"i\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"iframe\"): NodeListOf<HTMLIFrameElement>;\n    getElementsByTagName(name: \"image\"): NodeListOf<SVGImageElement>;\n    getElementsByTagName(name: \"img\"): NodeListOf<HTMLImageElement>;\n    getElementsByTagName(name: \"input\"): NodeListOf<HTMLInputElement>;\n    getElementsByTagName(name: \"ins\"): NodeListOf<HTMLModElement>;\n    getElementsByTagName(name: \"isindex\"): NodeListOf<HTMLIsIndexElement>;\n    getElementsByTagName(name: \"kbd\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"keygen\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(name: \"label\"): NodeListOf<HTMLLabelElement>;\n    getElementsByTagName(name: \"legend\"): NodeListOf<HTMLLegendElement>;\n    getElementsByTagName(name: \"li\"): NodeListOf<HTMLLIElement>;\n    getElementsByTagName(name: \"line\"): NodeListOf<SVGLineElement>;\n    getElementsByTagName(name: \"lineargradient\"): NodeListOf<SVGLinearGradientElement>;\n    getElementsByTagName(name: \"link\"): NodeListOf<HTMLLinkElement>;\n    getElementsByTagName(name: \"listing\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(name: \"map\"): NodeListOf<HTMLMapElement>;\n    getElementsByTagName(name: \"mark\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"marker\"): NodeListOf<SVGMarkerElement>;\n    getElementsByTagName(name: \"marquee\"): NodeListOf<HTMLMarqueeElement>;\n    getElementsByTagName(name: \"mask\"): NodeListOf<SVGMaskElement>;\n    getElementsByTagName(name: \"menu\"): NodeListOf<HTMLMenuElement>;\n    getElementsByTagName(name: \"meta\"): NodeListOf<HTMLMetaElement>;\n    getElementsByTagName(name: \"metadata\"): NodeListOf<SVGMetadataElement>;\n    getElementsByTagName(name: \"nav\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"nextid\"): NodeListOf<HTMLNextIdElement>;\n    getElementsByTagName(name: \"nobr\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"noframes\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"noscript\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"object\"): NodeListOf<HTMLObjectElement>;\n    getElementsByTagName(name: \"ol\"): NodeListOf<HTMLOListElement>;\n    getElementsByTagName(name: \"optgroup\"): NodeListOf<HTMLOptGroupElement>;\n    getElementsByTagName(name: \"option\"): NodeListOf<HTMLOptionElement>;\n    getElementsByTagName(name: \"p\"): NodeListOf<HTMLParagraphElement>;\n    getElementsByTagName(name: \"param\"): NodeListOf<HTMLParamElement>;\n    getElementsByTagName(name: \"path\"): NodeListOf<SVGPathElement>;\n    getElementsByTagName(name: \"pattern\"): NodeListOf<SVGPatternElement>;\n    getElementsByTagName(name: \"plaintext\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(name: \"polygon\"): NodeListOf<SVGPolygonElement>;\n    getElementsByTagName(name: \"polyline\"): NodeListOf<SVGPolylineElement>;\n    getElementsByTagName(name: \"pre\"): NodeListOf<HTMLPreElement>;\n    getElementsByTagName(name: \"progress\"): NodeListOf<HTMLProgressElement>;\n    getElementsByTagName(name: \"q\"): NodeListOf<HTMLQuoteElement>;\n    getElementsByTagName(name: \"radialgradient\"): NodeListOf<SVGRadialGradientElement>;\n    getElementsByTagName(name: \"rect\"): NodeListOf<SVGRectElement>;\n    getElementsByTagName(name: \"rt\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"ruby\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"s\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"samp\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"script\"): NodeListOf<HTMLScriptElement>;\n    getElementsByTagName(name: \"section\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"select\"): NodeListOf<HTMLSelectElement>;\n    getElementsByTagName(name: \"small\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"source\"): NodeListOf<HTMLSourceElement>;\n    getElementsByTagName(name: \"span\"): NodeListOf<HTMLSpanElement>;\n    getElementsByTagName(name: \"stop\"): NodeListOf<SVGStopElement>;\n    getElementsByTagName(name: \"strike\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"strong\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"style\"): NodeListOf<HTMLStyleElement>;\n    getElementsByTagName(name: \"sub\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"sup\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"svg\"): NodeListOf<SVGSVGElement>;\n    getElementsByTagName(name: \"switch\"): NodeListOf<SVGSwitchElement>;\n    getElementsByTagName(name: \"symbol\"): NodeListOf<SVGSymbolElement>;\n    getElementsByTagName(name: \"table\"): NodeListOf<HTMLTableElement>;\n    getElementsByTagName(name: \"tbody\"): NodeListOf<HTMLTableSectionElement>;\n    getElementsByTagName(name: \"td\"): NodeListOf<HTMLTableDataCellElement>;\n    getElementsByTagName(name: \"text\"): NodeListOf<SVGTextElement>;\n    getElementsByTagName(name: \"textpath\"): NodeListOf<SVGTextPathElement>;\n    getElementsByTagName(name: \"textarea\"): NodeListOf<HTMLTextAreaElement>;\n    getElementsByTagName(name: \"tfoot\"): NodeListOf<HTMLTableSectionElement>;\n    getElementsByTagName(name: \"th\"): NodeListOf<HTMLTableHeaderCellElement>;\n    getElementsByTagName(name: \"thead\"): NodeListOf<HTMLTableSectionElement>;\n    getElementsByTagName(name: \"title\"): NodeListOf<HTMLTitleElement>;\n    getElementsByTagName(name: \"tr\"): NodeListOf<HTMLTableRowElement>;\n    getElementsByTagName(name: \"track\"): NodeListOf<HTMLTrackElement>;\n    getElementsByTagName(name: \"tspan\"): NodeListOf<SVGTSpanElement>;\n    getElementsByTagName(name: \"tt\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"u\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"ul\"): NodeListOf<HTMLUListElement>;\n    getElementsByTagName(name: \"use\"): NodeListOf<SVGUseElement>;\n    getElementsByTagName(name: \"var\"): NodeListOf<HTMLPhraseElement>;\n    getElementsByTagName(name: \"video\"): NodeListOf<HTMLVideoElement>;\n    getElementsByTagName(name: \"view\"): NodeListOf<SVGViewElement>;\n    getElementsByTagName(name: \"wbr\"): NodeListOf<HTMLElement>;\n    getElementsByTagName(name: \"x-ms-webview\"): NodeListOf<MSHTMLWebViewElement>;\n    getElementsByTagName(name: \"xmp\"): NodeListOf<HTMLBlockElement>;\n    getElementsByTagName(name: string): NodeListOf<Element>;\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeListOf<Element>;\n    hasAttribute(name: string): boolean;\n    hasAttributeNS(namespaceURI: string, localName: string): boolean;\n    msGetRegionContent(): MSRangeCollection;\n    msGetUntransformedBounds(): ClientRect;\n    msMatchesSelector(selectors: string): boolean;\n    msReleasePointerCapture(pointerId: number): void;\n    msSetPointerCapture(pointerId: number): void;\n    msZoomTo(args: MsZoomToOptions): void;\n    releasePointerCapture(pointerId: number): void;\n    removeAttribute(name?: string): void;\n    removeAttributeNS(namespaceURI: string, localName: string): void;\n    removeAttributeNode(oldAttr: Attr): Attr;\n    requestFullscreen(): void;\n    requestPointerLock(): void;\n    setAttribute(name: string, value: string): void;\n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\n    setAttributeNode(newAttr: Attr): Attr;\n    setAttributeNodeNS(newAttr: Attr): Attr;\n    setPointerCapture(pointerId: number): void;\n    webkitMatchesSelector(selectors: string): boolean;\n    webkitRequestFullScreen(): void;\n    webkitRequestFullscreen(): void;\n    getElementsByClassName(classNames: string): NodeListOf<Element>;\n    matches(selector: string): boolean;\n    getElementsByTagName(tagname: \"picture\"): NodeListOf<HTMLPictureElement>;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Element: {\n    prototype: Element;\n    new(): Element;\n}\n\ninterface ErrorEvent extends Event {\n    colno: number;\n    error: any;\n    filename: string;\n    lineno: number;\n    message: string;\n    initErrorEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, messageArg: string, filenameArg: string, linenoArg: number): void;\n}\n\ndeclare var ErrorEvent: {\n    prototype: ErrorEvent;\n    new(): ErrorEvent;\n}\n\ninterface Event {\n    bubbles: boolean;\n    cancelBubble: boolean;\n    cancelable: boolean;\n    currentTarget: EventTarget;\n    defaultPrevented: boolean;\n    eventPhase: number;\n    isTrusted: boolean;\n    returnValue: boolean;\n    srcElement: Element;\n    target: EventTarget;\n    timeStamp: number;\n    type: string;\n    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void;\n    preventDefault(): void;\n    stopImmediatePropagation(): void;\n    stopPropagation(): void;\n    AT_TARGET: number;\n    BUBBLING_PHASE: number;\n    CAPTURING_PHASE: number;\n}\n\ndeclare var Event: {\n    prototype: Event;\n    new(type: string, eventInitDict?: EventInit): Event;\n    AT_TARGET: number;\n    BUBBLING_PHASE: number;\n    CAPTURING_PHASE: number;\n}\n\ninterface EventTarget {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n    dispatchEvent(evt: Event): boolean;\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var EventTarget: {\n    prototype: EventTarget;\n    new(): EventTarget;\n}\n\ninterface External {\n}\n\ndeclare var External: {\n    prototype: External;\n    new(): External;\n}\n\ninterface File extends Blob {\n    lastModifiedDate: any;\n    name: string;\n}\n\ndeclare var File: {\n    prototype: File;\n    new (parts: (ArrayBuffer | ArrayBufferView | Blob | string)[], filename: string, properties?: FilePropertyBag): File;\n}\n\ninterface FileList {\n    length: number;\n    item(index: number): File;\n    [index: number]: File;\n}\n\ndeclare var FileList: {\n    prototype: FileList;\n    new(): FileList;\n}\n\ninterface FileReader extends EventTarget, MSBaseReader {\n    error: DOMError;\n    readAsArrayBuffer(blob: Blob): void;\n    readAsBinaryString(blob: Blob): void;\n    readAsDataURL(blob: Blob): void;\n    readAsText(blob: Blob, encoding?: string): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var FileReader: {\n    prototype: FileReader;\n    new(): FileReader;\n}\n\ninterface FocusEvent extends UIEvent {\n    relatedTarget: EventTarget;\n    initFocusEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, relatedTargetArg: EventTarget): void;\n}\n\ndeclare var FocusEvent: {\n    prototype: FocusEvent;\n    new(typeArg: string, eventInitDict?: FocusEventInit): FocusEvent;\n}\n\ninterface FormData {\n    append(name: any, value: any, blobName?: string): void;\n}\n\ndeclare var FormData: {\n    prototype: FormData;\n    new (form?: HTMLFormElement): FormData;\n}\n\ninterface GainNode extends AudioNode {\n    gain: AudioParam;\n}\n\ndeclare var GainNode: {\n    prototype: GainNode;\n    new(): GainNode;\n}\n\ninterface Gamepad {\n    axes: number[];\n    buttons: GamepadButton[];\n    connected: boolean;\n    id: string;\n    index: number;\n    mapping: string;\n    timestamp: number;\n}\n\ndeclare var Gamepad: {\n    prototype: Gamepad;\n    new(): Gamepad;\n}\n\ninterface GamepadButton {\n    pressed: boolean;\n    value: number;\n}\n\ndeclare var GamepadButton: {\n    prototype: GamepadButton;\n    new(): GamepadButton;\n}\n\ninterface GamepadEvent extends Event {\n    gamepad: Gamepad;\n}\n\ndeclare var GamepadEvent: {\n    prototype: GamepadEvent;\n    new(): GamepadEvent;\n}\n\ninterface Geolocation {\n    clearWatch(watchId: number): void;\n    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): void;\n    watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): number;\n}\n\ndeclare var Geolocation: {\n    prototype: Geolocation;\n    new(): Geolocation;\n}\n\ninterface HTMLAllCollection extends HTMLCollection {\n    namedItem(name: string): Element;\n}\n\ndeclare var HTMLAllCollection: {\n    prototype: HTMLAllCollection;\n    new(): HTMLAllCollection;\n}\n\ninterface HTMLAnchorElement extends HTMLElement {\n    Methods: string;\n    /**\n      * Sets or retrieves the character set used to encode the object.\n      */\n    charset: string;\n    /**\n      * Sets or retrieves the coordinates of the object.\n      */\n    coords: string;\n    /**\n      * Contains the anchor portion of the URL including the hash sign (#).\n      */\n    hash: string;\n    /**\n      * Contains the hostname and port values of the URL.\n      */\n    host: string;\n    /**\n      * Contains the hostname of a URL.\n      */\n    hostname: string;\n    /**\n      * Sets or retrieves a destination URL or an anchor point.\n      */\n    href: string;\n    /**\n      * Sets or retrieves the language code of the object.\n      */\n    hreflang: string;\n    mimeType: string;\n    /**\n      * Sets or retrieves the shape of the object.\n      */\n    name: string;\n    nameProp: string;\n    /**\n      * Contains the pathname of the URL.\n      */\n    pathname: string;\n    /**\n      * Sets or retrieves the port number associated with a URL.\n      */\n    port: string;\n    /**\n      * Contains the protocol of the URL.\n      */\n    protocol: string;\n    protocolLong: string;\n    /**\n      * Sets or retrieves the relationship between the object and the destination of the link.\n      */\n    rel: string;\n    /**\n      * Sets or retrieves the relationship between the object and the destination of the link.\n      */\n    rev: string;\n    /**\n      * Sets or retrieves the substring of the href property that follows the question mark.\n      */\n    search: string;\n    /**\n      * Sets or retrieves the shape of the object.\n      */\n    shape: string;\n    /**\n      * Sets or retrieves the window or frame at which to target content.\n      */\n    target: string;\n    /**\n      * Retrieves or sets the text of the object as a string.\n      */\n    text: string;\n    type: string;\n    urn: string;\n    /**\n      * Returns a string representation of an object.\n      */\n    toString(): string;\n}\n\ndeclare var HTMLAnchorElement: {\n    prototype: HTMLAnchorElement;\n    new(): HTMLAnchorElement;\n}\n\ninterface HTMLAppletElement extends HTMLElement {\n    /**\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\n      */\n    BaseHref: string;\n    align: string;\n    /**\n      * Sets or retrieves a text alternative to the graphic.\n      */\n    alt: string;\n    /**\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\n      */\n    altHtml: string;\n    /**\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\n      */\n    archive: string;\n    border: string;\n    code: string;\n    /**\n      * Sets or retrieves the URL of the component.\n      */\n    codeBase: string;\n    /**\n      * Sets or retrieves the Internet media type for the code associated with the object.\n      */\n    codeType: string;\n    /**\n      * Address of a pointer to the document this page or frame contains. If there is no document, then null will be returned.\n      */\n    contentDocument: Document;\n    /**\n      * Sets or retrieves the URL that references the data of the object.\n      */\n    data: string;\n    /**\n      * Sets or retrieves a character string that can be used to implement your own declare functionality for the object.\n      */\n    declare: boolean;\n    form: HTMLFormElement;\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: string;\n    hspace: number;\n    /**\n      * Sets or retrieves the shape of the object.\n      */\n    name: string;\n    object: string;\n    /**\n      * Sets or retrieves a message to be displayed while an object is loading.\n      */\n    standby: string;\n    /**\n      * Returns the content type of the object.\n      */\n    type: string;\n    /**\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n      */\n    useMap: string;\n    vspace: number;\n    width: number;\n}\n\ndeclare var HTMLAppletElement: {\n    prototype: HTMLAppletElement;\n    new(): HTMLAppletElement;\n}\n\ninterface HTMLAreaElement extends HTMLElement {\n    /**\n      * Sets or retrieves a text alternative to the graphic.\n      */\n    alt: string;\n    /**\n      * Sets or retrieves the coordinates of the object.\n      */\n    coords: string;\n    /**\n      * Sets or retrieves the subsection of the href property that follows the number sign (#).\n      */\n    hash: string;\n    /**\n      * Sets or retrieves the hostname and port number of the location or URL.\n      */\n    host: string;\n    /**\n      * Sets or retrieves the host name part of the location or URL.\n      */\n    hostname: string;\n    /**\n      * Sets or retrieves a destination URL or an anchor point.\n      */\n    href: string;\n    /**\n      * Sets or gets whether clicks in this region cause action.\n      */\n    noHref: boolean;\n    /**\n      * Sets or retrieves the file name or path specified by the object.\n      */\n    pathname: string;\n    /**\n      * Sets or retrieves the port number associated with a URL.\n      */\n    port: string;\n    /**\n      * Sets or retrieves the protocol portion of a URL.\n      */\n    protocol: string;\n    rel: string;\n    /**\n      * Sets or retrieves the substring of the href property that follows the question mark.\n      */\n    search: string;\n    /**\n      * Sets or retrieves the shape of the object.\n      */\n    shape: string;\n    /**\n      * Sets or retrieves the window or frame at which to target content.\n      */\n    target: string;\n    /**\n      * Returns a string representation of an object.\n      */\n    toString(): string;\n}\n\ndeclare var HTMLAreaElement: {\n    prototype: HTMLAreaElement;\n    new(): HTMLAreaElement;\n}\n\ninterface HTMLAreasCollection extends HTMLCollection {\n    /**\n      * Adds an element to the areas, controlRange, or options collection.\n      */\n    add(element: HTMLElement, before?: HTMLElement | number): void;\n    /**\n      * Removes an element from the collection.\n      */\n    remove(index?: number): void;\n}\n\ndeclare var HTMLAreasCollection: {\n    prototype: HTMLAreasCollection;\n    new(): HTMLAreasCollection;\n}\n\ninterface HTMLAudioElement extends HTMLMediaElement {\n}\n\ndeclare var HTMLAudioElement: {\n    prototype: HTMLAudioElement;\n    new(): HTMLAudioElement;\n}\n\ninterface HTMLBRElement extends HTMLElement {\n    /**\n      * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.\n      */\n    clear: string;\n}\n\ndeclare var HTMLBRElement: {\n    prototype: HTMLBRElement;\n    new(): HTMLBRElement;\n}\n\ninterface HTMLBaseElement extends HTMLElement {\n    /**\n      * Gets or sets the baseline URL on which relative links are based.\n      */\n    href: string;\n    /**\n      * Sets or retrieves the window or frame at which to target content.\n      */\n    target: string;\n}\n\ndeclare var HTMLBaseElement: {\n    prototype: HTMLBaseElement;\n    new(): HTMLBaseElement;\n}\n\ninterface HTMLBaseFontElement extends HTMLElement, DOML2DeprecatedColorProperty {\n    /**\n      * Sets or retrieves the current typeface family.\n      */\n    face: string;\n    /**\n      * Sets or retrieves the font size of the object.\n      */\n    size: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLBaseFontElement: {\n    prototype: HTMLBaseFontElement;\n    new(): HTMLBaseFontElement;\n}\n\ninterface HTMLBlockElement extends HTMLElement {\n    /**\n      * Sets or retrieves reference information about the object.\n      */\n    cite: string;\n    clear: string;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: number;\n}\n\ndeclare var HTMLBlockElement: {\n    prototype: HTMLBlockElement;\n    new(): HTMLBlockElement;\n}\n\ninterface HTMLBodyElement extends HTMLElement {\n    aLink: any;\n    background: string;\n    bgColor: any;\n    bgProperties: string;\n    link: any;\n    noWrap: boolean;\n    onafterprint: (ev: Event) => any;\n    onbeforeprint: (ev: Event) => any;\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\n    onblur: (ev: FocusEvent) => any;\n    onerror: (ev: Event) => any;\n    onfocus: (ev: FocusEvent) => any;\n    onhashchange: (ev: HashChangeEvent) => any;\n    onload: (ev: Event) => any;\n    onmessage: (ev: MessageEvent) => any;\n    onoffline: (ev: Event) => any;\n    ononline: (ev: Event) => any;\n    onorientationchange: (ev: Event) => any;\n    onpagehide: (ev: PageTransitionEvent) => any;\n    onpageshow: (ev: PageTransitionEvent) => any;\n    onpopstate: (ev: PopStateEvent) => any;\n    onresize: (ev: UIEvent) => any;\n    onstorage: (ev: StorageEvent) => any;\n    onunload: (ev: Event) => any;\n    text: any;\n    vLink: any;\n    createTextRange(): TextRange;\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLBodyElement: {\n    prototype: HTMLBodyElement;\n    new(): HTMLBodyElement;\n}\n\ninterface HTMLButtonElement extends HTMLElement {\n    /**\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n      */\n    autofocus: boolean;\n    disabled: boolean;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\n      */\n    formAction: string;\n    /**\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\n      */\n    formEnctype: string;\n    /**\n      * Overrides the submit method attribute previously specified on a form element.\n      */\n    formMethod: string;\n    /**\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\n      */\n    formNoValidate: string;\n    /**\n      * Overrides the target attribute on a form element.\n      */\n    formTarget: string;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n    status: any;\n    /**\n      * Gets the classification and default behavior of the button.\n      */\n    type: string;\n    /**\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n      */\n    validationMessage: string;\n    /**\n      * Returns a  ValidityState object that represents the validity states of an element.\n      */\n    validity: ValidityState;\n    /**\n      * Sets or retrieves the default or selected value of the control.\n      */\n    value: string;\n    /**\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\n      */\n    willValidate: boolean;\n    /**\n      * Returns whether a form will validate when it is submitted, without having to submit it.\n      */\n    checkValidity(): boolean;\n    /**\n      * Creates a TextRange object for the element.\n      */\n    createTextRange(): TextRange;\n    /**\n      * Sets a custom error message that is displayed when a form is submitted.\n      * @param error Sets a custom error message that is displayed when a form is submitted.\n      */\n    setCustomValidity(error: string): void;\n}\n\ndeclare var HTMLButtonElement: {\n    prototype: HTMLButtonElement;\n    new(): HTMLButtonElement;\n}\n\ninterface HTMLCanvasElement extends HTMLElement {\n    /**\n      * Gets or sets the height of a canvas element on a document.\n      */\n    height: number;\n    /**\n      * Gets or sets the width of a canvas element on a document.\n      */\n    width: number;\n    /**\n      * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\n      * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext(\"2d\"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext(\"experimental-webgl\");\n      */\n    getContext(contextId: \"2d\"): CanvasRenderingContext2D;\n    getContext(contextId: \"experimental-webgl\"): WebGLRenderingContext;\n    getContext(contextId: string, ...args: any[]): CanvasRenderingContext2D | WebGLRenderingContext;\n    /**\n      * Returns a blob object encoded as a Portable Network Graphics (PNG) format from a canvas image or drawing.\n      */\n    msToBlob(): Blob;\n    /**\n      * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.\n      * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.\n      */\n    toDataURL(type?: string, ...args: any[]): string;\n    toBlob(): Blob;\n}\n\ndeclare var HTMLCanvasElement: {\n    prototype: HTMLCanvasElement;\n    new(): HTMLCanvasElement;\n}\n\ninterface HTMLCollection {\n    /**\n      * Sets or retrieves the number of objects in a collection.\n      */\n    length: number;\n    /**\n      * Retrieves an object from various collections.\n      */\n    item(nameOrIndex?: any, optionalIndex?: any): Element;\n    /**\n      * Retrieves a select object or an object from an options collection.\n      */\n    namedItem(name: string): Element;\n    [index: number]: Element;\n}\n\ndeclare var HTMLCollection: {\n    prototype: HTMLCollection;\n    new(): HTMLCollection;\n}\n\ninterface HTMLDDElement extends HTMLElement {\n    /**\n      * Sets or retrieves whether the browser automatically performs wordwrap.\n      */\n    noWrap: boolean;\n}\n\ndeclare var HTMLDDElement: {\n    prototype: HTMLDDElement;\n    new(): HTMLDDElement;\n}\n\ninterface HTMLDListElement extends HTMLElement {\n    compact: boolean;\n}\n\ndeclare var HTMLDListElement: {\n    prototype: HTMLDListElement;\n    new(): HTMLDListElement;\n}\n\ninterface HTMLDTElement extends HTMLElement {\n    /**\n      * Sets or retrieves whether the browser automatically performs wordwrap.\n      */\n    noWrap: boolean;\n}\n\ndeclare var HTMLDTElement: {\n    prototype: HTMLDTElement;\n    new(): HTMLDTElement;\n}\n\ninterface HTMLDataListElement extends HTMLElement {\n    options: HTMLCollection;\n}\n\ndeclare var HTMLDataListElement: {\n    prototype: HTMLDataListElement;\n    new(): HTMLDataListElement;\n}\n\ninterface HTMLDirectoryElement extends HTMLElement {\n    compact: boolean;\n}\n\ndeclare var HTMLDirectoryElement: {\n    prototype: HTMLDirectoryElement;\n    new(): HTMLDirectoryElement;\n}\n\ninterface HTMLDivElement extends HTMLElement {\n    /**\n      * Sets or retrieves how the object is aligned with adjacent text.\n      */\n    align: string;\n    /**\n      * Sets or retrieves whether the browser automatically performs wordwrap.\n      */\n    noWrap: boolean;\n}\n\ndeclare var HTMLDivElement: {\n    prototype: HTMLDivElement;\n    new(): HTMLDivElement;\n}\n\ninterface HTMLDocument extends Document {\n}\n\ndeclare var HTMLDocument: {\n    prototype: HTMLDocument;\n    new(): HTMLDocument;\n}\n\ninterface HTMLElement extends Element {\n    accessKey: string;\n    children: HTMLCollection;\n    contentEditable: string;\n    dataset: DOMStringMap;\n    dir: string;\n    draggable: boolean;\n    hidden: boolean;\n    hideFocus: boolean;\n    innerHTML: string;\n    innerText: string;\n    isContentEditable: boolean;\n    lang: string;\n    offsetHeight: number;\n    offsetLeft: number;\n    offsetParent: Element;\n    offsetTop: number;\n    offsetWidth: number;\n    onabort: (ev: Event) => any;\n    onactivate: (ev: UIEvent) => any;\n    onbeforeactivate: (ev: UIEvent) => any;\n    onbeforecopy: (ev: DragEvent) => any;\n    onbeforecut: (ev: DragEvent) => any;\n    onbeforedeactivate: (ev: UIEvent) => any;\n    onbeforepaste: (ev: DragEvent) => any;\n    onblur: (ev: FocusEvent) => any;\n    oncanplay: (ev: Event) => any;\n    oncanplaythrough: (ev: Event) => any;\n    onchange: (ev: Event) => any;\n    onclick: (ev: MouseEvent) => any;\n    oncontextmenu: (ev: PointerEvent) => any;\n    oncopy: (ev: DragEvent) => any;\n    oncuechange: (ev: Event) => any;\n    oncut: (ev: DragEvent) => any;\n    ondblclick: (ev: MouseEvent) => any;\n    ondeactivate: (ev: UIEvent) => any;\n    ondrag: (ev: DragEvent) => any;\n    ondragend: (ev: DragEvent) => any;\n    ondragenter: (ev: DragEvent) => any;\n    ondragleave: (ev: DragEvent) => any;\n    ondragover: (ev: DragEvent) => any;\n    ondragstart: (ev: DragEvent) => any;\n    ondrop: (ev: DragEvent) => any;\n    ondurationchange: (ev: Event) => any;\n    onemptied: (ev: Event) => any;\n    onended: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onfocus: (ev: FocusEvent) => any;\n    oninput: (ev: Event) => any;\n    onkeydown: (ev: KeyboardEvent) => any;\n    onkeypress: (ev: KeyboardEvent) => any;\n    onkeyup: (ev: KeyboardEvent) => any;\n    onload: (ev: Event) => any;\n    onloadeddata: (ev: Event) => any;\n    onloadedmetadata: (ev: Event) => any;\n    onloadstart: (ev: Event) => any;\n    onmousedown: (ev: MouseEvent) => any;\n    onmouseenter: (ev: MouseEvent) => any;\n    onmouseleave: (ev: MouseEvent) => any;\n    onmousemove: (ev: MouseEvent) => any;\n    onmouseout: (ev: MouseEvent) => any;\n    onmouseover: (ev: MouseEvent) => any;\n    onmouseup: (ev: MouseEvent) => any;\n    onmousewheel: (ev: MouseWheelEvent) => any;\n    onmscontentzoom: (ev: UIEvent) => any;\n    onmsmanipulationstatechanged: (ev: MSManipulationEvent) => any;\n    onpaste: (ev: DragEvent) => any;\n    onpause: (ev: Event) => any;\n    onplay: (ev: Event) => any;\n    onplaying: (ev: Event) => any;\n    onprogress: (ev: ProgressEvent) => any;\n    onratechange: (ev: Event) => any;\n    onreset: (ev: Event) => any;\n    onscroll: (ev: UIEvent) => any;\n    onseeked: (ev: Event) => any;\n    onseeking: (ev: Event) => any;\n    onselect: (ev: UIEvent) => any;\n    onselectstart: (ev: Event) => any;\n    onstalled: (ev: Event) => any;\n    onsubmit: (ev: Event) => any;\n    onsuspend: (ev: Event) => any;\n    ontimeupdate: (ev: Event) => any;\n    onvolumechange: (ev: Event) => any;\n    onwaiting: (ev: Event) => any;\n    outerHTML: string;\n    outerText: string;\n    spellcheck: boolean;\n    style: CSSStyleDeclaration;\n    tabIndex: number;\n    title: string;\n    blur(): void;\n    click(): void;\n    dragDrop(): boolean;\n    focus(): void;\n    insertAdjacentElement(position: string, insertedElement: Element): Element;\n    insertAdjacentHTML(where: string, html: string): void;\n    insertAdjacentText(where: string, text: string): void;\n    msGetInputContext(): MSInputMethodContext;\n    scrollIntoView(top?: boolean): void;\n    setActive(): void;\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLElement: {\n    prototype: HTMLElement;\n    new(): HTMLElement;\n}\n\ninterface HTMLEmbedElement extends HTMLElement, GetSVGDocument {\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: string;\n    hidden: any;\n    /**\n      * Gets or sets whether the DLNA PlayTo device is available.\n      */\n    msPlayToDisabled: boolean;\n    /**\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\n      */\n    msPlayToPreferredSourceUri: string;\n    /**\n      * Gets or sets the primary DLNA PlayTo device.\n      */\n    msPlayToPrimary: boolean;\n    /**\n      * Gets the source associated with the media element for use by the PlayToManager.\n      */\n    msPlayToSource: any;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n    /**\n      * Retrieves the palette used for the embedded document.\n      */\n    palette: string;\n    /**\n      * Retrieves the URL of the plug-in used to view an embedded document.\n      */\n    pluginspage: string;\n    readyState: string;\n    /**\n      * Sets or retrieves a URL to be loaded by the object.\n      */\n    src: string;\n    /**\n      * Sets or retrieves the height and width units of the embed object.\n      */\n    units: string;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLEmbedElement: {\n    prototype: HTMLEmbedElement;\n    new(): HTMLEmbedElement;\n}\n\ninterface HTMLFieldSetElement extends HTMLElement {\n    /**\n      * Sets or retrieves how the object is aligned with adjacent text.\n      */\n    align: string;\n    disabled: boolean;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n      */\n    validationMessage: string;\n    /**\n      * Returns a  ValidityState object that represents the validity states of an element.\n      */\n    validity: ValidityState;\n    /**\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\n      */\n    willValidate: boolean;\n    /**\n      * Returns whether a form will validate when it is submitted, without having to submit it.\n      */\n    checkValidity(): boolean;\n    /**\n      * Sets a custom error message that is displayed when a form is submitted.\n      * @param error Sets a custom error message that is displayed when a form is submitted.\n      */\n    setCustomValidity(error: string): void;\n}\n\ndeclare var HTMLFieldSetElement: {\n    prototype: HTMLFieldSetElement;\n    new(): HTMLFieldSetElement;\n}\n\ninterface HTMLFontElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\n    /**\n      * Sets or retrieves the current typeface family.\n      */\n    face: string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLFontElement: {\n    prototype: HTMLFontElement;\n    new(): HTMLFontElement;\n}\n\ninterface HTMLFormElement extends HTMLElement {\n    /**\n      * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.\n      */\n    acceptCharset: string;\n    /**\n      * Sets or retrieves the URL to which the form content is sent for processing.\n      */\n    action: string;\n    /**\n      * Specifies whether autocomplete is applied to an editable text field.\n      */\n    autocomplete: string;\n    /**\n      * Retrieves a collection, in source order, of all controls in a given form.\n      */\n    elements: HTMLCollection;\n    /**\n      * Sets or retrieves the MIME encoding for the form.\n      */\n    encoding: string;\n    /**\n      * Sets or retrieves the encoding type for the form.\n      */\n    enctype: string;\n    /**\n      * Sets or retrieves the number of objects in a collection.\n      */\n    length: number;\n    /**\n      * Sets or retrieves how to send the form data to the server.\n      */\n    method: string;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n    /**\n      * Designates a form that is not validated when submitted.\n      */\n    noValidate: boolean;\n    /**\n      * Sets or retrieves the window or frame at which to target content.\n      */\n    target: string;\n    /**\n      * Returns whether a form will validate when it is submitted, without having to submit it.\n      */\n    checkValidity(): boolean;\n    /**\n      * Retrieves a form object or an object from an elements collection.\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is a Number, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\n      */\n    item(name?: any, index?: any): any;\n    /**\n      * Retrieves a form object or an object from an elements collection.\n      */\n    namedItem(name: string): any;\n    /**\n      * Fires when the user resets a form.\n      */\n    reset(): void;\n    /**\n      * Fires when a FORM is about to be submitted.\n      */\n    submit(): void;\n    [name: string]: any;\n}\n\ndeclare var HTMLFormElement: {\n    prototype: HTMLFormElement;\n    new(): HTMLFormElement;\n}\n\ninterface HTMLFrameElement extends HTMLElement, GetSVGDocument {\n    /**\n      * Specifies the properties of a border drawn around an object.\n      */\n    border: string;\n    /**\n      * Sets or retrieves the border color of the object.\n      */\n    borderColor: any;\n    /**\n      * Retrieves the document object of the page or frame.\n      */\n    contentDocument: Document;\n    /**\n      * Retrieves the object of the specified.\n      */\n    contentWindow: Window;\n    /**\n      * Sets or retrieves whether to display a border for the frame.\n      */\n    frameBorder: string;\n    /**\n      * Sets or retrieves the amount of additional space between the frames.\n      */\n    frameSpacing: any;\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: string | number;\n    /**\n      * Sets or retrieves a URI to a long description of the object.\n      */\n    longDesc: string;\n    /**\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n      */\n    marginHeight: string;\n    /**\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n      */\n    marginWidth: string;\n    /**\n      * Sets or retrieves the frame name.\n      */\n    name: string;\n    /**\n      * Sets or retrieves whether the user can resize the frame.\n      */\n    noResize: boolean;\n    /**\n      * Raised when the object has been completely received from the server.\n      */\n    onload: (ev: Event) => any;\n    /**\n      * Sets or retrieves whether the frame can be scrolled.\n      */\n    scrolling: string;\n    /**\n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.\n      */\n    security: any;\n    /**\n      * Sets or retrieves a URL to be loaded by the object.\n      */\n    src: string;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: string | number;\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLFrameElement: {\n    prototype: HTMLFrameElement;\n    new(): HTMLFrameElement;\n}\n\ninterface HTMLFrameSetElement extends HTMLElement {\n    border: string;\n    /**\n      * Sets or retrieves the border color of the object.\n      */\n    borderColor: any;\n    /**\n      * Sets or retrieves the frame widths of the object.\n      */\n    cols: string;\n    /**\n      * Sets or retrieves whether to display a border for the frame.\n      */\n    frameBorder: string;\n    /**\n      * Sets or retrieves the amount of additional space between the frames.\n      */\n    frameSpacing: any;\n    name: string;\n    onafterprint: (ev: Event) => any;\n    onbeforeprint: (ev: Event) => any;\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\n    /**\n      * Fires when the object loses the input focus.\n      */\n    onblur: (ev: FocusEvent) => any;\n    onerror: (ev: Event) => any;\n    /**\n      * Fires when the object receives focus.\n      */\n    onfocus: (ev: FocusEvent) => any;\n    onhashchange: (ev: HashChangeEvent) => any;\n    onload: (ev: Event) => any;\n    onmessage: (ev: MessageEvent) => any;\n    onoffline: (ev: Event) => any;\n    ononline: (ev: Event) => any;\n    onorientationchange: (ev: Event) => any;\n    onpagehide: (ev: PageTransitionEvent) => any;\n    onpageshow: (ev: PageTransitionEvent) => any;\n    onresize: (ev: UIEvent) => any;\n    onstorage: (ev: StorageEvent) => any;\n    onunload: (ev: Event) => any;\n    /**\n      * Sets or retrieves the frame heights of the object.\n      */\n    rows: string;\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLFrameSetElement: {\n    prototype: HTMLFrameSetElement;\n    new(): HTMLFrameSetElement;\n}\n\ninterface HTMLHRElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\n    /**\n      * Sets or retrieves how the object is aligned with adjacent text.\n      */\n    align: string;\n    /**\n      * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.\n      */\n    noShade: boolean;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLHRElement: {\n    prototype: HTMLHRElement;\n    new(): HTMLHRElement;\n}\n\ninterface HTMLHeadElement extends HTMLElement {\n    profile: string;\n}\n\ndeclare var HTMLHeadElement: {\n    prototype: HTMLHeadElement;\n    new(): HTMLHeadElement;\n}\n\ninterface HTMLHeadingElement extends HTMLElement {\n    /**\n      * Sets or retrieves a value that indicates the table alignment.\n      */\n    align: string;\n    clear: string;\n}\n\ndeclare var HTMLHeadingElement: {\n    prototype: HTMLHeadingElement;\n    new(): HTMLHeadingElement;\n}\n\ninterface HTMLHtmlElement extends HTMLElement {\n    /**\n      * Sets or retrieves the DTD version that governs the current document.\n      */\n    version: string;\n}\n\ndeclare var HTMLHtmlElement: {\n    prototype: HTMLHtmlElement;\n    new(): HTMLHtmlElement;\n}\n\ninterface HTMLIFrameElement extends HTMLElement, GetSVGDocument {\n    /**\n      * Sets or retrieves how the object is aligned with adjacent text.\n      */\n    align: string;\n    allowFullscreen: boolean;\n    /**\n      * Specifies the properties of a border drawn around an object.\n      */\n    border: string;\n    /**\n      * Retrieves the document object of the page or frame.\n      */\n    contentDocument: Document;\n    /**\n      * Retrieves the object of the specified.\n      */\n    contentWindow: Window;\n    /**\n      * Sets or retrieves whether to display a border for the frame.\n      */\n    frameBorder: string;\n    /**\n      * Sets or retrieves the amount of additional space between the frames.\n      */\n    frameSpacing: any;\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: string;\n    /**\n      * Sets or retrieves the horizontal margin for the object.\n      */\n    hspace: number;\n    /**\n      * Sets or retrieves a URI to a long description of the object.\n      */\n    longDesc: string;\n    /**\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n      */\n    marginHeight: string;\n    /**\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n      */\n    marginWidth: string;\n    /**\n      * Sets or retrieves the frame name.\n      */\n    name: string;\n    /**\n      * Sets or retrieves whether the user can resize the frame.\n      */\n    noResize: boolean;\n    /**\n      * Raised when the object has been completely received from the server.\n      */\n    onload: (ev: Event) => any;\n    sandbox: DOMSettableTokenList;\n    /**\n      * Sets or retrieves whether the frame can be scrolled.\n      */\n    scrolling: string;\n    /**\n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.\n      */\n    security: any;\n    /**\n      * Sets or retrieves a URL to be loaded by the object.\n      */\n    src: string;\n    /**\n      * Sets or retrieves the vertical margin for the object.\n      */\n    vspace: number;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: string;\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLIFrameElement: {\n    prototype: HTMLIFrameElement;\n    new(): HTMLIFrameElement;\n}\n\ninterface HTMLImageElement extends HTMLElement {\n    /**\n      * Sets or retrieves how the object is aligned with adjacent text.\n      */\n    align: string;\n    /**\n      * Sets or retrieves a text alternative to the graphic.\n      */\n    alt: string;\n    /**\n      * Specifies the properties of a border drawn around an object.\n      */\n    border: string;\n    /**\n      * Retrieves whether the object is fully loaded.\n      */\n    complete: boolean;\n    crossOrigin: string;\n    currentSrc: string;\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: number;\n    /**\n      * Sets or retrieves the width of the border to draw around the object.\n      */\n    hspace: number;\n    /**\n      * Sets or retrieves whether the image is a server-side image map.\n      */\n    isMap: boolean;\n    /**\n      * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.\n      */\n    longDesc: string;\n    /**\n      * Gets or sets whether the DLNA PlayTo device is available.\n      */\n    msPlayToDisabled: boolean;\n    msPlayToPreferredSourceUri: string;\n    /**\n      * Gets or sets the primary DLNA PlayTo device.\n      */\n    msPlayToPrimary: boolean;\n    /**\n      * Gets the source associated with the media element for use by the PlayToManager.\n      */\n    msPlayToSource: any;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n    /**\n      * The original height of the image resource before sizing.\n      */\n    naturalHeight: number;\n    /**\n      * The original width of the image resource before sizing.\n      */\n    naturalWidth: number;\n    /**\n      * The address or URL of the a media resource that is to be considered.\n      */\n    src: string;\n    srcset: string;\n    /**\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n      */\n    useMap: string;\n    /**\n      * Sets or retrieves the vertical margin for the object.\n      */\n    vspace: number;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: number;\n    x: number;\n    y: number;\n    msGetAsCastingSource(): any;\n}\n\ndeclare var HTMLImageElement: {\n    prototype: HTMLImageElement;\n    new(): HTMLImageElement;\n    create(): HTMLImageElement;\n}\n\ninterface HTMLInputElement extends HTMLElement {\n    /**\n      * Sets or retrieves a comma-separated list of content types.\n      */\n    accept: string;\n    /**\n      * Sets or retrieves how the object is aligned with adjacent text.\n      */\n    align: string;\n    /**\n      * Sets or retrieves a text alternative to the graphic.\n      */\n    alt: string;\n    /**\n      * Specifies whether autocomplete is applied to an editable text field.\n      */\n    autocomplete: string;\n    /**\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n      */\n    autofocus: boolean;\n    /**\n      * Sets or retrieves the width of the border to draw around the object.\n      */\n    border: string;\n    /**\n      * Sets or retrieves the state of the check box or radio button.\n      */\n    checked: boolean;\n    /**\n      * Retrieves whether the object is fully loaded.\n      */\n    complete: boolean;\n    /**\n      * Sets or retrieves the state of the check box or radio button.\n      */\n    defaultChecked: boolean;\n    /**\n      * Sets or retrieves the initial contents of the object.\n      */\n    defaultValue: string;\n    disabled: boolean;\n    /**\n      * Returns a FileList object on a file type input object.\n      */\n    files: FileList;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\n      */\n    formAction: string;\n    /**\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\n      */\n    formEnctype: string;\n    /**\n      * Overrides the submit method attribute previously specified on a form element.\n      */\n    formMethod: string;\n    /**\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\n      */\n    formNoValidate: string;\n    /**\n      * Overrides the target attribute on a form element.\n      */\n    formTarget: string;\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: string;\n    /**\n      * Sets or retrieves the width of the border to draw around the object.\n      */\n    hspace: number;\n    indeterminate: boolean;\n    /**\n      * Specifies the ID of a pre-defined datalist of options for an input element.\n      */\n    list: HTMLElement;\n    /**\n      * Defines the maximum acceptable value for an input element with type=\"number\".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.\n      */\n    max: string;\n    /**\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\n      */\n    maxLength: number;\n    /**\n      * Defines the minimum acceptable value for an input element with type=\"number\". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.\n      */\n    min: string;\n    /**\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\n      */\n    multiple: boolean;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n    /**\n      * Gets or sets a string containing a regular expression that the user's input must match.\n      */\n    pattern: string;\n    /**\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\n      */\n    placeholder: string;\n    readOnly: boolean;\n    /**\n      * When present, marks an element that can't be submitted without a value.\n      */\n    required: boolean;\n    /**\n      * Gets or sets the end position or offset of a text selection.\n      */\n    selectionEnd: number;\n    /**\n      * Gets or sets the starting position or offset of a text selection.\n      */\n    selectionStart: number;\n    size: number;\n    /**\n      * The address or URL of the a media resource that is to be considered.\n      */\n    src: string;\n    status: boolean;\n    /**\n      * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.\n      */\n    step: string;\n    /**\n      * Returns the content type of the object.\n      */\n    type: string;\n    /**\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n      */\n    useMap: string;\n    /**\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n      */\n    validationMessage: string;\n    /**\n      * Returns a  ValidityState object that represents the validity states of an element.\n      */\n    validity: ValidityState;\n    /**\n      * Returns the value of the data at the cursor's current position.\n      */\n    value: string;\n    valueAsDate: Date;\n    /**\n      * Returns the input field value as a number.\n      */\n    valueAsNumber: number;\n    /**\n      * Sets or retrieves the vertical margin for the object.\n      */\n    vspace: number;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: string;\n    /**\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\n      */\n    willValidate: boolean;\n    /**\n      * Returns whether a form will validate when it is submitted, without having to submit it.\n      */\n    checkValidity(): boolean;\n    /**\n      * Creates a TextRange object for the element.\n      */\n    createTextRange(): TextRange;\n    /**\n      * Makes the selection equal to the current object.\n      */\n    select(): void;\n    /**\n      * Sets a custom error message that is displayed when a form is submitted.\n      * @param error Sets a custom error message that is displayed when a form is submitted.\n      */\n    setCustomValidity(error: string): void;\n    /**\n      * Sets the start and end positions of a selection in a text field.\n      * @param start The offset into the text field for the start of the selection.\n      * @param end The offset into the text field for the end of the selection.\n      */\n    setSelectionRange(start: number, end: number): void;\n    /**\n      * Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.\n      * @param n Value to decrement the value by.\n      */\n    stepDown(n?: number): void;\n    /**\n      * Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.\n      * @param n Value to increment the value by.\n      */\n    stepUp(n?: number): void;\n}\n\ndeclare var HTMLInputElement: {\n    prototype: HTMLInputElement;\n    new(): HTMLInputElement;\n}\n\ninterface HTMLIsIndexElement extends HTMLElement {\n    /**\n      * Sets or retrieves the URL to which the form content is sent for processing.\n      */\n    action: string;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    prompt: string;\n}\n\ndeclare var HTMLIsIndexElement: {\n    prototype: HTMLIsIndexElement;\n    new(): HTMLIsIndexElement;\n}\n\ninterface HTMLLIElement extends HTMLElement {\n    type: string;\n    /**\n      * Sets or retrieves the value of a list item.\n      */\n    value: number;\n}\n\ndeclare var HTMLLIElement: {\n    prototype: HTMLLIElement;\n    new(): HTMLLIElement;\n}\n\ninterface HTMLLabelElement extends HTMLElement {\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Sets or retrieves the object to which the given label object is assigned.\n      */\n    htmlFor: string;\n}\n\ndeclare var HTMLLabelElement: {\n    prototype: HTMLLabelElement;\n    new(): HTMLLabelElement;\n}\n\ninterface HTMLLegendElement extends HTMLElement {\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    align: string;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n}\n\ndeclare var HTMLLegendElement: {\n    prototype: HTMLLegendElement;\n    new(): HTMLLegendElement;\n}\n\ninterface HTMLLinkElement extends HTMLElement, LinkStyle {\n    /**\n      * Sets or retrieves the character set used to encode the object.\n      */\n    charset: string;\n    disabled: boolean;\n    /**\n      * Sets or retrieves a destination URL or an anchor point.\n      */\n    href: string;\n    /**\n      * Sets or retrieves the language code of the object.\n      */\n    hreflang: string;\n    /**\n      * Sets or retrieves the media type.\n      */\n    media: string;\n    /**\n      * Sets or retrieves the relationship between the object and the destination of the link.\n      */\n    rel: string;\n    /**\n      * Sets or retrieves the relationship between the object and the destination of the link.\n      */\n    rev: string;\n    /**\n      * Sets or retrieves the window or frame at which to target content.\n      */\n    target: string;\n    /**\n      * Sets or retrieves the MIME type of the object.\n      */\n    type: string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLLinkElement: {\n    prototype: HTMLLinkElement;\n    new(): HTMLLinkElement;\n}\n\ninterface HTMLMapElement extends HTMLElement {\n    /**\n      * Retrieves a collection of the area objects defined for the given map object.\n      */\n    areas: HTMLAreasCollection;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n}\n\ndeclare var HTMLMapElement: {\n    prototype: HTMLMapElement;\n    new(): HTMLMapElement;\n}\n\ninterface HTMLMarqueeElement extends HTMLElement {\n    behavior: string;\n    bgColor: any;\n    direction: string;\n    height: string;\n    hspace: number;\n    loop: number;\n    onbounce: (ev: Event) => any;\n    onfinish: (ev: Event) => any;\n    onstart: (ev: Event) => any;\n    scrollAmount: number;\n    scrollDelay: number;\n    trueSpeed: boolean;\n    vspace: number;\n    width: string;\n    start(): void;\n    stop(): void;\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"bounce\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"finish\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"start\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLMarqueeElement: {\n    prototype: HTMLMarqueeElement;\n    new(): HTMLMarqueeElement;\n}\n\ninterface HTMLMediaElement extends HTMLElement {\n    /**\n      * Returns an AudioTrackList object with the audio tracks for a given video element.\n      */\n    audioTracks: AudioTrackList;\n    /**\n      * Gets or sets a value that indicates whether to start playing the media automatically.\n      */\n    autoplay: boolean;\n    /**\n      * Gets a collection of buffered time ranges.\n      */\n    buffered: TimeRanges;\n    /**\n      * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).\n      */\n    controls: boolean;\n    /**\n      * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.\n      */\n    currentSrc: string;\n    /**\n      * Gets or sets the current playback position, in seconds.\n      */\n    currentTime: number;\n    defaultMuted: boolean;\n    /**\n      * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.\n      */\n    defaultPlaybackRate: number;\n    /**\n      * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.\n      */\n    duration: number;\n    /**\n      * Gets information about whether the playback has ended or not.\n      */\n    ended: boolean;\n    /**\n      * Returns an object representing the current error state of the audio or video element.\n      */\n    error: MediaError;\n    /**\n      * Gets or sets a flag to specify whether playback should restart after it completes.\n      */\n    loop: boolean;\n    /**\n      * Specifies the purpose of the audio or video media, such as background audio or alerts.\n      */\n    msAudioCategory: string;\n    /**\n      * Specifies the output device id that the audio will be sent to.\n      */\n    msAudioDeviceType: string;\n    msGraphicsTrustStatus: MSGraphicsTrust;\n    /**\n      * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.\n      */\n    msKeys: MSMediaKeys;\n    /**\n      * Gets or sets whether the DLNA PlayTo device is available.\n      */\n    msPlayToDisabled: boolean;\n    /**\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\n      */\n    msPlayToPreferredSourceUri: string;\n    /**\n      * Gets or sets the primary DLNA PlayTo device.\n      */\n    msPlayToPrimary: boolean;\n    /**\n      * Gets the source associated with the media element for use by the PlayToManager.\n      */\n    msPlayToSource: any;\n    /**\n      * Specifies whether or not to enable low-latency playback on the media element.\n      */\n    msRealTime: boolean;\n    /**\n      * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.\n      */\n    muted: boolean;\n    /**\n      * Gets the current network activity for the element.\n      */\n    networkState: number;\n    onmsneedkey: (ev: MSMediaKeyNeededEvent) => any;\n    /**\n      * Gets a flag that specifies whether playback is paused.\n      */\n    paused: boolean;\n    /**\n      * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.\n      */\n    playbackRate: number;\n    /**\n      * Gets TimeRanges for the current media resource that has been played.\n      */\n    played: TimeRanges;\n    /**\n      * Gets or sets the current playback position, in seconds.\n      */\n    preload: string;\n    readyState: number;\n    /**\n      * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.\n      */\n    seekable: TimeRanges;\n    /**\n      * Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.\n      */\n    seeking: boolean;\n    /**\n      * The address or URL of the a media resource that is to be considered.\n      */\n    src: string;\n    textTracks: TextTrackList;\n    videoTracks: VideoTrackList;\n    /**\n      * Gets or sets the volume level for audio portions of the media element.\n      */\n    volume: number;\n    addTextTrack(kind: string, label?: string, language?: string): TextTrack;\n    /**\n      * Returns a string that specifies whether the client can play a given media resource type.\n      */\n    canPlayType(type: string): string;\n    /**\n      * Fires immediately after the client loads the object.\n      */\n    load(): void;\n    /**\n      * Clears all effects from the media pipeline.\n      */\n    msClearEffects(): void;\n    msGetAsCastingSource(): any;\n    /**\n      * Inserts the specified audio effect into media pipeline.\n      */\n    msInsertAudioEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\n    msSetMediaKeys(mediaKeys: MSMediaKeys): void;\n    /**\n      * Specifies the media protection manager for a given media pipeline.\n      */\n    msSetMediaProtectionManager(mediaProtectionManager?: any): void;\n    /**\n      * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.\n      */\n    pause(): void;\n    /**\n      * Loads and starts playback of a media resource.\n      */\n    play(): void;\n    HAVE_CURRENT_DATA: number;\n    HAVE_ENOUGH_DATA: number;\n    HAVE_FUTURE_DATA: number;\n    HAVE_METADATA: number;\n    HAVE_NOTHING: number;\n    NETWORK_EMPTY: number;\n    NETWORK_IDLE: number;\n    NETWORK_LOADING: number;\n    NETWORK_NO_SOURCE: number;\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"msneedkey\", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLMediaElement: {\n    prototype: HTMLMediaElement;\n    new(): HTMLMediaElement;\n    HAVE_CURRENT_DATA: number;\n    HAVE_ENOUGH_DATA: number;\n    HAVE_FUTURE_DATA: number;\n    HAVE_METADATA: number;\n    HAVE_NOTHING: number;\n    NETWORK_EMPTY: number;\n    NETWORK_IDLE: number;\n    NETWORK_LOADING: number;\n    NETWORK_NO_SOURCE: number;\n}\n\ninterface HTMLMenuElement extends HTMLElement {\n    compact: boolean;\n    type: string;\n}\n\ndeclare var HTMLMenuElement: {\n    prototype: HTMLMenuElement;\n    new(): HTMLMenuElement;\n}\n\ninterface HTMLMetaElement extends HTMLElement {\n    /**\n      * Sets or retrieves the character set used to encode the object.\n      */\n    charset: string;\n    /**\n      * Gets or sets meta-information to associate with httpEquiv or name.\n      */\n    content: string;\n    /**\n      * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.\n      */\n    httpEquiv: string;\n    /**\n      * Sets or retrieves the value specified in the content attribute of the meta object.\n      */\n    name: string;\n    /**\n      * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.\n      */\n    scheme: string;\n    /**\n      * Sets or retrieves the URL property that will be loaded after the specified time has elapsed.\n      */\n    url: string;\n}\n\ndeclare var HTMLMetaElement: {\n    prototype: HTMLMetaElement;\n    new(): HTMLMetaElement;\n}\n\ninterface HTMLModElement extends HTMLElement {\n    /**\n      * Sets or retrieves reference information about the object.\n      */\n    cite: string;\n    /**\n      * Sets or retrieves the date and time of a modification to the object.\n      */\n    dateTime: string;\n}\n\ndeclare var HTMLModElement: {\n    prototype: HTMLModElement;\n    new(): HTMLModElement;\n}\n\ninterface HTMLNextIdElement extends HTMLElement {\n    n: string;\n}\n\ndeclare var HTMLNextIdElement: {\n    prototype: HTMLNextIdElement;\n    new(): HTMLNextIdElement;\n}\n\ninterface HTMLOListElement extends HTMLElement {\n    compact: boolean;\n    /**\n      * The starting number.\n      */\n    start: number;\n    type: string;\n}\n\ndeclare var HTMLOListElement: {\n    prototype: HTMLOListElement;\n    new(): HTMLOListElement;\n}\n\ninterface HTMLObjectElement extends HTMLElement, GetSVGDocument {\n    /**\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\n      */\n    BaseHref: string;\n    align: string;\n    /**\n      * Sets or retrieves a text alternative to the graphic.\n      */\n    alt: string;\n    /**\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\n      */\n    altHtml: string;\n    /**\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\n      */\n    archive: string;\n    border: string;\n    /**\n      * Sets or retrieves the URL of the file containing the compiled Java class.\n      */\n    code: string;\n    /**\n      * Sets or retrieves the URL of the component.\n      */\n    codeBase: string;\n    /**\n      * Sets or retrieves the Internet media type for the code associated with the object.\n      */\n    codeType: string;\n    /**\n      * Retrieves the document object of the page or frame.\n      */\n    contentDocument: Document;\n    /**\n      * Sets or retrieves the URL that references the data of the object.\n      */\n    data: string;\n    declare: boolean;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: string;\n    hspace: number;\n    /**\n      * Gets or sets whether the DLNA PlayTo device is available.\n      */\n    msPlayToDisabled: boolean;\n    /**\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\n      */\n    msPlayToPreferredSourceUri: string;\n    /**\n      * Gets or sets the primary DLNA PlayTo device.\n      */\n    msPlayToPrimary: boolean;\n    /**\n      * Gets the source associated with the media element for use by the PlayToManager.\n      */\n    msPlayToSource: any;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n    /**\n      * Retrieves the contained object.\n      */\n    object: any;\n    readyState: number;\n    /**\n      * Sets or retrieves a message to be displayed while an object is loading.\n      */\n    standby: string;\n    /**\n      * Sets or retrieves the MIME type of the object.\n      */\n    type: string;\n    /**\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n      */\n    useMap: string;\n    /**\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n      */\n    validationMessage: string;\n    /**\n      * Returns a  ValidityState object that represents the validity states of an element.\n      */\n    validity: ValidityState;\n    vspace: number;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: string;\n    /**\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\n      */\n    willValidate: boolean;\n    /**\n      * Returns whether a form will validate when it is submitted, without having to submit it.\n      */\n    checkValidity(): boolean;\n    /**\n      * Sets a custom error message that is displayed when a form is submitted.\n      * @param error Sets a custom error message that is displayed when a form is submitted.\n      */\n    setCustomValidity(error: string): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLObjectElement: {\n    prototype: HTMLObjectElement;\n    new(): HTMLObjectElement;\n}\n\ninterface HTMLOptGroupElement extends HTMLElement {\n    /**\n      * Sets or retrieves the status of an option.\n      */\n    defaultSelected: boolean;\n    disabled: boolean;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Sets or retrieves the ordinal position of an option in a list box.\n      */\n    index: number;\n    /**\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\n      */\n    label: string;\n    /**\n      * Sets or retrieves whether the option in the list box is the default item.\n      */\n    selected: boolean;\n    /**\n      * Sets or retrieves the text string specified by the option tag.\n      */\n    text: string;\n    /**\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\n      */\n    value: string;\n}\n\ndeclare var HTMLOptGroupElement: {\n    prototype: HTMLOptGroupElement;\n    new(): HTMLOptGroupElement;\n}\n\ninterface HTMLOptionElement extends HTMLElement {\n    /**\n      * Sets or retrieves the status of an option.\n      */\n    defaultSelected: boolean;\n    disabled: boolean;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Sets or retrieves the ordinal position of an option in a list box.\n      */\n    index: number;\n    /**\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\n      */\n    label: string;\n    /**\n      * Sets or retrieves whether the option in the list box is the default item.\n      */\n    selected: boolean;\n    /**\n      * Sets or retrieves the text string specified by the option tag.\n      */\n    text: string;\n    /**\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\n      */\n    value: string;\n}\n\ndeclare var HTMLOptionElement: {\n    prototype: HTMLOptionElement;\n    new(): HTMLOptionElement;\n    create(): HTMLOptionElement;\n}\n\ninterface HTMLParagraphElement extends HTMLElement {\n    /**\n      * Sets or retrieves how the object is aligned with adjacent text.\n      */\n    align: string;\n    clear: string;\n}\n\ndeclare var HTMLParagraphElement: {\n    prototype: HTMLParagraphElement;\n    new(): HTMLParagraphElement;\n}\n\ninterface HTMLParamElement extends HTMLElement {\n    /**\n      * Sets or retrieves the name of an input parameter for an element.\n      */\n    name: string;\n    /**\n      * Sets or retrieves the content type of the resource designated by the value attribute.\n      */\n    type: string;\n    /**\n      * Sets or retrieves the value of an input parameter for an element.\n      */\n    value: string;\n    /**\n      * Sets or retrieves the data type of the value attribute.\n      */\n    valueType: string;\n}\n\ndeclare var HTMLParamElement: {\n    prototype: HTMLParamElement;\n    new(): HTMLParamElement;\n}\n\ninterface HTMLPhraseElement extends HTMLElement {\n    /**\n      * Sets or retrieves reference information about the object.\n      */\n    cite: string;\n    /**\n      * Sets or retrieves the date and time of a modification to the object.\n      */\n    dateTime: string;\n}\n\ndeclare var HTMLPhraseElement: {\n    prototype: HTMLPhraseElement;\n    new(): HTMLPhraseElement;\n}\n\ninterface HTMLPreElement extends HTMLElement {\n    /**\n      * Indicates a citation by rendering text in italic type.\n      */\n    cite: string;\n    clear: string;\n    /**\n      * Sets or gets a value that you can use to implement your own width functionality for the object.\n      */\n    width: number;\n}\n\ndeclare var HTMLPreElement: {\n    prototype: HTMLPreElement;\n    new(): HTMLPreElement;\n}\n\ninterface HTMLProgressElement extends HTMLElement {\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Defines the maximum, or \"done\" value for a progress element.\n      */\n    max: number;\n    /**\n      * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).\n      */\n    position: number;\n    /**\n      * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.\n      */\n    value: number;\n}\n\ndeclare var HTMLProgressElement: {\n    prototype: HTMLProgressElement;\n    new(): HTMLProgressElement;\n}\n\ninterface HTMLQuoteElement extends HTMLElement {\n    /**\n      * Sets or retrieves reference information about the object.\n      */\n    cite: string;\n    /**\n      * Sets or retrieves the date and time of a modification to the object.\n      */\n    dateTime: string;\n}\n\ndeclare var HTMLQuoteElement: {\n    prototype: HTMLQuoteElement;\n    new(): HTMLQuoteElement;\n}\n\ninterface HTMLScriptElement extends HTMLElement {\n    async: boolean;\n    /**\n      * Sets or retrieves the character set used to encode the object.\n      */\n    charset: string;\n    /**\n      * Sets or retrieves the status of the script.\n      */\n    defer: boolean;\n    /**\n      * Sets or retrieves the event for which the script is written.\n      */\n    event: string;\n    /**\n      * Sets or retrieves the object that is bound to the event script.\n      */\n    htmlFor: string;\n    /**\n      * Retrieves the URL to an external file that contains the source code or data.\n      */\n    src: string;\n    /**\n      * Retrieves or sets the text of the object as a string.\n      */\n    text: string;\n    /**\n      * Sets or retrieves the MIME type for the associated scripting engine.\n      */\n    type: string;\n}\n\ndeclare var HTMLScriptElement: {\n    prototype: HTMLScriptElement;\n    new(): HTMLScriptElement;\n}\n\ninterface HTMLSelectElement extends HTMLElement {\n    /**\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n      */\n    autofocus: boolean;\n    disabled: boolean;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Sets or retrieves the number of objects in a collection.\n      */\n    length: number;\n    /**\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\n      */\n    multiple: boolean;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n    options: HTMLCollection;\n    /**\n      * When present, marks an element that can't be submitted without a value.\n      */\n    required: boolean;\n    /**\n      * Sets or retrieves the index of the selected option in a select object.\n      */\n    selectedIndex: number;\n    /**\n      * Sets or retrieves the number of rows in the list box.\n      */\n    size: number;\n    /**\n      * Retrieves the type of select control based on the value of the MULTIPLE attribute.\n      */\n    type: string;\n    /**\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n      */\n    validationMessage: string;\n    /**\n      * Returns a  ValidityState object that represents the validity states of an element.\n      */\n    validity: ValidityState;\n    /**\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\n      */\n    value: string;\n    /**\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\n      */\n    willValidate: boolean;\n    selectedOptions: HTMLCollection;\n    /**\n      * Adds an element to the areas, controlRange, or options collection.\n      * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.\n      * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.\n      */\n    add(element: HTMLElement, before?: HTMLElement | number): void;\n    /**\n      * Returns whether a form will validate when it is submitted, without having to submit it.\n      */\n    checkValidity(): boolean;\n    /**\n      * Retrieves a select object or an object from an options collection.\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\n      */\n    item(name?: any, index?: any): any;\n    /**\n      * Retrieves a select object or an object from an options collection.\n      * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.\n      */\n    namedItem(name: string): any;\n    /**\n      * Removes an element from the collection.\n      * @param index Number that specifies the zero-based index of the element to remove from the collection.\n      */\n    remove(index?: number): void;\n    /**\n      * Sets a custom error message that is displayed when a form is submitted.\n      * @param error Sets a custom error message that is displayed when a form is submitted.\n      */\n    setCustomValidity(error: string): void;\n    [name: string]: any;\n}\n\ndeclare var HTMLSelectElement: {\n    prototype: HTMLSelectElement;\n    new(): HTMLSelectElement;\n}\n\ninterface HTMLSourceElement extends HTMLElement {\n    /**\n      * Gets or sets the intended media type of the media source.\n     */\n    media: string;\n    msKeySystem: string;\n    /**\n      * The address or URL of the a media resource that is to be considered.\n      */\n    src: string;\n    /**\n     * Gets or sets the MIME type of a media resource.\n     */\n    type: string;\n}\n\ndeclare var HTMLSourceElement: {\n    prototype: HTMLSourceElement;\n    new(): HTMLSourceElement;\n}\n\ninterface HTMLSpanElement extends HTMLElement {\n}\n\ndeclare var HTMLSpanElement: {\n    prototype: HTMLSpanElement;\n    new(): HTMLSpanElement;\n}\n\ninterface HTMLStyleElement extends HTMLElement, LinkStyle {\n    /**\n      * Sets or retrieves the media type.\n      */\n    media: string;\n    /**\n      * Retrieves the CSS language in which the style sheet is written.\n      */\n    type: string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLStyleElement: {\n    prototype: HTMLStyleElement;\n    new(): HTMLStyleElement;\n}\n\ninterface HTMLTableCaptionElement extends HTMLElement {\n    /**\n      * Sets or retrieves the alignment of the caption or legend.\n      */\n    align: string;\n    /**\n      * Sets or retrieves whether the caption appears at the top or bottom of the table.\n      */\n    vAlign: string;\n}\n\ndeclare var HTMLTableCaptionElement: {\n    prototype: HTMLTableCaptionElement;\n    new(): HTMLTableCaptionElement;\n}\n\ninterface HTMLTableCellElement extends HTMLElement, HTMLTableAlignment {\n    /**\n      * Sets or retrieves abbreviated text for the object.\n      */\n    abbr: string;\n    /**\n      * Sets or retrieves how the object is aligned with adjacent text.\n      */\n    align: string;\n    /**\n      * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.\n      */\n    axis: string;\n    bgColor: any;\n    /**\n      * Retrieves the position of the object in the cells collection of a row.\n      */\n    cellIndex: number;\n    /**\n      * Sets or retrieves the number columns in the table that the object should span.\n      */\n    colSpan: number;\n    /**\n      * Sets or retrieves a list of header cells that provide information for the object.\n      */\n    headers: string;\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: any;\n    /**\n      * Sets or retrieves whether the browser automatically performs wordwrap.\n      */\n    noWrap: boolean;\n    /**\n      * Sets or retrieves how many rows in a table the cell should span.\n      */\n    rowSpan: number;\n    /**\n      * Sets or retrieves the group of cells in a table to which the object's information applies.\n      */\n    scope: string;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableCellElement: {\n    prototype: HTMLTableCellElement;\n    new(): HTMLTableCellElement;\n}\n\ninterface HTMLTableColElement extends HTMLElement, HTMLTableAlignment {\n    /**\n      * Sets or retrieves the alignment of the object relative to the display or table.\n      */\n    align: string;\n    /**\n      * Sets or retrieves the number of columns in the group.\n      */\n    span: number;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: any;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableColElement: {\n    prototype: HTMLTableColElement;\n    new(): HTMLTableColElement;\n}\n\ninterface HTMLTableDataCellElement extends HTMLTableCellElement {\n}\n\ndeclare var HTMLTableDataCellElement: {\n    prototype: HTMLTableDataCellElement;\n    new(): HTMLTableDataCellElement;\n}\n\ninterface HTMLTableElement extends HTMLElement {\n    /**\n      * Sets or retrieves a value that indicates the table alignment.\n      */\n    align: string;\n    bgColor: any;\n    /**\n      * Sets or retrieves the width of the border to draw around the object.\n      */\n    border: string;\n    /**\n      * Sets or retrieves the border color of the object.\n      */\n    borderColor: any;\n    /**\n      * Retrieves the caption object of a table.\n      */\n    caption: HTMLTableCaptionElement;\n    /**\n      * Sets or retrieves the amount of space between the border of the cell and the content of the cell.\n      */\n    cellPadding: string;\n    /**\n      * Sets or retrieves the amount of space between cells in a table.\n      */\n    cellSpacing: string;\n    /**\n      * Sets or retrieves the number of columns in the table.\n      */\n    cols: number;\n    /**\n      * Sets or retrieves the way the border frame around the table is displayed.\n      */\n    frame: string;\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: any;\n    /**\n      * Sets or retrieves the number of horizontal rows contained in the object.\n      */\n    rows: HTMLCollection;\n    /**\n      * Sets or retrieves which dividing lines (inner borders) are displayed.\n      */\n    rules: string;\n    /**\n      * Sets or retrieves a description and/or structure of the object.\n      */\n    summary: string;\n    /**\n      * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.\n      */\n    tBodies: HTMLCollection;\n    /**\n      * Retrieves the tFoot object of the table.\n      */\n    tFoot: HTMLTableSectionElement;\n    /**\n      * Retrieves the tHead object of the table.\n      */\n    tHead: HTMLTableSectionElement;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    width: string;\n    /**\n      * Creates an empty caption element in the table.\n      */\n    createCaption(): HTMLTableCaptionElement;\n    /**\n      * Creates an empty tBody element in the table.\n      */\n    createTBody(): HTMLTableSectionElement;\n    /**\n      * Creates an empty tFoot element in the table.\n      */\n    createTFoot(): HTMLTableSectionElement;\n    /**\n      * Returns the tHead element object if successful, or null otherwise.\n      */\n    createTHead(): HTMLTableSectionElement;\n    /**\n      * Deletes the caption element and its contents from the table.\n      */\n    deleteCaption(): void;\n    /**\n      * Removes the specified row (tr) from the element and from the rows collection.\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n      */\n    deleteRow(index?: number): void;\n    /**\n      * Deletes the tFoot element and its contents from the table.\n      */\n    deleteTFoot(): void;\n    /**\n      * Deletes the tHead element and its contents from the table.\n      */\n    deleteTHead(): void;\n    /**\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n      */\n    insertRow(index?: number): HTMLTableRowElement;\n}\n\ndeclare var HTMLTableElement: {\n    prototype: HTMLTableElement;\n    new(): HTMLTableElement;\n}\n\ninterface HTMLTableHeaderCellElement extends HTMLTableCellElement {\n    /**\n      * Sets or retrieves the group of cells in a table to which the object's information applies.\n      */\n    scope: string;\n}\n\ndeclare var HTMLTableHeaderCellElement: {\n    prototype: HTMLTableHeaderCellElement;\n    new(): HTMLTableHeaderCellElement;\n}\n\ninterface HTMLTableRowElement extends HTMLElement, HTMLTableAlignment {\n    /**\n      * Sets or retrieves how the object is aligned with adjacent text.\n      */\n    align: string;\n    bgColor: any;\n    /**\n      * Retrieves a collection of all cells in the table row.\n      */\n    cells: HTMLCollection;\n    /**\n      * Sets or retrieves the height of the object.\n      */\n    height: any;\n    /**\n      * Retrieves the position of the object in the rows collection for the table.\n      */\n    rowIndex: number;\n    /**\n      * Retrieves the position of the object in the collection.\n      */\n    sectionRowIndex: number;\n    /**\n      * Removes the specified cell from the table row, as well as from the cells collection.\n      * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.\n      */\n    deleteCell(index?: number): void;\n    /**\n      * Creates a new cell in the table row, and adds the cell to the cells collection.\n      * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.\n      */\n    insertCell(index?: number): HTMLTableCellElement;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableRowElement: {\n    prototype: HTMLTableRowElement;\n    new(): HTMLTableRowElement;\n}\n\ninterface HTMLTableSectionElement extends HTMLElement, HTMLTableAlignment {\n    /**\n      * Sets or retrieves a value that indicates the table alignment.\n      */\n    align: string;\n    /**\n      * Sets or retrieves the number of horizontal rows contained in the object.\n      */\n    rows: HTMLCollection;\n    /**\n      * Removes the specified row (tr) from the element and from the rows collection.\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n      */\n    deleteRow(index?: number): void;\n    /**\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n      */\n    insertRow(index?: number): HTMLTableRowElement;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLTableSectionElement: {\n    prototype: HTMLTableSectionElement;\n    new(): HTMLTableSectionElement;\n}\n\ninterface HTMLTextAreaElement extends HTMLElement {\n    /**\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\n      */\n    autofocus: boolean;\n    /**\n      * Sets or retrieves the width of the object.\n      */\n    cols: number;\n    /**\n      * Sets or retrieves the initial contents of the object.\n      */\n    defaultValue: string;\n    disabled: boolean;\n    /**\n      * Retrieves a reference to the form that the object is embedded in.\n      */\n    form: HTMLFormElement;\n    /**\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\n      */\n    maxLength: number;\n    /**\n      * Sets or retrieves the name of the object.\n      */\n    name: string;\n    /**\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\n      */\n    placeholder: string;\n    /**\n      * Sets or retrieves the value indicated whether the content of the object is read-only.\n      */\n    readOnly: boolean;\n    /**\n      * When present, marks an element that can't be submitted without a value.\n      */\n    required: boolean;\n    /**\n      * Sets or retrieves the number of horizontal rows contained in the object.\n      */\n    rows: number;\n    /**\n      * Gets or sets the end position or offset of a text selection.\n      */\n    selectionEnd: number;\n    /**\n      * Gets or sets the starting position or offset of a text selection.\n      */\n    selectionStart: number;\n    /**\n      * Sets or retrieves the value indicating whether the control is selected.\n      */\n    status: any;\n    /**\n      * Retrieves the type of control.\n      */\n    type: string;\n    /**\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n      */\n    validationMessage: string;\n    /**\n      * Returns a  ValidityState object that represents the validity states of an element.\n      */\n    validity: ValidityState;\n    /**\n      * Retrieves or sets the text in the entry field of the textArea element.\n      */\n    value: string;\n    /**\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\n      */\n    willValidate: boolean;\n    /**\n      * Sets or retrieves how to handle wordwrapping in the object.\n      */\n    wrap: string;\n    /**\n      * Returns whether a form will validate when it is submitted, without having to submit it.\n      */\n    checkValidity(): boolean;\n    /**\n      * Creates a TextRange object for the element.\n      */\n    createTextRange(): TextRange;\n    /**\n      * Highlights the input area of a form element.\n      */\n    select(): void;\n    /**\n      * Sets a custom error message that is displayed when a form is submitted.\n      * @param error Sets a custom error message that is displayed when a form is submitted.\n      */\n    setCustomValidity(error: string): void;\n    /**\n      * Sets the start and end positions of a selection in a text field.\n      * @param start The offset into the text field for the start of the selection.\n      * @param end The offset into the text field for the end of the selection.\n      */\n    setSelectionRange(start: number, end: number): void;\n}\n\ndeclare var HTMLTextAreaElement: {\n    prototype: HTMLTextAreaElement;\n    new(): HTMLTextAreaElement;\n}\n\ninterface HTMLTitleElement extends HTMLElement {\n    /**\n      * Retrieves or sets the text of the object as a string.\n      */\n    text: string;\n}\n\ndeclare var HTMLTitleElement: {\n    prototype: HTMLTitleElement;\n    new(): HTMLTitleElement;\n}\n\ninterface HTMLTrackElement extends HTMLElement {\n    default: boolean;\n    kind: string;\n    label: string;\n    readyState: number;\n    src: string;\n    srclang: string;\n    track: TextTrack;\n    ERROR: number;\n    LOADED: number;\n    LOADING: number;\n    NONE: number;\n}\n\ndeclare var HTMLTrackElement: {\n    prototype: HTMLTrackElement;\n    new(): HTMLTrackElement;\n    ERROR: number;\n    LOADED: number;\n    LOADING: number;\n    NONE: number;\n}\n\ninterface HTMLUListElement extends HTMLElement {\n    compact: boolean;\n    type: string;\n}\n\ndeclare var HTMLUListElement: {\n    prototype: HTMLUListElement;\n    new(): HTMLUListElement;\n}\n\ninterface HTMLUnknownElement extends HTMLElement {\n}\n\ndeclare var HTMLUnknownElement: {\n    prototype: HTMLUnknownElement;\n    new(): HTMLUnknownElement;\n}\n\ninterface HTMLVideoElement extends HTMLMediaElement {\n    /**\n      * Gets or sets the height of the video element.\n      */\n    height: number;\n    msHorizontalMirror: boolean;\n    msIsLayoutOptimalForPlayback: boolean;\n    msIsStereo3D: boolean;\n    msStereo3DPackingMode: string;\n    msStereo3DRenderMode: string;\n    msZoom: boolean;\n    onMSVideoFormatChanged: (ev: Event) => any;\n    onMSVideoFrameStepCompleted: (ev: Event) => any;\n    onMSVideoOptimalLayoutChanged: (ev: Event) => any;\n    /**\n      * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.\n      */\n    poster: string;\n    /**\n      * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.\n      */\n    videoHeight: number;\n    /**\n      * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.\n      */\n    videoWidth: number;\n    webkitDisplayingFullscreen: boolean;\n    webkitSupportsFullscreen: boolean;\n    /**\n      * Gets or sets the width of the video element.\n      */\n    width: number;\n    getVideoPlaybackQuality(): VideoPlaybackQuality;\n    msFrameStep(forward: boolean): void;\n    msInsertVideoEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\n    msSetVideoRectangle(left: number, top: number, right: number, bottom: number): void;\n    webkitEnterFullScreen(): void;\n    webkitEnterFullscreen(): void;\n    webkitExitFullScreen(): void;\n    webkitExitFullscreen(): void;\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSVideoFormatChanged\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSVideoFrameStepCompleted\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSVideoOptimalLayoutChanged\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"msneedkey\", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var HTMLVideoElement: {\n    prototype: HTMLVideoElement;\n    new(): HTMLVideoElement;\n}\n\ninterface HashChangeEvent extends Event {\n    newURL: string;\n    oldURL: string;\n}\n\ndeclare var HashChangeEvent: {\n    prototype: HashChangeEvent;\n    new(type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent;\n}\n\ninterface History {\n    length: number;\n    state: any;\n    back(distance?: any): void;\n    forward(distance?: any): void;\n    go(delta?: any): void;\n    pushState(statedata: any, title?: string, url?: string): void;\n    replaceState(statedata: any, title?: string, url?: string): void;\n}\n\ndeclare var History: {\n    prototype: History;\n    new(): History;\n}\n\ninterface IDBCursor {\n    direction: string;\n    key: any;\n    primaryKey: any;\n    source: any;\n    advance(count: number): void;\n    continue(key?: any): void;\n    delete(): IDBRequest;\n    update(value: any): IDBRequest;\n    NEXT: string;\n    NEXT_NO_DUPLICATE: string;\n    PREV: string;\n    PREV_NO_DUPLICATE: string;\n}\n\ndeclare var IDBCursor: {\n    prototype: IDBCursor;\n    new(): IDBCursor;\n    NEXT: string;\n    NEXT_NO_DUPLICATE: string;\n    PREV: string;\n    PREV_NO_DUPLICATE: string;\n}\n\ninterface IDBCursorWithValue extends IDBCursor {\n    value: any;\n}\n\ndeclare var IDBCursorWithValue: {\n    prototype: IDBCursorWithValue;\n    new(): IDBCursorWithValue;\n}\n\ninterface IDBDatabase extends EventTarget {\n    name: string;\n    objectStoreNames: DOMStringList;\n    onabort: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    version: number;\n    close(): void;\n    createObjectStore(name: string, optionalParameters?: IDBObjectStoreParameters): IDBObjectStore;\n    deleteObjectStore(name: string): void;\n    transaction(storeNames: any, mode?: string): IDBTransaction;\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var IDBDatabase: {\n    prototype: IDBDatabase;\n    new(): IDBDatabase;\n}\n\ninterface IDBFactory {\n    cmp(first: any, second: any): number;\n    deleteDatabase(name: string): IDBOpenDBRequest;\n    open(name: string, version?: number): IDBOpenDBRequest;\n}\n\ndeclare var IDBFactory: {\n    prototype: IDBFactory;\n    new(): IDBFactory;\n}\n\ninterface IDBIndex {\n    keyPath: string | string[];\n    name: string;\n    objectStore: IDBObjectStore;\n    unique: boolean;\n    multiEntry: boolean;\n    count(key?: any): IDBRequest;\n    get(key: any): IDBRequest;\n    getKey(key: any): IDBRequest;\n    openCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\n    openKeyCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\n}\n\ndeclare var IDBIndex: {\n    prototype: IDBIndex;\n    new(): IDBIndex;\n}\n\ninterface IDBKeyRange {\n    lower: any;\n    lowerOpen: boolean;\n    upper: any;\n    upperOpen: boolean;\n}\n\ndeclare var IDBKeyRange: {\n    prototype: IDBKeyRange;\n    new(): IDBKeyRange;\n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\n    lowerBound(bound: any, open?: boolean): IDBKeyRange;\n    only(value: any): IDBKeyRange;\n    upperBound(bound: any, open?: boolean): IDBKeyRange;\n}\n\ninterface IDBObjectStore {\n    indexNames: DOMStringList;\n    keyPath: string;\n    name: string;\n    transaction: IDBTransaction;\n    add(value: any, key?: any): IDBRequest;\n    clear(): IDBRequest;\n    count(key?: any): IDBRequest;\n    createIndex(name: string, keyPath: string | string[], optionalParameters?: IDBIndexParameters): IDBIndex;\n    delete(key: any): IDBRequest;\n    deleteIndex(indexName: string): void;\n    get(key: any): IDBRequest;\n    index(name: string): IDBIndex;\n    openCursor(range?: any, direction?: string): IDBRequest;\n    put(value: any, key?: any): IDBRequest;\n}\n\ndeclare var IDBObjectStore: {\n    prototype: IDBObjectStore;\n    new(): IDBObjectStore;\n}\n\ninterface IDBOpenDBRequest extends IDBRequest {\n    onblocked: (ev: Event) => any;\n    onupgradeneeded: (ev: IDBVersionChangeEvent) => any;\n    addEventListener(type: \"blocked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"success\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"upgradeneeded\", listener: (ev: IDBVersionChangeEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var IDBOpenDBRequest: {\n    prototype: IDBOpenDBRequest;\n    new(): IDBOpenDBRequest;\n}\n\ninterface IDBRequest extends EventTarget {\n    error: DOMError;\n    onerror: (ev: Event) => any;\n    onsuccess: (ev: Event) => any;\n    readyState: string;\n    result: any;\n    source: any;\n    transaction: IDBTransaction;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"success\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var IDBRequest: {\n    prototype: IDBRequest;\n    new(): IDBRequest;\n}\n\ninterface IDBTransaction extends EventTarget {\n    db: IDBDatabase;\n    error: DOMError;\n    mode: string;\n    onabort: (ev: Event) => any;\n    oncomplete: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    abort(): void;\n    objectStore(name: string): IDBObjectStore;\n    READ_ONLY: string;\n    READ_WRITE: string;\n    VERSION_CHANGE: string;\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var IDBTransaction: {\n    prototype: IDBTransaction;\n    new(): IDBTransaction;\n    READ_ONLY: string;\n    READ_WRITE: string;\n    VERSION_CHANGE: string;\n}\n\ninterface IDBVersionChangeEvent extends Event {\n    newVersion: number;\n    oldVersion: number;\n}\n\ndeclare var IDBVersionChangeEvent: {\n    prototype: IDBVersionChangeEvent;\n    new(): IDBVersionChangeEvent;\n}\n\ninterface ImageData {\n    data: Uint8ClampedArray;\n    height: number;\n    width: number;\n}\n\ndeclare var ImageData: {\n    prototype: ImageData;\n    new(width: number, height: number): ImageData;\n    new(array: Uint8ClampedArray, width: number, height: number): ImageData;\n}\n\ninterface KeyboardEvent extends UIEvent {\n    altKey: boolean;\n    char: string;\n    charCode: number;\n    ctrlKey: boolean;\n    key: string;\n    keyCode: number;\n    locale: string;\n    location: number;\n    metaKey: boolean;\n    repeat: boolean;\n    shiftKey: boolean;\n    which: number;\n    getModifierState(keyArg: string): boolean;\n    initKeyboardEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, keyArg: string, locationArg: number, modifiersListArg: string, repeat: boolean, locale: string): void;\n    DOM_KEY_LOCATION_JOYSTICK: number;\n    DOM_KEY_LOCATION_LEFT: number;\n    DOM_KEY_LOCATION_MOBILE: number;\n    DOM_KEY_LOCATION_NUMPAD: number;\n    DOM_KEY_LOCATION_RIGHT: number;\n    DOM_KEY_LOCATION_STANDARD: number;\n}\n\ndeclare var KeyboardEvent: {\n    prototype: KeyboardEvent;\n    new(typeArg: string, eventInitDict?: KeyboardEventInit): KeyboardEvent;\n    DOM_KEY_LOCATION_JOYSTICK: number;\n    DOM_KEY_LOCATION_LEFT: number;\n    DOM_KEY_LOCATION_MOBILE: number;\n    DOM_KEY_LOCATION_NUMPAD: number;\n    DOM_KEY_LOCATION_RIGHT: number;\n    DOM_KEY_LOCATION_STANDARD: number;\n}\n\ninterface Location {\n    hash: string;\n    host: string;\n    hostname: string;\n    href: string;\n    origin: string;\n    pathname: string;\n    port: string;\n    protocol: string;\n    search: string;\n    assign(url: string): void;\n    reload(forcedReload?: boolean): void;\n    replace(url: string): void;\n    toString(): string;\n}\n\ndeclare var Location: {\n    prototype: Location;\n    new(): Location;\n}\n\ninterface LongRunningScriptDetectedEvent extends Event {\n    executionTime: number;\n    stopPageScriptExecution: boolean;\n}\n\ndeclare var LongRunningScriptDetectedEvent: {\n    prototype: LongRunningScriptDetectedEvent;\n    new(): LongRunningScriptDetectedEvent;\n}\n\ninterface MSApp {\n    clearTemporaryWebDataAsync(): MSAppAsyncOperation;\n    createBlobFromRandomAccessStream(type: string, seeker: any): Blob;\n    createDataPackage(object: any): any;\n    createDataPackageFromSelection(): any;\n    createFileFromStorageFile(storageFile: any): File;\n    createStreamFromInputStream(type: string, inputStream: any): MSStream;\n    execAsyncAtPriority(asynchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): void;\n    execAtPriority(synchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): any;\n    getCurrentPriority(): string;\n    getHtmlPrintDocumentSourceAsync(htmlDoc: any): any;\n    getViewId(view: any): any;\n    isTaskScheduledAtPriorityOrHigher(priority: string): boolean;\n    pageHandlesAllApplicationActivations(enabled: boolean): void;\n    suppressSubdownloadCredentialPrompts(suppress: boolean): void;\n    terminateApp(exceptionObject: any): void;\n    CURRENT: string;\n    HIGH: string;\n    IDLE: string;\n    NORMAL: string;\n}\ndeclare var MSApp: MSApp;\n\ninterface MSAppAsyncOperation extends EventTarget {\n    error: DOMError;\n    oncomplete: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    readyState: number;\n    result: any;\n    start(): void;\n    COMPLETED: number;\n    ERROR: number;\n    STARTED: number;\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var MSAppAsyncOperation: {\n    prototype: MSAppAsyncOperation;\n    new(): MSAppAsyncOperation;\n    COMPLETED: number;\n    ERROR: number;\n    STARTED: number;\n}\n\ninterface MSBlobBuilder {\n    append(data: any, endings?: string): void;\n    getBlob(contentType?: string): Blob;\n}\n\ndeclare var MSBlobBuilder: {\n    prototype: MSBlobBuilder;\n    new(): MSBlobBuilder;\n}\n\ninterface MSCSSMatrix {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n    e: number;\n    f: number;\n    m11: number;\n    m12: number;\n    m13: number;\n    m14: number;\n    m21: number;\n    m22: number;\n    m23: number;\n    m24: number;\n    m31: number;\n    m32: number;\n    m33: number;\n    m34: number;\n    m41: number;\n    m42: number;\n    m43: number;\n    m44: number;\n    inverse(): MSCSSMatrix;\n    multiply(secondMatrix: MSCSSMatrix): MSCSSMatrix;\n    rotate(angleX: number, angleY?: number, angleZ?: number): MSCSSMatrix;\n    rotateAxisAngle(x: number, y: number, z: number, angle: number): MSCSSMatrix;\n    scale(scaleX: number, scaleY?: number, scaleZ?: number): MSCSSMatrix;\n    setMatrixValue(value: string): void;\n    skewX(angle: number): MSCSSMatrix;\n    skewY(angle: number): MSCSSMatrix;\n    toString(): string;\n    translate(x: number, y: number, z?: number): MSCSSMatrix;\n}\n\ndeclare var MSCSSMatrix: {\n    prototype: MSCSSMatrix;\n    new(text?: string): MSCSSMatrix;\n}\n\ninterface MSGesture {\n    target: Element;\n    addPointer(pointerId: number): void;\n    stop(): void;\n}\n\ndeclare var MSGesture: {\n    prototype: MSGesture;\n    new(): MSGesture;\n}\n\ninterface MSGestureEvent extends UIEvent {\n    clientX: number;\n    clientY: number;\n    expansion: number;\n    gestureObject: any;\n    hwTimestamp: number;\n    offsetX: number;\n    offsetY: number;\n    rotation: number;\n    scale: number;\n    screenX: number;\n    screenY: number;\n    translationX: number;\n    translationY: number;\n    velocityAngular: number;\n    velocityExpansion: number;\n    velocityX: number;\n    velocityY: number;\n    initGestureEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void;\n    MSGESTURE_FLAG_BEGIN: number;\n    MSGESTURE_FLAG_CANCEL: number;\n    MSGESTURE_FLAG_END: number;\n    MSGESTURE_FLAG_INERTIA: number;\n    MSGESTURE_FLAG_NONE: number;\n}\n\ndeclare var MSGestureEvent: {\n    prototype: MSGestureEvent;\n    new(): MSGestureEvent;\n    MSGESTURE_FLAG_BEGIN: number;\n    MSGESTURE_FLAG_CANCEL: number;\n    MSGESTURE_FLAG_END: number;\n    MSGESTURE_FLAG_INERTIA: number;\n    MSGESTURE_FLAG_NONE: number;\n}\n\ninterface MSGraphicsTrust {\n    constrictionActive: boolean;\n    status: string;\n}\n\ndeclare var MSGraphicsTrust: {\n    prototype: MSGraphicsTrust;\n    new(): MSGraphicsTrust;\n}\n\ninterface MSHTMLWebViewElement extends HTMLElement {\n    canGoBack: boolean;\n    canGoForward: boolean;\n    containsFullScreenElement: boolean;\n    documentTitle: string;\n    height: number;\n    settings: MSWebViewSettings;\n    src: string;\n    width: number;\n    addWebAllowedObject(name: string, applicationObject: any): void;\n    buildLocalStreamUri(contentIdentifier: string, relativePath: string): string;\n    capturePreviewToBlobAsync(): MSWebViewAsyncOperation;\n    captureSelectedContentToDataPackageAsync(): MSWebViewAsyncOperation;\n    getDeferredPermissionRequestById(id: number): DeferredPermissionRequest;\n    getDeferredPermissionRequests(): DeferredPermissionRequest[];\n    goBack(): void;\n    goForward(): void;\n    invokeScriptAsync(scriptName: string, ...args: any[]): MSWebViewAsyncOperation;\n    navigate(uri: string): void;\n    navigateToLocalStreamUri(source: string, streamResolver: any): void;\n    navigateToString(contents: string): void;\n    navigateWithHttpRequestMessage(requestMessage: any): void;\n    refresh(): void;\n    stop(): void;\n}\n\ndeclare var MSHTMLWebViewElement: {\n    prototype: MSHTMLWebViewElement;\n    new(): MSHTMLWebViewElement;\n}\n\ninterface MSInputMethodContext extends EventTarget {\n    compositionEndOffset: number;\n    compositionStartOffset: number;\n    oncandidatewindowhide: (ev: Event) => any;\n    oncandidatewindowshow: (ev: Event) => any;\n    oncandidatewindowupdate: (ev: Event) => any;\n    target: HTMLElement;\n    getCandidateWindowClientRect(): ClientRect;\n    getCompositionAlternatives(): string[];\n    hasComposition(): boolean;\n    isCandidateWindowVisible(): boolean;\n    addEventListener(type: \"MSCandidateWindowHide\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSCandidateWindowShow\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSCandidateWindowUpdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var MSInputMethodContext: {\n    prototype: MSInputMethodContext;\n    new(): MSInputMethodContext;\n}\n\ninterface MSManipulationEvent extends UIEvent {\n    currentState: number;\n    inertiaDestinationX: number;\n    inertiaDestinationY: number;\n    lastState: number;\n    initMSManipulationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, lastState: number, currentState: number): void;\n    MS_MANIPULATION_STATE_ACTIVE: number;\n    MS_MANIPULATION_STATE_CANCELLED: number;\n    MS_MANIPULATION_STATE_COMMITTED: number;\n    MS_MANIPULATION_STATE_DRAGGING: number;\n    MS_MANIPULATION_STATE_INERTIA: number;\n    MS_MANIPULATION_STATE_PRESELECT: number;\n    MS_MANIPULATION_STATE_SELECTING: number;\n    MS_MANIPULATION_STATE_STOPPED: number;\n}\n\ndeclare var MSManipulationEvent: {\n    prototype: MSManipulationEvent;\n    new(): MSManipulationEvent;\n    MS_MANIPULATION_STATE_ACTIVE: number;\n    MS_MANIPULATION_STATE_CANCELLED: number;\n    MS_MANIPULATION_STATE_COMMITTED: number;\n    MS_MANIPULATION_STATE_DRAGGING: number;\n    MS_MANIPULATION_STATE_INERTIA: number;\n    MS_MANIPULATION_STATE_PRESELECT: number;\n    MS_MANIPULATION_STATE_SELECTING: number;\n    MS_MANIPULATION_STATE_STOPPED: number;\n}\n\ninterface MSMediaKeyError {\n    code: number;\n    systemCode: number;\n    MS_MEDIA_KEYERR_CLIENT: number;\n    MS_MEDIA_KEYERR_DOMAIN: number;\n    MS_MEDIA_KEYERR_HARDWARECHANGE: number;\n    MS_MEDIA_KEYERR_OUTPUT: number;\n    MS_MEDIA_KEYERR_SERVICE: number;\n    MS_MEDIA_KEYERR_UNKNOWN: number;\n}\n\ndeclare var MSMediaKeyError: {\n    prototype: MSMediaKeyError;\n    new(): MSMediaKeyError;\n    MS_MEDIA_KEYERR_CLIENT: number;\n    MS_MEDIA_KEYERR_DOMAIN: number;\n    MS_MEDIA_KEYERR_HARDWARECHANGE: number;\n    MS_MEDIA_KEYERR_OUTPUT: number;\n    MS_MEDIA_KEYERR_SERVICE: number;\n    MS_MEDIA_KEYERR_UNKNOWN: number;\n}\n\ninterface MSMediaKeyMessageEvent extends Event {\n    destinationURL: string;\n    message: Uint8Array;\n}\n\ndeclare var MSMediaKeyMessageEvent: {\n    prototype: MSMediaKeyMessageEvent;\n    new(): MSMediaKeyMessageEvent;\n}\n\ninterface MSMediaKeyNeededEvent extends Event {\n    initData: Uint8Array;\n}\n\ndeclare var MSMediaKeyNeededEvent: {\n    prototype: MSMediaKeyNeededEvent;\n    new(): MSMediaKeyNeededEvent;\n}\n\ninterface MSMediaKeySession extends EventTarget {\n    error: MSMediaKeyError;\n    keySystem: string;\n    sessionId: string;\n    close(): void;\n    update(key: Uint8Array): void;\n}\n\ndeclare var MSMediaKeySession: {\n    prototype: MSMediaKeySession;\n    new(): MSMediaKeySession;\n}\n\ninterface MSMediaKeys {\n    keySystem: string;\n    createSession(type: string, initData: Uint8Array, cdmData?: Uint8Array): MSMediaKeySession;\n}\n\ndeclare var MSMediaKeys: {\n    prototype: MSMediaKeys;\n    new(keySystem: string): MSMediaKeys;\n    isTypeSupported(keySystem: string, type?: string): boolean;\n}\n\ninterface MSMimeTypesCollection {\n    length: number;\n}\n\ndeclare var MSMimeTypesCollection: {\n    prototype: MSMimeTypesCollection;\n    new(): MSMimeTypesCollection;\n}\n\ninterface MSPluginsCollection {\n    length: number;\n    refresh(reload?: boolean): void;\n}\n\ndeclare var MSPluginsCollection: {\n    prototype: MSPluginsCollection;\n    new(): MSPluginsCollection;\n}\n\ninterface MSPointerEvent extends MouseEvent {\n    currentPoint: any;\n    height: number;\n    hwTimestamp: number;\n    intermediatePoints: any;\n    isPrimary: boolean;\n    pointerId: number;\n    pointerType: any;\n    pressure: number;\n    rotation: number;\n    tiltX: number;\n    tiltY: number;\n    width: number;\n    getCurrentPoint(element: Element): void;\n    getIntermediatePoints(element: Element): void;\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\n}\n\ndeclare var MSPointerEvent: {\n    prototype: MSPointerEvent;\n    new(typeArg: string, eventInitDict?: PointerEventInit): MSPointerEvent;\n}\n\ninterface MSRangeCollection {\n    length: number;\n    item(index: number): Range;\n    [index: number]: Range;\n}\n\ndeclare var MSRangeCollection: {\n    prototype: MSRangeCollection;\n    new(): MSRangeCollection;\n}\n\ninterface MSSiteModeEvent extends Event {\n    actionURL: string;\n    buttonID: number;\n}\n\ndeclare var MSSiteModeEvent: {\n    prototype: MSSiteModeEvent;\n    new(): MSSiteModeEvent;\n}\n\ninterface MSStream {\n    type: string;\n    msClose(): void;\n    msDetachStream(): any;\n}\n\ndeclare var MSStream: {\n    prototype: MSStream;\n    new(): MSStream;\n}\n\ninterface MSStreamReader extends EventTarget, MSBaseReader {\n    error: DOMError;\n    readAsArrayBuffer(stream: MSStream, size?: number): void;\n    readAsBinaryString(stream: MSStream, size?: number): void;\n    readAsBlob(stream: MSStream, size?: number): void;\n    readAsDataURL(stream: MSStream, size?: number): void;\n    readAsText(stream: MSStream, encoding?: string, size?: number): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var MSStreamReader: {\n    prototype: MSStreamReader;\n    new(): MSStreamReader;\n}\n\ninterface MSWebViewAsyncOperation extends EventTarget {\n    error: DOMError;\n    oncomplete: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    readyState: number;\n    result: any;\n    target: MSHTMLWebViewElement;\n    type: number;\n    start(): void;\n    COMPLETED: number;\n    ERROR: number;\n    STARTED: number;\n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\n    TYPE_INVOKE_SCRIPT: number;\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var MSWebViewAsyncOperation: {\n    prototype: MSWebViewAsyncOperation;\n    new(): MSWebViewAsyncOperation;\n    COMPLETED: number;\n    ERROR: number;\n    STARTED: number;\n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\n    TYPE_INVOKE_SCRIPT: number;\n}\n\ninterface MSWebViewSettings {\n    isIndexedDBEnabled: boolean;\n    isJavaScriptEnabled: boolean;\n}\n\ndeclare var MSWebViewSettings: {\n    prototype: MSWebViewSettings;\n    new(): MSWebViewSettings;\n}\n\ninterface MediaElementAudioSourceNode extends AudioNode {\n}\n\ndeclare var MediaElementAudioSourceNode: {\n    prototype: MediaElementAudioSourceNode;\n    new(): MediaElementAudioSourceNode;\n}\n\ninterface MediaError {\n    code: number;\n    msExtendedCode: number;\n    MEDIA_ERR_ABORTED: number;\n    MEDIA_ERR_DECODE: number;\n    MEDIA_ERR_NETWORK: number;\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\n    MS_MEDIA_ERR_ENCRYPTED: number;\n}\n\ndeclare var MediaError: {\n    prototype: MediaError;\n    new(): MediaError;\n    MEDIA_ERR_ABORTED: number;\n    MEDIA_ERR_DECODE: number;\n    MEDIA_ERR_NETWORK: number;\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\n    MS_MEDIA_ERR_ENCRYPTED: number;\n}\n\ninterface MediaList {\n    length: number;\n    mediaText: string;\n    appendMedium(newMedium: string): void;\n    deleteMedium(oldMedium: string): void;\n    item(index: number): string;\n    toString(): string;\n    [index: number]: string;\n}\n\ndeclare var MediaList: {\n    prototype: MediaList;\n    new(): MediaList;\n}\n\ninterface MediaQueryList {\n    matches: boolean;\n    media: string;\n    addListener(listener: MediaQueryListListener): void;\n    removeListener(listener: MediaQueryListListener): void;\n}\n\ndeclare var MediaQueryList: {\n    prototype: MediaQueryList;\n    new(): MediaQueryList;\n}\n\ninterface MediaSource extends EventTarget {\n    activeSourceBuffers: SourceBufferList;\n    duration: number;\n    readyState: string;\n    sourceBuffers: SourceBufferList;\n    addSourceBuffer(type: string): SourceBuffer;\n    endOfStream(error?: number): void;\n    removeSourceBuffer(sourceBuffer: SourceBuffer): void;\n}\n\ndeclare var MediaSource: {\n    prototype: MediaSource;\n    new(): MediaSource;\n    isTypeSupported(type: string): boolean;\n}\n\ninterface MessageChannel {\n    port1: MessagePort;\n    port2: MessagePort;\n}\n\ndeclare var MessageChannel: {\n    prototype: MessageChannel;\n    new(): MessageChannel;\n}\n\ninterface MessageEvent extends Event {\n    data: any;\n    origin: string;\n    ports: any;\n    source: Window;\n    initMessageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, dataArg: any, originArg: string, lastEventIdArg: string, sourceArg: Window): void;\n}\n\ndeclare var MessageEvent: {\n    prototype: MessageEvent;\n    new(type: string, eventInitDict?: MessageEventInit): MessageEvent;\n}\n\ninterface MessagePort extends EventTarget {\n    onmessage: (ev: MessageEvent) => any;\n    close(): void;\n    postMessage(message?: any, ports?: any): void;\n    start(): void;\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var MessagePort: {\n    prototype: MessagePort;\n    new(): MessagePort;\n}\n\ninterface MimeType {\n    description: string;\n    enabledPlugin: Plugin;\n    suffixes: string;\n    type: string;\n}\n\ndeclare var MimeType: {\n    prototype: MimeType;\n    new(): MimeType;\n}\n\ninterface MimeTypeArray {\n    length: number;\n    item(index: number): Plugin;\n    namedItem(type: string): Plugin;\n    [index: number]: Plugin;\n}\n\ndeclare var MimeTypeArray: {\n    prototype: MimeTypeArray;\n    new(): MimeTypeArray;\n}\n\ninterface MouseEvent extends UIEvent {\n    altKey: boolean;\n    button: number;\n    buttons: number;\n    clientX: number;\n    clientY: number;\n    ctrlKey: boolean;\n    fromElement: Element;\n    layerX: number;\n    layerY: number;\n    metaKey: boolean;\n    movementX: number;\n    movementY: number;\n    offsetX: number;\n    offsetY: number;\n    pageX: number;\n    pageY: number;\n    relatedTarget: EventTarget;\n    screenX: number;\n    screenY: number;\n    shiftKey: boolean;\n    toElement: Element;\n    which: number;\n    x: number;\n    y: number;\n    getModifierState(keyArg: string): boolean;\n    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget): void;\n}\n\ndeclare var MouseEvent: {\n    prototype: MouseEvent;\n    new(typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n}\n\ninterface MouseWheelEvent extends MouseEvent {\n    wheelDelta: number;\n    wheelDeltaX: number;\n    wheelDeltaY: number;\n    initMouseWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, wheelDeltaArg: number): void;\n}\n\ndeclare var MouseWheelEvent: {\n    prototype: MouseWheelEvent;\n    new(): MouseWheelEvent;\n}\n\ninterface MutationEvent extends Event {\n    attrChange: number;\n    attrName: string;\n    newValue: string;\n    prevValue: string;\n    relatedNode: Node;\n    initMutationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void;\n    ADDITION: number;\n    MODIFICATION: number;\n    REMOVAL: number;\n}\n\ndeclare var MutationEvent: {\n    prototype: MutationEvent;\n    new(): MutationEvent;\n    ADDITION: number;\n    MODIFICATION: number;\n    REMOVAL: number;\n}\n\ninterface MutationObserver {\n    disconnect(): void;\n    observe(target: Node, options: MutationObserverInit): void;\n    takeRecords(): MutationRecord[];\n}\n\ndeclare var MutationObserver: {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\ninterface MutationRecord {\n    addedNodes: NodeList;\n    attributeName: string;\n    attributeNamespace: string;\n    nextSibling: Node;\n    oldValue: string;\n    previousSibling: Node;\n    removedNodes: NodeList;\n    target: Node;\n    type: string;\n}\n\ndeclare var MutationRecord: {\n    prototype: MutationRecord;\n    new(): MutationRecord;\n}\n\ninterface NamedNodeMap {\n    length: number;\n    getNamedItem(name: string): Attr;\n    getNamedItemNS(namespaceURI: string, localName: string): Attr;\n    item(index: number): Attr;\n    removeNamedItem(name: string): Attr;\n    removeNamedItemNS(namespaceURI: string, localName: string): Attr;\n    setNamedItem(arg: Attr): Attr;\n    setNamedItemNS(arg: Attr): Attr;\n    [index: number]: Attr;\n}\n\ndeclare var NamedNodeMap: {\n    prototype: NamedNodeMap;\n    new(): NamedNodeMap;\n}\n\ninterface NavigationCompletedEvent extends NavigationEvent {\n    isSuccess: boolean;\n    webErrorStatus: number;\n}\n\ndeclare var NavigationCompletedEvent: {\n    prototype: NavigationCompletedEvent;\n    new(): NavigationCompletedEvent;\n}\n\ninterface NavigationEvent extends Event {\n    uri: string;\n}\n\ndeclare var NavigationEvent: {\n    prototype: NavigationEvent;\n    new(): NavigationEvent;\n}\n\ninterface NavigationEventWithReferrer extends NavigationEvent {\n    referer: string;\n}\n\ndeclare var NavigationEventWithReferrer: {\n    prototype: NavigationEventWithReferrer;\n    new(): NavigationEventWithReferrer;\n}\n\ninterface Navigator extends Object, NavigatorID, NavigatorOnLine, NavigatorContentUtils, NavigatorStorageUtils, NavigatorGeolocation, MSNavigatorDoNotTrack, MSFileSaver {\n    appCodeName: string;\n    appMinorVersion: string;\n    browserLanguage: string;\n    connectionSpeed: number;\n    cookieEnabled: boolean;\n    cpuClass: string;\n    language: string;\n    maxTouchPoints: number;\n    mimeTypes: MSMimeTypesCollection;\n    msManipulationViewsEnabled: boolean;\n    msMaxTouchPoints: number;\n    msPointerEnabled: boolean;\n    plugins: MSPluginsCollection;\n    pointerEnabled: boolean;\n    systemLanguage: string;\n    userLanguage: string;\n    webdriver: boolean;\n    getGamepads(): Gamepad[];\n    javaEnabled(): boolean;\n    msLaunchUri(uri: string, successCallback?: MSLaunchUriCallback, noHandlerCallback?: MSLaunchUriCallback): void;\n    vibrate(pattern: number | number[]): boolean;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Navigator: {\n    prototype: Navigator;\n    new(): Navigator;\n}\n\ninterface Node extends EventTarget {\n    attributes: NamedNodeMap;\n    baseURI: string;\n    childNodes: NodeList;\n    firstChild: Node;\n    lastChild: Node;\n    localName: string;\n    namespaceURI: string;\n    nextSibling: Node;\n    nodeName: string;\n    nodeType: number;\n    nodeValue: string;\n    ownerDocument: Document;\n    parentElement: HTMLElement;\n    parentNode: Node;\n    prefix: string;\n    previousSibling: Node;\n    textContent: string;\n    appendChild(newChild: Node): Node;\n    cloneNode(deep?: boolean): Node;\n    compareDocumentPosition(other: Node): number;\n    hasAttributes(): boolean;\n    hasChildNodes(): boolean;\n    insertBefore(newChild: Node, refChild?: Node): Node;\n    isDefaultNamespace(namespaceURI: string): boolean;\n    isEqualNode(arg: Node): boolean;\n    isSameNode(other: Node): boolean;\n    lookupNamespaceURI(prefix: string): string;\n    lookupPrefix(namespaceURI: string): string;\n    normalize(): void;\n    removeChild(oldChild: Node): Node;\n    replaceChild(newChild: Node, oldChild: Node): Node;\n    contains(node: Node): boolean;\n    ATTRIBUTE_NODE: number;\n    CDATA_SECTION_NODE: number;\n    COMMENT_NODE: number;\n    DOCUMENT_FRAGMENT_NODE: number;\n    DOCUMENT_NODE: number;\n    DOCUMENT_POSITION_CONTAINED_BY: number;\n    DOCUMENT_POSITION_CONTAINS: number;\n    DOCUMENT_POSITION_DISCONNECTED: number;\n    DOCUMENT_POSITION_FOLLOWING: number;\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\n    DOCUMENT_POSITION_PRECEDING: number;\n    DOCUMENT_TYPE_NODE: number;\n    ELEMENT_NODE: number;\n    ENTITY_NODE: number;\n    ENTITY_REFERENCE_NODE: number;\n    NOTATION_NODE: number;\n    PROCESSING_INSTRUCTION_NODE: number;\n    TEXT_NODE: number;\n}\n\ndeclare var Node: {\n    prototype: Node;\n    new(): Node;\n    ATTRIBUTE_NODE: number;\n    CDATA_SECTION_NODE: number;\n    COMMENT_NODE: number;\n    DOCUMENT_FRAGMENT_NODE: number;\n    DOCUMENT_NODE: number;\n    DOCUMENT_POSITION_CONTAINED_BY: number;\n    DOCUMENT_POSITION_CONTAINS: number;\n    DOCUMENT_POSITION_DISCONNECTED: number;\n    DOCUMENT_POSITION_FOLLOWING: number;\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\n    DOCUMENT_POSITION_PRECEDING: number;\n    DOCUMENT_TYPE_NODE: number;\n    ELEMENT_NODE: number;\n    ENTITY_NODE: number;\n    ENTITY_REFERENCE_NODE: number;\n    NOTATION_NODE: number;\n    PROCESSING_INSTRUCTION_NODE: number;\n    TEXT_NODE: number;\n}\n\ninterface NodeFilter {\n    acceptNode(n: Node): number;\n}\n\ndeclare var NodeFilter: {\n    FILTER_ACCEPT: number;\n    FILTER_REJECT: number;\n    FILTER_SKIP: number;\n    SHOW_ALL: number;\n    SHOW_ATTRIBUTE: number;\n    SHOW_CDATA_SECTION: number;\n    SHOW_COMMENT: number;\n    SHOW_DOCUMENT: number;\n    SHOW_DOCUMENT_FRAGMENT: number;\n    SHOW_DOCUMENT_TYPE: number;\n    SHOW_ELEMENT: number;\n    SHOW_ENTITY: number;\n    SHOW_ENTITY_REFERENCE: number;\n    SHOW_NOTATION: number;\n    SHOW_PROCESSING_INSTRUCTION: number;\n    SHOW_TEXT: number;\n}\n\ninterface NodeIterator {\n    expandEntityReferences: boolean;\n    filter: NodeFilter;\n    root: Node;\n    whatToShow: number;\n    detach(): void;\n    nextNode(): Node;\n    previousNode(): Node;\n}\n\ndeclare var NodeIterator: {\n    prototype: NodeIterator;\n    new(): NodeIterator;\n}\n\ninterface NodeList {\n    length: number;\n    item(index: number): Node;\n    [index: number]: Node;\n}\n\ndeclare var NodeList: {\n    prototype: NodeList;\n    new(): NodeList;\n}\n\ninterface OES_element_index_uint {\n}\n\ndeclare var OES_element_index_uint: {\n    prototype: OES_element_index_uint;\n    new(): OES_element_index_uint;\n}\n\ninterface OES_standard_derivatives {\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\n}\n\ndeclare var OES_standard_derivatives: {\n    prototype: OES_standard_derivatives;\n    new(): OES_standard_derivatives;\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\n}\n\ninterface OES_texture_float {\n}\n\ndeclare var OES_texture_float: {\n    prototype: OES_texture_float;\n    new(): OES_texture_float;\n}\n\ninterface OES_texture_float_linear {\n}\n\ndeclare var OES_texture_float_linear: {\n    prototype: OES_texture_float_linear;\n    new(): OES_texture_float_linear;\n}\n\ninterface OfflineAudioCompletionEvent extends Event {\n    renderedBuffer: AudioBuffer;\n}\n\ndeclare var OfflineAudioCompletionEvent: {\n    prototype: OfflineAudioCompletionEvent;\n    new(): OfflineAudioCompletionEvent;\n}\n\ninterface OfflineAudioContext extends AudioContext {\n    oncomplete: (ev: Event) => any;\n    startRendering(): void;\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var OfflineAudioContext: {\n    prototype: OfflineAudioContext;\n    new(numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext;\n}\n\ninterface OscillatorNode extends AudioNode {\n    detune: AudioParam;\n    frequency: AudioParam;\n    onended: (ev: Event) => any;\n    type: string;\n    setPeriodicWave(periodicWave: PeriodicWave): void;\n    start(when?: number): void;\n    stop(when?: number): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var OscillatorNode: {\n    prototype: OscillatorNode;\n    new(): OscillatorNode;\n}\n\ninterface PageTransitionEvent extends Event {\n    persisted: boolean;\n}\n\ndeclare var PageTransitionEvent: {\n    prototype: PageTransitionEvent;\n    new(): PageTransitionEvent;\n}\n\ninterface PannerNode extends AudioNode {\n    coneInnerAngle: number;\n    coneOuterAngle: number;\n    coneOuterGain: number;\n    distanceModel: string;\n    maxDistance: number;\n    panningModel: string;\n    refDistance: number;\n    rolloffFactor: number;\n    setOrientation(x: number, y: number, z: number): void;\n    setPosition(x: number, y: number, z: number): void;\n    setVelocity(x: number, y: number, z: number): void;\n}\n\ndeclare var PannerNode: {\n    prototype: PannerNode;\n    new(): PannerNode;\n}\n\ninterface PerfWidgetExternal {\n    activeNetworkRequestCount: number;\n    averageFrameTime: number;\n    averagePaintTime: number;\n    extraInformationEnabled: boolean;\n    independentRenderingEnabled: boolean;\n    irDisablingContentString: string;\n    irStatusAvailable: boolean;\n    maxCpuSpeed: number;\n    paintRequestsPerSecond: number;\n    performanceCounter: number;\n    performanceCounterFrequency: number;\n    addEventListener(eventType: string, callback: Function): void;\n    getMemoryUsage(): number;\n    getProcessCpuUsage(): number;\n    getRecentCpuUsage(last: number): any;\n    getRecentFrames(last: number): any;\n    getRecentMemoryUsage(last: number): any;\n    getRecentPaintRequests(last: number): any;\n    removeEventListener(eventType: string, callback: Function): void;\n    repositionWindow(x: number, y: number): void;\n    resizeWindow(width: number, height: number): void;\n}\n\ndeclare var PerfWidgetExternal: {\n    prototype: PerfWidgetExternal;\n    new(): PerfWidgetExternal;\n}\n\ninterface Performance {\n    navigation: PerformanceNavigation;\n    timing: PerformanceTiming;\n    clearMarks(markName?: string): void;\n    clearMeasures(measureName?: string): void;\n    clearResourceTimings(): void;\n    getEntries(): any;\n    getEntriesByName(name: string, entryType?: string): any;\n    getEntriesByType(entryType: string): any;\n    getMarks(markName?: string): any;\n    getMeasures(measureName?: string): any;\n    mark(markName: string): void;\n    measure(measureName: string, startMarkName?: string, endMarkName?: string): void;\n    now(): number;\n    setResourceTimingBufferSize(maxSize: number): void;\n    toJSON(): any;\n}\n\ndeclare var Performance: {\n    prototype: Performance;\n    new(): Performance;\n}\n\ninterface PerformanceEntry {\n    duration: number;\n    entryType: string;\n    name: string;\n    startTime: number;\n}\n\ndeclare var PerformanceEntry: {\n    prototype: PerformanceEntry;\n    new(): PerformanceEntry;\n}\n\ninterface PerformanceMark extends PerformanceEntry {\n}\n\ndeclare var PerformanceMark: {\n    prototype: PerformanceMark;\n    new(): PerformanceMark;\n}\n\ninterface PerformanceMeasure extends PerformanceEntry {\n}\n\ndeclare var PerformanceMeasure: {\n    prototype: PerformanceMeasure;\n    new(): PerformanceMeasure;\n}\n\ninterface PerformanceNavigation {\n    redirectCount: number;\n    type: number;\n    toJSON(): any;\n    TYPE_BACK_FORWARD: number;\n    TYPE_NAVIGATE: number;\n    TYPE_RELOAD: number;\n    TYPE_RESERVED: number;\n}\n\ndeclare var PerformanceNavigation: {\n    prototype: PerformanceNavigation;\n    new(): PerformanceNavigation;\n    TYPE_BACK_FORWARD: number;\n    TYPE_NAVIGATE: number;\n    TYPE_RELOAD: number;\n    TYPE_RESERVED: number;\n}\n\ninterface PerformanceNavigationTiming extends PerformanceEntry {\n    connectEnd: number;\n    connectStart: number;\n    domComplete: number;\n    domContentLoadedEventEnd: number;\n    domContentLoadedEventStart: number;\n    domInteractive: number;\n    domLoading: number;\n    domainLookupEnd: number;\n    domainLookupStart: number;\n    fetchStart: number;\n    loadEventEnd: number;\n    loadEventStart: number;\n    navigationStart: number;\n    redirectCount: number;\n    redirectEnd: number;\n    redirectStart: number;\n    requestStart: number;\n    responseEnd: number;\n    responseStart: number;\n    type: string;\n    unloadEventEnd: number;\n    unloadEventStart: number;\n}\n\ndeclare var PerformanceNavigationTiming: {\n    prototype: PerformanceNavigationTiming;\n    new(): PerformanceNavigationTiming;\n}\n\ninterface PerformanceResourceTiming extends PerformanceEntry {\n    connectEnd: number;\n    connectStart: number;\n    domainLookupEnd: number;\n    domainLookupStart: number;\n    fetchStart: number;\n    initiatorType: string;\n    redirectEnd: number;\n    redirectStart: number;\n    requestStart: number;\n    responseEnd: number;\n    responseStart: number;\n}\n\ndeclare var PerformanceResourceTiming: {\n    prototype: PerformanceResourceTiming;\n    new(): PerformanceResourceTiming;\n}\n\ninterface PerformanceTiming {\n    connectEnd: number;\n    connectStart: number;\n    domComplete: number;\n    domContentLoadedEventEnd: number;\n    domContentLoadedEventStart: number;\n    domInteractive: number;\n    domLoading: number;\n    domainLookupEnd: number;\n    domainLookupStart: number;\n    fetchStart: number;\n    loadEventEnd: number;\n    loadEventStart: number;\n    msFirstPaint: number;\n    navigationStart: number;\n    redirectEnd: number;\n    redirectStart: number;\n    requestStart: number;\n    responseEnd: number;\n    responseStart: number;\n    unloadEventEnd: number;\n    unloadEventStart: number;\n    toJSON(): any;\n}\n\ndeclare var PerformanceTiming: {\n    prototype: PerformanceTiming;\n    new(): PerformanceTiming;\n}\n\ninterface PeriodicWave {\n}\n\ndeclare var PeriodicWave: {\n    prototype: PeriodicWave;\n    new(): PeriodicWave;\n}\n\ninterface PermissionRequest extends DeferredPermissionRequest {\n    state: string;\n    defer(): void;\n}\n\ndeclare var PermissionRequest: {\n    prototype: PermissionRequest;\n    new(): PermissionRequest;\n}\n\ninterface PermissionRequestedEvent extends Event {\n    permissionRequest: PermissionRequest;\n}\n\ndeclare var PermissionRequestedEvent: {\n    prototype: PermissionRequestedEvent;\n    new(): PermissionRequestedEvent;\n}\n\ninterface Plugin {\n    description: string;\n    filename: string;\n    length: number;\n    name: string;\n    version: string;\n    item(index: number): MimeType;\n    namedItem(type: string): MimeType;\n    [index: number]: MimeType;\n}\n\ndeclare var Plugin: {\n    prototype: Plugin;\n    new(): Plugin;\n}\n\ninterface PluginArray {\n    length: number;\n    item(index: number): Plugin;\n    namedItem(name: string): Plugin;\n    refresh(reload?: boolean): void;\n    [index: number]: Plugin;\n}\n\ndeclare var PluginArray: {\n    prototype: PluginArray;\n    new(): PluginArray;\n}\n\ninterface PointerEvent extends MouseEvent {\n    currentPoint: any;\n    height: number;\n    hwTimestamp: number;\n    intermediatePoints: any;\n    isPrimary: boolean;\n    pointerId: number;\n    pointerType: any;\n    pressure: number;\n    rotation: number;\n    tiltX: number;\n    tiltY: number;\n    width: number;\n    getCurrentPoint(element: Element): void;\n    getIntermediatePoints(element: Element): void;\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\n}\n\ndeclare var PointerEvent: {\n    prototype: PointerEvent;\n    new(typeArg: string, eventInitDict?: PointerEventInit): PointerEvent;\n}\n\ninterface PopStateEvent extends Event {\n    state: any;\n    initPopStateEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, stateArg: any): void;\n}\n\ndeclare var PopStateEvent: {\n    prototype: PopStateEvent;\n    new(): PopStateEvent;\n}\n\ninterface Position {\n    coords: Coordinates;\n    timestamp: number;\n}\n\ndeclare var Position: {\n    prototype: Position;\n    new(): Position;\n}\n\ninterface PositionError {\n    code: number;\n    message: string;\n    toString(): string;\n    PERMISSION_DENIED: number;\n    POSITION_UNAVAILABLE: number;\n    TIMEOUT: number;\n}\n\ndeclare var PositionError: {\n    prototype: PositionError;\n    new(): PositionError;\n    PERMISSION_DENIED: number;\n    POSITION_UNAVAILABLE: number;\n    TIMEOUT: number;\n}\n\ninterface ProcessingInstruction extends CharacterData {\n    target: string;\n}\n\ndeclare var ProcessingInstruction: {\n    prototype: ProcessingInstruction;\n    new(): ProcessingInstruction;\n}\n\ninterface ProgressEvent extends Event {\n    lengthComputable: boolean;\n    loaded: number;\n    total: number;\n    initProgressEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, lengthComputableArg: boolean, loadedArg: number, totalArg: number): void;\n}\n\ndeclare var ProgressEvent: {\n    prototype: ProgressEvent;\n    new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent;\n}\n\ninterface Range {\n    collapsed: boolean;\n    commonAncestorContainer: Node;\n    endContainer: Node;\n    endOffset: number;\n    startContainer: Node;\n    startOffset: number;\n    cloneContents(): DocumentFragment;\n    cloneRange(): Range;\n    collapse(toStart: boolean): void;\n    compareBoundaryPoints(how: number, sourceRange: Range): number;\n    createContextualFragment(fragment: string): DocumentFragment;\n    deleteContents(): void;\n    detach(): void;\n    expand(Unit: string): boolean;\n    extractContents(): DocumentFragment;\n    getBoundingClientRect(): ClientRect;\n    getClientRects(): ClientRectList;\n    insertNode(newNode: Node): void;\n    selectNode(refNode: Node): void;\n    selectNodeContents(refNode: Node): void;\n    setEnd(refNode: Node, offset: number): void;\n    setEndAfter(refNode: Node): void;\n    setEndBefore(refNode: Node): void;\n    setStart(refNode: Node, offset: number): void;\n    setStartAfter(refNode: Node): void;\n    setStartBefore(refNode: Node): void;\n    surroundContents(newParent: Node): void;\n    toString(): string;\n    END_TO_END: number;\n    END_TO_START: number;\n    START_TO_END: number;\n    START_TO_START: number;\n}\n\ndeclare var Range: {\n    prototype: Range;\n    new(): Range;\n    END_TO_END: number;\n    END_TO_START: number;\n    START_TO_END: number;\n    START_TO_START: number;\n}\n\ninterface SVGAElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference {\n    target: SVGAnimatedString;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGAElement: {\n    prototype: SVGAElement;\n    new(): SVGAElement;\n}\n\ninterface SVGAngle {\n    unitType: number;\n    value: number;\n    valueAsString: string;\n    valueInSpecifiedUnits: number;\n    convertToSpecifiedUnits(unitType: number): void;\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\n    SVG_ANGLETYPE_DEG: number;\n    SVG_ANGLETYPE_GRAD: number;\n    SVG_ANGLETYPE_RAD: number;\n    SVG_ANGLETYPE_UNKNOWN: number;\n    SVG_ANGLETYPE_UNSPECIFIED: number;\n}\n\ndeclare var SVGAngle: {\n    prototype: SVGAngle;\n    new(): SVGAngle;\n    SVG_ANGLETYPE_DEG: number;\n    SVG_ANGLETYPE_GRAD: number;\n    SVG_ANGLETYPE_RAD: number;\n    SVG_ANGLETYPE_UNKNOWN: number;\n    SVG_ANGLETYPE_UNSPECIFIED: number;\n}\n\ninterface SVGAnimatedAngle {\n    animVal: SVGAngle;\n    baseVal: SVGAngle;\n}\n\ndeclare var SVGAnimatedAngle: {\n    prototype: SVGAnimatedAngle;\n    new(): SVGAnimatedAngle;\n}\n\ninterface SVGAnimatedBoolean {\n    animVal: boolean;\n    baseVal: boolean;\n}\n\ndeclare var SVGAnimatedBoolean: {\n    prototype: SVGAnimatedBoolean;\n    new(): SVGAnimatedBoolean;\n}\n\ninterface SVGAnimatedEnumeration {\n    animVal: number;\n    baseVal: number;\n}\n\ndeclare var SVGAnimatedEnumeration: {\n    prototype: SVGAnimatedEnumeration;\n    new(): SVGAnimatedEnumeration;\n}\n\ninterface SVGAnimatedInteger {\n    animVal: number;\n    baseVal: number;\n}\n\ndeclare var SVGAnimatedInteger: {\n    prototype: SVGAnimatedInteger;\n    new(): SVGAnimatedInteger;\n}\n\ninterface SVGAnimatedLength {\n    animVal: SVGLength;\n    baseVal: SVGLength;\n}\n\ndeclare var SVGAnimatedLength: {\n    prototype: SVGAnimatedLength;\n    new(): SVGAnimatedLength;\n}\n\ninterface SVGAnimatedLengthList {\n    animVal: SVGLengthList;\n    baseVal: SVGLengthList;\n}\n\ndeclare var SVGAnimatedLengthList: {\n    prototype: SVGAnimatedLengthList;\n    new(): SVGAnimatedLengthList;\n}\n\ninterface SVGAnimatedNumber {\n    animVal: number;\n    baseVal: number;\n}\n\ndeclare var SVGAnimatedNumber: {\n    prototype: SVGAnimatedNumber;\n    new(): SVGAnimatedNumber;\n}\n\ninterface SVGAnimatedNumberList {\n    animVal: SVGNumberList;\n    baseVal: SVGNumberList;\n}\n\ndeclare var SVGAnimatedNumberList: {\n    prototype: SVGAnimatedNumberList;\n    new(): SVGAnimatedNumberList;\n}\n\ninterface SVGAnimatedPreserveAspectRatio {\n    animVal: SVGPreserveAspectRatio;\n    baseVal: SVGPreserveAspectRatio;\n}\n\ndeclare var SVGAnimatedPreserveAspectRatio: {\n    prototype: SVGAnimatedPreserveAspectRatio;\n    new(): SVGAnimatedPreserveAspectRatio;\n}\n\ninterface SVGAnimatedRect {\n    animVal: SVGRect;\n    baseVal: SVGRect;\n}\n\ndeclare var SVGAnimatedRect: {\n    prototype: SVGAnimatedRect;\n    new(): SVGAnimatedRect;\n}\n\ninterface SVGAnimatedString {\n    animVal: string;\n    baseVal: string;\n}\n\ndeclare var SVGAnimatedString: {\n    prototype: SVGAnimatedString;\n    new(): SVGAnimatedString;\n}\n\ninterface SVGAnimatedTransformList {\n    animVal: SVGTransformList;\n    baseVal: SVGTransformList;\n}\n\ndeclare var SVGAnimatedTransformList: {\n    prototype: SVGAnimatedTransformList;\n    new(): SVGAnimatedTransformList;\n}\n\ninterface SVGCircleElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\n    cx: SVGAnimatedLength;\n    cy: SVGAnimatedLength;\n    r: SVGAnimatedLength;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGCircleElement: {\n    prototype: SVGCircleElement;\n    new(): SVGCircleElement;\n}\n\ninterface SVGClipPathElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGUnitTypes {\n    clipPathUnits: SVGAnimatedEnumeration;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGClipPathElement: {\n    prototype: SVGClipPathElement;\n    new(): SVGClipPathElement;\n}\n\ninterface SVGComponentTransferFunctionElement extends SVGElement {\n    amplitude: SVGAnimatedNumber;\n    exponent: SVGAnimatedNumber;\n    intercept: SVGAnimatedNumber;\n    offset: SVGAnimatedNumber;\n    slope: SVGAnimatedNumber;\n    tableValues: SVGAnimatedNumberList;\n    type: SVGAnimatedEnumeration;\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\n}\n\ndeclare var SVGComponentTransferFunctionElement: {\n    prototype: SVGComponentTransferFunctionElement;\n    new(): SVGComponentTransferFunctionElement;\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\n}\n\ninterface SVGDefsElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGDefsElement: {\n    prototype: SVGDefsElement;\n    new(): SVGDefsElement;\n}\n\ninterface SVGDescElement extends SVGElement, SVGStylable, SVGLangSpace {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGDescElement: {\n    prototype: SVGDescElement;\n    new(): SVGDescElement;\n}\n\ninterface SVGElement extends Element {\n    id: string;\n    onclick: (ev: MouseEvent) => any;\n    ondblclick: (ev: MouseEvent) => any;\n    onfocusin: (ev: FocusEvent) => any;\n    onfocusout: (ev: FocusEvent) => any;\n    onload: (ev: Event) => any;\n    onmousedown: (ev: MouseEvent) => any;\n    onmousemove: (ev: MouseEvent) => any;\n    onmouseout: (ev: MouseEvent) => any;\n    onmouseover: (ev: MouseEvent) => any;\n    onmouseup: (ev: MouseEvent) => any;\n    ownerSVGElement: SVGSVGElement;\n    viewportElement: SVGElement;\n    xmlbase: string;\n    className: any;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGElement: {\n    prototype: SVGElement;\n    new(): SVGElement;\n}\n\ninterface SVGElementInstance extends EventTarget {\n    childNodes: SVGElementInstanceList;\n    correspondingElement: SVGElement;\n    correspondingUseElement: SVGUseElement;\n    firstChild: SVGElementInstance;\n    lastChild: SVGElementInstance;\n    nextSibling: SVGElementInstance;\n    parentNode: SVGElementInstance;\n    previousSibling: SVGElementInstance;\n}\n\ndeclare var SVGElementInstance: {\n    prototype: SVGElementInstance;\n    new(): SVGElementInstance;\n}\n\ninterface SVGElementInstanceList {\n    length: number;\n    item(index: number): SVGElementInstance;\n}\n\ndeclare var SVGElementInstanceList: {\n    prototype: SVGElementInstanceList;\n    new(): SVGElementInstanceList;\n}\n\ninterface SVGEllipseElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\n    cx: SVGAnimatedLength;\n    cy: SVGAnimatedLength;\n    rx: SVGAnimatedLength;\n    ry: SVGAnimatedLength;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGEllipseElement: {\n    prototype: SVGEllipseElement;\n    new(): SVGEllipseElement;\n}\n\ninterface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    in2: SVGAnimatedString;\n    mode: SVGAnimatedEnumeration;\n    SVG_FEBLEND_MODE_COLOR: number;\n    SVG_FEBLEND_MODE_COLOR_BURN: number;\n    SVG_FEBLEND_MODE_COLOR_DODGE: number;\n    SVG_FEBLEND_MODE_DARKEN: number;\n    SVG_FEBLEND_MODE_DIFFERENCE: number;\n    SVG_FEBLEND_MODE_EXCLUSION: number;\n    SVG_FEBLEND_MODE_HARD_LIGHT: number;\n    SVG_FEBLEND_MODE_HUE: number;\n    SVG_FEBLEND_MODE_LIGHTEN: number;\n    SVG_FEBLEND_MODE_LUMINOSITY: number;\n    SVG_FEBLEND_MODE_MULTIPLY: number;\n    SVG_FEBLEND_MODE_NORMAL: number;\n    SVG_FEBLEND_MODE_OVERLAY: number;\n    SVG_FEBLEND_MODE_SATURATION: number;\n    SVG_FEBLEND_MODE_SCREEN: number;\n    SVG_FEBLEND_MODE_SOFT_LIGHT: number;\n    SVG_FEBLEND_MODE_UNKNOWN: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEBlendElement: {\n    prototype: SVGFEBlendElement;\n    new(): SVGFEBlendElement;\n    SVG_FEBLEND_MODE_COLOR: number;\n    SVG_FEBLEND_MODE_COLOR_BURN: number;\n    SVG_FEBLEND_MODE_COLOR_DODGE: number;\n    SVG_FEBLEND_MODE_DARKEN: number;\n    SVG_FEBLEND_MODE_DIFFERENCE: number;\n    SVG_FEBLEND_MODE_EXCLUSION: number;\n    SVG_FEBLEND_MODE_HARD_LIGHT: number;\n    SVG_FEBLEND_MODE_HUE: number;\n    SVG_FEBLEND_MODE_LIGHTEN: number;\n    SVG_FEBLEND_MODE_LUMINOSITY: number;\n    SVG_FEBLEND_MODE_MULTIPLY: number;\n    SVG_FEBLEND_MODE_NORMAL: number;\n    SVG_FEBLEND_MODE_OVERLAY: number;\n    SVG_FEBLEND_MODE_SATURATION: number;\n    SVG_FEBLEND_MODE_SCREEN: number;\n    SVG_FEBLEND_MODE_SOFT_LIGHT: number;\n    SVG_FEBLEND_MODE_UNKNOWN: number;\n}\n\ninterface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    type: SVGAnimatedEnumeration;\n    values: SVGAnimatedNumberList;\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEColorMatrixElement: {\n    prototype: SVGFEColorMatrixElement;\n    new(): SVGFEColorMatrixElement;\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\n}\n\ninterface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEComponentTransferElement: {\n    prototype: SVGFEComponentTransferElement;\n    new(): SVGFEComponentTransferElement;\n}\n\ninterface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    in2: SVGAnimatedString;\n    k1: SVGAnimatedNumber;\n    k2: SVGAnimatedNumber;\n    k3: SVGAnimatedNumber;\n    k4: SVGAnimatedNumber;\n    operator: SVGAnimatedEnumeration;\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFECompositeElement: {\n    prototype: SVGFECompositeElement;\n    new(): SVGFECompositeElement;\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\n}\n\ninterface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    bias: SVGAnimatedNumber;\n    divisor: SVGAnimatedNumber;\n    edgeMode: SVGAnimatedEnumeration;\n    in1: SVGAnimatedString;\n    kernelMatrix: SVGAnimatedNumberList;\n    kernelUnitLengthX: SVGAnimatedNumber;\n    kernelUnitLengthY: SVGAnimatedNumber;\n    orderX: SVGAnimatedInteger;\n    orderY: SVGAnimatedInteger;\n    preserveAlpha: SVGAnimatedBoolean;\n    targetX: SVGAnimatedInteger;\n    targetY: SVGAnimatedInteger;\n    SVG_EDGEMODE_DUPLICATE: number;\n    SVG_EDGEMODE_NONE: number;\n    SVG_EDGEMODE_UNKNOWN: number;\n    SVG_EDGEMODE_WRAP: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEConvolveMatrixElement: {\n    prototype: SVGFEConvolveMatrixElement;\n    new(): SVGFEConvolveMatrixElement;\n    SVG_EDGEMODE_DUPLICATE: number;\n    SVG_EDGEMODE_NONE: number;\n    SVG_EDGEMODE_UNKNOWN: number;\n    SVG_EDGEMODE_WRAP: number;\n}\n\ninterface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    diffuseConstant: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    kernelUnitLengthX: SVGAnimatedNumber;\n    kernelUnitLengthY: SVGAnimatedNumber;\n    surfaceScale: SVGAnimatedNumber;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEDiffuseLightingElement: {\n    prototype: SVGFEDiffuseLightingElement;\n    new(): SVGFEDiffuseLightingElement;\n}\n\ninterface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    in2: SVGAnimatedString;\n    scale: SVGAnimatedNumber;\n    xChannelSelector: SVGAnimatedEnumeration;\n    yChannelSelector: SVGAnimatedEnumeration;\n    SVG_CHANNEL_A: number;\n    SVG_CHANNEL_B: number;\n    SVG_CHANNEL_G: number;\n    SVG_CHANNEL_R: number;\n    SVG_CHANNEL_UNKNOWN: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEDisplacementMapElement: {\n    prototype: SVGFEDisplacementMapElement;\n    new(): SVGFEDisplacementMapElement;\n    SVG_CHANNEL_A: number;\n    SVG_CHANNEL_B: number;\n    SVG_CHANNEL_G: number;\n    SVG_CHANNEL_R: number;\n    SVG_CHANNEL_UNKNOWN: number;\n}\n\ninterface SVGFEDistantLightElement extends SVGElement {\n    azimuth: SVGAnimatedNumber;\n    elevation: SVGAnimatedNumber;\n}\n\ndeclare var SVGFEDistantLightElement: {\n    prototype: SVGFEDistantLightElement;\n    new(): SVGFEDistantLightElement;\n}\n\ninterface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEFloodElement: {\n    prototype: SVGFEFloodElement;\n    new(): SVGFEFloodElement;\n}\n\ninterface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {\n}\n\ndeclare var SVGFEFuncAElement: {\n    prototype: SVGFEFuncAElement;\n    new(): SVGFEFuncAElement;\n}\n\ninterface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {\n}\n\ndeclare var SVGFEFuncBElement: {\n    prototype: SVGFEFuncBElement;\n    new(): SVGFEFuncBElement;\n}\n\ninterface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {\n}\n\ndeclare var SVGFEFuncGElement: {\n    prototype: SVGFEFuncGElement;\n    new(): SVGFEFuncGElement;\n}\n\ninterface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {\n}\n\ndeclare var SVGFEFuncRElement: {\n    prototype: SVGFEFuncRElement;\n    new(): SVGFEFuncRElement;\n}\n\ninterface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    stdDeviationX: SVGAnimatedNumber;\n    stdDeviationY: SVGAnimatedNumber;\n    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEGaussianBlurElement: {\n    prototype: SVGFEGaussianBlurElement;\n    new(): SVGFEGaussianBlurElement;\n}\n\ninterface SVGFEImageElement extends SVGElement, SVGFilterPrimitiveStandardAttributes, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired {\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEImageElement: {\n    prototype: SVGFEImageElement;\n    new(): SVGFEImageElement;\n}\n\ninterface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEMergeElement: {\n    prototype: SVGFEMergeElement;\n    new(): SVGFEMergeElement;\n}\n\ninterface SVGFEMergeNodeElement extends SVGElement {\n    in1: SVGAnimatedString;\n}\n\ndeclare var SVGFEMergeNodeElement: {\n    prototype: SVGFEMergeNodeElement;\n    new(): SVGFEMergeNodeElement;\n}\n\ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    operator: SVGAnimatedEnumeration;\n    radiusX: SVGAnimatedNumber;\n    radiusY: SVGAnimatedNumber;\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEMorphologyElement: {\n    prototype: SVGFEMorphologyElement;\n    new(): SVGFEMorphologyElement;\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\n}\n\ninterface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    dx: SVGAnimatedNumber;\n    dy: SVGAnimatedNumber;\n    in1: SVGAnimatedString;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFEOffsetElement: {\n    prototype: SVGFEOffsetElement;\n    new(): SVGFEOffsetElement;\n}\n\ninterface SVGFEPointLightElement extends SVGElement {\n    x: SVGAnimatedNumber;\n    y: SVGAnimatedNumber;\n    z: SVGAnimatedNumber;\n}\n\ndeclare var SVGFEPointLightElement: {\n    prototype: SVGFEPointLightElement;\n    new(): SVGFEPointLightElement;\n}\n\ninterface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    kernelUnitLengthX: SVGAnimatedNumber;\n    kernelUnitLengthY: SVGAnimatedNumber;\n    specularConstant: SVGAnimatedNumber;\n    specularExponent: SVGAnimatedNumber;\n    surfaceScale: SVGAnimatedNumber;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFESpecularLightingElement: {\n    prototype: SVGFESpecularLightingElement;\n    new(): SVGFESpecularLightingElement;\n}\n\ninterface SVGFESpotLightElement extends SVGElement {\n    limitingConeAngle: SVGAnimatedNumber;\n    pointsAtX: SVGAnimatedNumber;\n    pointsAtY: SVGAnimatedNumber;\n    pointsAtZ: SVGAnimatedNumber;\n    specularExponent: SVGAnimatedNumber;\n    x: SVGAnimatedNumber;\n    y: SVGAnimatedNumber;\n    z: SVGAnimatedNumber;\n}\n\ndeclare var SVGFESpotLightElement: {\n    prototype: SVGFESpotLightElement;\n    new(): SVGFESpotLightElement;\n}\n\ninterface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    in1: SVGAnimatedString;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFETileElement: {\n    prototype: SVGFETileElement;\n    new(): SVGFETileElement;\n}\n\ninterface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\n    baseFrequencyX: SVGAnimatedNumber;\n    baseFrequencyY: SVGAnimatedNumber;\n    numOctaves: SVGAnimatedInteger;\n    seed: SVGAnimatedNumber;\n    stitchTiles: SVGAnimatedEnumeration;\n    type: SVGAnimatedEnumeration;\n    SVG_STITCHTYPE_NOSTITCH: number;\n    SVG_STITCHTYPE_STITCH: number;\n    SVG_STITCHTYPE_UNKNOWN: number;\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFETurbulenceElement: {\n    prototype: SVGFETurbulenceElement;\n    new(): SVGFETurbulenceElement;\n    SVG_STITCHTYPE_NOSTITCH: number;\n    SVG_STITCHTYPE_STITCH: number;\n    SVG_STITCHTYPE_UNKNOWN: number;\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\n}\n\ninterface SVGFilterElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired {\n    filterResX: SVGAnimatedInteger;\n    filterResY: SVGAnimatedInteger;\n    filterUnits: SVGAnimatedEnumeration;\n    height: SVGAnimatedLength;\n    primitiveUnits: SVGAnimatedEnumeration;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    y: SVGAnimatedLength;\n    setFilterRes(filterResX: number, filterResY: number): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGFilterElement: {\n    prototype: SVGFilterElement;\n    new(): SVGFilterElement;\n}\n\ninterface SVGForeignObjectElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\n    height: SVGAnimatedLength;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    y: SVGAnimatedLength;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGForeignObjectElement: {\n    prototype: SVGForeignObjectElement;\n    new(): SVGForeignObjectElement;\n}\n\ninterface SVGGElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGGElement: {\n    prototype: SVGGElement;\n    new(): SVGGElement;\n}\n\ninterface SVGGradientElement extends SVGElement, SVGStylable, SVGExternalResourcesRequired, SVGURIReference, SVGUnitTypes {\n    gradientTransform: SVGAnimatedTransformList;\n    gradientUnits: SVGAnimatedEnumeration;\n    spreadMethod: SVGAnimatedEnumeration;\n    SVG_SPREADMETHOD_PAD: number;\n    SVG_SPREADMETHOD_REFLECT: number;\n    SVG_SPREADMETHOD_REPEAT: number;\n    SVG_SPREADMETHOD_UNKNOWN: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGGradientElement: {\n    prototype: SVGGradientElement;\n    new(): SVGGradientElement;\n    SVG_SPREADMETHOD_PAD: number;\n    SVG_SPREADMETHOD_REFLECT: number;\n    SVG_SPREADMETHOD_REPEAT: number;\n    SVG_SPREADMETHOD_UNKNOWN: number;\n}\n\ninterface SVGImageElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference {\n    height: SVGAnimatedLength;\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    y: SVGAnimatedLength;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGImageElement: {\n    prototype: SVGImageElement;\n    new(): SVGImageElement;\n}\n\ninterface SVGLength {\n    unitType: number;\n    value: number;\n    valueAsString: string;\n    valueInSpecifiedUnits: number;\n    convertToSpecifiedUnits(unitType: number): void;\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\n    SVG_LENGTHTYPE_CM: number;\n    SVG_LENGTHTYPE_EMS: number;\n    SVG_LENGTHTYPE_EXS: number;\n    SVG_LENGTHTYPE_IN: number;\n    SVG_LENGTHTYPE_MM: number;\n    SVG_LENGTHTYPE_NUMBER: number;\n    SVG_LENGTHTYPE_PC: number;\n    SVG_LENGTHTYPE_PERCENTAGE: number;\n    SVG_LENGTHTYPE_PT: number;\n    SVG_LENGTHTYPE_PX: number;\n    SVG_LENGTHTYPE_UNKNOWN: number;\n}\n\ndeclare var SVGLength: {\n    prototype: SVGLength;\n    new(): SVGLength;\n    SVG_LENGTHTYPE_CM: number;\n    SVG_LENGTHTYPE_EMS: number;\n    SVG_LENGTHTYPE_EXS: number;\n    SVG_LENGTHTYPE_IN: number;\n    SVG_LENGTHTYPE_MM: number;\n    SVG_LENGTHTYPE_NUMBER: number;\n    SVG_LENGTHTYPE_PC: number;\n    SVG_LENGTHTYPE_PERCENTAGE: number;\n    SVG_LENGTHTYPE_PT: number;\n    SVG_LENGTHTYPE_PX: number;\n    SVG_LENGTHTYPE_UNKNOWN: number;\n}\n\ninterface SVGLengthList {\n    numberOfItems: number;\n    appendItem(newItem: SVGLength): SVGLength;\n    clear(): void;\n    getItem(index: number): SVGLength;\n    initialize(newItem: SVGLength): SVGLength;\n    insertItemBefore(newItem: SVGLength, index: number): SVGLength;\n    removeItem(index: number): SVGLength;\n    replaceItem(newItem: SVGLength, index: number): SVGLength;\n}\n\ndeclare var SVGLengthList: {\n    prototype: SVGLengthList;\n    new(): SVGLengthList;\n}\n\ninterface SVGLineElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\n    x1: SVGAnimatedLength;\n    x2: SVGAnimatedLength;\n    y1: SVGAnimatedLength;\n    y2: SVGAnimatedLength;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGLineElement: {\n    prototype: SVGLineElement;\n    new(): SVGLineElement;\n}\n\ninterface SVGLinearGradientElement extends SVGGradientElement {\n    x1: SVGAnimatedLength;\n    x2: SVGAnimatedLength;\n    y1: SVGAnimatedLength;\n    y2: SVGAnimatedLength;\n}\n\ndeclare var SVGLinearGradientElement: {\n    prototype: SVGLinearGradientElement;\n    new(): SVGLinearGradientElement;\n}\n\ninterface SVGMarkerElement extends SVGElement, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox {\n    markerHeight: SVGAnimatedLength;\n    markerUnits: SVGAnimatedEnumeration;\n    markerWidth: SVGAnimatedLength;\n    orientAngle: SVGAnimatedAngle;\n    orientType: SVGAnimatedEnumeration;\n    refX: SVGAnimatedLength;\n    refY: SVGAnimatedLength;\n    setOrientToAngle(angle: SVGAngle): void;\n    setOrientToAuto(): void;\n    SVG_MARKERUNITS_STROKEWIDTH: number;\n    SVG_MARKERUNITS_UNKNOWN: number;\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\n    SVG_MARKER_ORIENT_ANGLE: number;\n    SVG_MARKER_ORIENT_AUTO: number;\n    SVG_MARKER_ORIENT_UNKNOWN: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGMarkerElement: {\n    prototype: SVGMarkerElement;\n    new(): SVGMarkerElement;\n    SVG_MARKERUNITS_STROKEWIDTH: number;\n    SVG_MARKERUNITS_UNKNOWN: number;\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\n    SVG_MARKER_ORIENT_ANGLE: number;\n    SVG_MARKER_ORIENT_AUTO: number;\n    SVG_MARKER_ORIENT_UNKNOWN: number;\n}\n\ninterface SVGMaskElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGUnitTypes {\n    height: SVGAnimatedLength;\n    maskContentUnits: SVGAnimatedEnumeration;\n    maskUnits: SVGAnimatedEnumeration;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    y: SVGAnimatedLength;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGMaskElement: {\n    prototype: SVGMaskElement;\n    new(): SVGMaskElement;\n}\n\ninterface SVGMatrix {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n    e: number;\n    f: number;\n    flipX(): SVGMatrix;\n    flipY(): SVGMatrix;\n    inverse(): SVGMatrix;\n    multiply(secondMatrix: SVGMatrix): SVGMatrix;\n    rotate(angle: number): SVGMatrix;\n    rotateFromVector(x: number, y: number): SVGMatrix;\n    scale(scaleFactor: number): SVGMatrix;\n    scaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix;\n    skewX(angle: number): SVGMatrix;\n    skewY(angle: number): SVGMatrix;\n    translate(x: number, y: number): SVGMatrix;\n}\n\ndeclare var SVGMatrix: {\n    prototype: SVGMatrix;\n    new(): SVGMatrix;\n}\n\ninterface SVGMetadataElement extends SVGElement {\n}\n\ndeclare var SVGMetadataElement: {\n    prototype: SVGMetadataElement;\n    new(): SVGMetadataElement;\n}\n\ninterface SVGNumber {\n    value: number;\n}\n\ndeclare var SVGNumber: {\n    prototype: SVGNumber;\n    new(): SVGNumber;\n}\n\ninterface SVGNumberList {\n    numberOfItems: number;\n    appendItem(newItem: SVGNumber): SVGNumber;\n    clear(): void;\n    getItem(index: number): SVGNumber;\n    initialize(newItem: SVGNumber): SVGNumber;\n    insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;\n    removeItem(index: number): SVGNumber;\n    replaceItem(newItem: SVGNumber, index: number): SVGNumber;\n}\n\ndeclare var SVGNumberList: {\n    prototype: SVGNumberList;\n    new(): SVGNumberList;\n}\n\ninterface SVGPathElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPathData {\n    createSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcAbs;\n    createSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcRel;\n    createSVGPathSegClosePath(): SVGPathSegClosePath;\n    createSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicAbs;\n    createSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicRel;\n    createSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothAbs;\n    createSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothRel;\n    createSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticAbs;\n    createSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticRel;\n    createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothAbs;\n    createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothRel;\n    createSVGPathSegLinetoAbs(x: number, y: number): SVGPathSegLinetoAbs;\n    createSVGPathSegLinetoHorizontalAbs(x: number): SVGPathSegLinetoHorizontalAbs;\n    createSVGPathSegLinetoHorizontalRel(x: number): SVGPathSegLinetoHorizontalRel;\n    createSVGPathSegLinetoRel(x: number, y: number): SVGPathSegLinetoRel;\n    createSVGPathSegLinetoVerticalAbs(y: number): SVGPathSegLinetoVerticalAbs;\n    createSVGPathSegLinetoVerticalRel(y: number): SVGPathSegLinetoVerticalRel;\n    createSVGPathSegMovetoAbs(x: number, y: number): SVGPathSegMovetoAbs;\n    createSVGPathSegMovetoRel(x: number, y: number): SVGPathSegMovetoRel;\n    getPathSegAtLength(distance: number): number;\n    getPointAtLength(distance: number): SVGPoint;\n    getTotalLength(): number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGPathElement: {\n    prototype: SVGPathElement;\n    new(): SVGPathElement;\n}\n\ninterface SVGPathSeg {\n    pathSegType: number;\n    pathSegTypeAsLetter: string;\n    PATHSEG_ARC_ABS: number;\n    PATHSEG_ARC_REL: number;\n    PATHSEG_CLOSEPATH: number;\n    PATHSEG_CURVETO_CUBIC_ABS: number;\n    PATHSEG_CURVETO_CUBIC_REL: number;\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\n    PATHSEG_LINETO_ABS: number;\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\n    PATHSEG_LINETO_REL: number;\n    PATHSEG_LINETO_VERTICAL_ABS: number;\n    PATHSEG_LINETO_VERTICAL_REL: number;\n    PATHSEG_MOVETO_ABS: number;\n    PATHSEG_MOVETO_REL: number;\n    PATHSEG_UNKNOWN: number;\n}\n\ndeclare var SVGPathSeg: {\n    prototype: SVGPathSeg;\n    new(): SVGPathSeg;\n    PATHSEG_ARC_ABS: number;\n    PATHSEG_ARC_REL: number;\n    PATHSEG_CLOSEPATH: number;\n    PATHSEG_CURVETO_CUBIC_ABS: number;\n    PATHSEG_CURVETO_CUBIC_REL: number;\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\n    PATHSEG_LINETO_ABS: number;\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\n    PATHSEG_LINETO_REL: number;\n    PATHSEG_LINETO_VERTICAL_ABS: number;\n    PATHSEG_LINETO_VERTICAL_REL: number;\n    PATHSEG_MOVETO_ABS: number;\n    PATHSEG_MOVETO_REL: number;\n    PATHSEG_UNKNOWN: number;\n}\n\ninterface SVGPathSegArcAbs extends SVGPathSeg {\n    angle: number;\n    largeArcFlag: boolean;\n    r1: number;\n    r2: number;\n    sweepFlag: boolean;\n    x: number;\n    y: number;\n}\n\ndeclare var SVGPathSegArcAbs: {\n    prototype: SVGPathSegArcAbs;\n    new(): SVGPathSegArcAbs;\n}\n\ninterface SVGPathSegArcRel extends SVGPathSeg {\n    angle: number;\n    largeArcFlag: boolean;\n    r1: number;\n    r2: number;\n    sweepFlag: boolean;\n    x: number;\n    y: number;\n}\n\ndeclare var SVGPathSegArcRel: {\n    prototype: SVGPathSegArcRel;\n    new(): SVGPathSegArcRel;\n}\n\ninterface SVGPathSegClosePath extends SVGPathSeg {\n}\n\ndeclare var SVGPathSegClosePath: {\n    prototype: SVGPathSegClosePath;\n    new(): SVGPathSegClosePath;\n}\n\ninterface SVGPathSegCurvetoCubicAbs extends SVGPathSeg {\n    x: number;\n    x1: number;\n    x2: number;\n    y: number;\n    y1: number;\n    y2: number;\n}\n\ndeclare var SVGPathSegCurvetoCubicAbs: {\n    prototype: SVGPathSegCurvetoCubicAbs;\n    new(): SVGPathSegCurvetoCubicAbs;\n}\n\ninterface SVGPathSegCurvetoCubicRel extends SVGPathSeg {\n    x: number;\n    x1: number;\n    x2: number;\n    y: number;\n    y1: number;\n    y2: number;\n}\n\ndeclare var SVGPathSegCurvetoCubicRel: {\n    prototype: SVGPathSegCurvetoCubicRel;\n    new(): SVGPathSegCurvetoCubicRel;\n}\n\ninterface SVGPathSegCurvetoCubicSmoothAbs extends SVGPathSeg {\n    x: number;\n    x2: number;\n    y: number;\n    y2: number;\n}\n\ndeclare var SVGPathSegCurvetoCubicSmoothAbs: {\n    prototype: SVGPathSegCurvetoCubicSmoothAbs;\n    new(): SVGPathSegCurvetoCubicSmoothAbs;\n}\n\ninterface SVGPathSegCurvetoCubicSmoothRel extends SVGPathSeg {\n    x: number;\n    x2: number;\n    y: number;\n    y2: number;\n}\n\ndeclare var SVGPathSegCurvetoCubicSmoothRel: {\n    prototype: SVGPathSegCurvetoCubicSmoothRel;\n    new(): SVGPathSegCurvetoCubicSmoothRel;\n}\n\ninterface SVGPathSegCurvetoQuadraticAbs extends SVGPathSeg {\n    x: number;\n    x1: number;\n    y: number;\n    y1: number;\n}\n\ndeclare var SVGPathSegCurvetoQuadraticAbs: {\n    prototype: SVGPathSegCurvetoQuadraticAbs;\n    new(): SVGPathSegCurvetoQuadraticAbs;\n}\n\ninterface SVGPathSegCurvetoQuadraticRel extends SVGPathSeg {\n    x: number;\n    x1: number;\n    y: number;\n    y1: number;\n}\n\ndeclare var SVGPathSegCurvetoQuadraticRel: {\n    prototype: SVGPathSegCurvetoQuadraticRel;\n    new(): SVGPathSegCurvetoQuadraticRel;\n}\n\ninterface SVGPathSegCurvetoQuadraticSmoothAbs extends SVGPathSeg {\n    x: number;\n    y: number;\n}\n\ndeclare var SVGPathSegCurvetoQuadraticSmoothAbs: {\n    prototype: SVGPathSegCurvetoQuadraticSmoothAbs;\n    new(): SVGPathSegCurvetoQuadraticSmoothAbs;\n}\n\ninterface SVGPathSegCurvetoQuadraticSmoothRel extends SVGPathSeg {\n    x: number;\n    y: number;\n}\n\ndeclare var SVGPathSegCurvetoQuadraticSmoothRel: {\n    prototype: SVGPathSegCurvetoQuadraticSmoothRel;\n    new(): SVGPathSegCurvetoQuadraticSmoothRel;\n}\n\ninterface SVGPathSegLinetoAbs extends SVGPathSeg {\n    x: number;\n    y: number;\n}\n\ndeclare var SVGPathSegLinetoAbs: {\n    prototype: SVGPathSegLinetoAbs;\n    new(): SVGPathSegLinetoAbs;\n}\n\ninterface SVGPathSegLinetoHorizontalAbs extends SVGPathSeg {\n    x: number;\n}\n\ndeclare var SVGPathSegLinetoHorizontalAbs: {\n    prototype: SVGPathSegLinetoHorizontalAbs;\n    new(): SVGPathSegLinetoHorizontalAbs;\n}\n\ninterface SVGPathSegLinetoHorizontalRel extends SVGPathSeg {\n    x: number;\n}\n\ndeclare var SVGPathSegLinetoHorizontalRel: {\n    prototype: SVGPathSegLinetoHorizontalRel;\n    new(): SVGPathSegLinetoHorizontalRel;\n}\n\ninterface SVGPathSegLinetoRel extends SVGPathSeg {\n    x: number;\n    y: number;\n}\n\ndeclare var SVGPathSegLinetoRel: {\n    prototype: SVGPathSegLinetoRel;\n    new(): SVGPathSegLinetoRel;\n}\n\ninterface SVGPathSegLinetoVerticalAbs extends SVGPathSeg {\n    y: number;\n}\n\ndeclare var SVGPathSegLinetoVerticalAbs: {\n    prototype: SVGPathSegLinetoVerticalAbs;\n    new(): SVGPathSegLinetoVerticalAbs;\n}\n\ninterface SVGPathSegLinetoVerticalRel extends SVGPathSeg {\n    y: number;\n}\n\ndeclare var SVGPathSegLinetoVerticalRel: {\n    prototype: SVGPathSegLinetoVerticalRel;\n    new(): SVGPathSegLinetoVerticalRel;\n}\n\ninterface SVGPathSegList {\n    numberOfItems: number;\n    appendItem(newItem: SVGPathSeg): SVGPathSeg;\n    clear(): void;\n    getItem(index: number): SVGPathSeg;\n    initialize(newItem: SVGPathSeg): SVGPathSeg;\n    insertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg;\n    removeItem(index: number): SVGPathSeg;\n    replaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg;\n}\n\ndeclare var SVGPathSegList: {\n    prototype: SVGPathSegList;\n    new(): SVGPathSegList;\n}\n\ninterface SVGPathSegMovetoAbs extends SVGPathSeg {\n    x: number;\n    y: number;\n}\n\ndeclare var SVGPathSegMovetoAbs: {\n    prototype: SVGPathSegMovetoAbs;\n    new(): SVGPathSegMovetoAbs;\n}\n\ninterface SVGPathSegMovetoRel extends SVGPathSeg {\n    x: number;\n    y: number;\n}\n\ndeclare var SVGPathSegMovetoRel: {\n    prototype: SVGPathSegMovetoRel;\n    new(): SVGPathSegMovetoRel;\n}\n\ninterface SVGPatternElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox, SVGURIReference, SVGUnitTypes {\n    height: SVGAnimatedLength;\n    patternContentUnits: SVGAnimatedEnumeration;\n    patternTransform: SVGAnimatedTransformList;\n    patternUnits: SVGAnimatedEnumeration;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    y: SVGAnimatedLength;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGPatternElement: {\n    prototype: SVGPatternElement;\n    new(): SVGPatternElement;\n}\n\ninterface SVGPoint {\n    x: number;\n    y: number;\n    matrixTransform(matrix: SVGMatrix): SVGPoint;\n}\n\ndeclare var SVGPoint: {\n    prototype: SVGPoint;\n    new(): SVGPoint;\n}\n\ninterface SVGPointList {\n    numberOfItems: number;\n    appendItem(newItem: SVGPoint): SVGPoint;\n    clear(): void;\n    getItem(index: number): SVGPoint;\n    initialize(newItem: SVGPoint): SVGPoint;\n    insertItemBefore(newItem: SVGPoint, index: number): SVGPoint;\n    removeItem(index: number): SVGPoint;\n    replaceItem(newItem: SVGPoint, index: number): SVGPoint;\n}\n\ndeclare var SVGPointList: {\n    prototype: SVGPointList;\n    new(): SVGPointList;\n}\n\ninterface SVGPolygonElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPoints {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGPolygonElement: {\n    prototype: SVGPolygonElement;\n    new(): SVGPolygonElement;\n}\n\ninterface SVGPolylineElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPoints {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGPolylineElement: {\n    prototype: SVGPolylineElement;\n    new(): SVGPolylineElement;\n}\n\ninterface SVGPreserveAspectRatio {\n    align: number;\n    meetOrSlice: number;\n    SVG_MEETORSLICE_MEET: number;\n    SVG_MEETORSLICE_SLICE: number;\n    SVG_MEETORSLICE_UNKNOWN: number;\n    SVG_PRESERVEASPECTRATIO_NONE: number;\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\n}\n\ndeclare var SVGPreserveAspectRatio: {\n    prototype: SVGPreserveAspectRatio;\n    new(): SVGPreserveAspectRatio;\n    SVG_MEETORSLICE_MEET: number;\n    SVG_MEETORSLICE_SLICE: number;\n    SVG_MEETORSLICE_UNKNOWN: number;\n    SVG_PRESERVEASPECTRATIO_NONE: number;\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\n}\n\ninterface SVGRadialGradientElement extends SVGGradientElement {\n    cx: SVGAnimatedLength;\n    cy: SVGAnimatedLength;\n    fx: SVGAnimatedLength;\n    fy: SVGAnimatedLength;\n    r: SVGAnimatedLength;\n}\n\ndeclare var SVGRadialGradientElement: {\n    prototype: SVGRadialGradientElement;\n    new(): SVGRadialGradientElement;\n}\n\ninterface SVGRect {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n}\n\ndeclare var SVGRect: {\n    prototype: SVGRect;\n    new(): SVGRect;\n}\n\ninterface SVGRectElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\n    height: SVGAnimatedLength;\n    rx: SVGAnimatedLength;\n    ry: SVGAnimatedLength;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    y: SVGAnimatedLength;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGRectElement: {\n    prototype: SVGRectElement;\n    new(): SVGRectElement;\n}\n\ninterface SVGSVGElement extends SVGElement, DocumentEvent, SVGLocatable, SVGTests, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox, SVGZoomAndPan {\n    contentScriptType: string;\n    contentStyleType: string;\n    currentScale: number;\n    currentTranslate: SVGPoint;\n    height: SVGAnimatedLength;\n    onabort: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onresize: (ev: UIEvent) => any;\n    onscroll: (ev: UIEvent) => any;\n    onunload: (ev: Event) => any;\n    onzoom: (ev: SVGZoomEvent) => any;\n    pixelUnitToMillimeterX: number;\n    pixelUnitToMillimeterY: number;\n    screenPixelToMillimeterX: number;\n    screenPixelToMillimeterY: number;\n    viewport: SVGRect;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    y: SVGAnimatedLength;\n    checkEnclosure(element: SVGElement, rect: SVGRect): boolean;\n    checkIntersection(element: SVGElement, rect: SVGRect): boolean;\n    createSVGAngle(): SVGAngle;\n    createSVGLength(): SVGLength;\n    createSVGMatrix(): SVGMatrix;\n    createSVGNumber(): SVGNumber;\n    createSVGPoint(): SVGPoint;\n    createSVGRect(): SVGRect;\n    createSVGTransform(): SVGTransform;\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\n    deselectAll(): void;\n    forceRedraw(): void;\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\n    getCurrentTime(): number;\n    getElementById(elementId: string): Element;\n    getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeList;\n    getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeList;\n    pauseAnimations(): void;\n    setCurrentTime(seconds: number): void;\n    suspendRedraw(maxWaitMilliseconds: number): number;\n    unpauseAnimations(): void;\n    unsuspendRedraw(suspendHandleID: number): void;\n    unsuspendRedrawAll(): void;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"SVGAbort\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"SVGError\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"SVGUnload\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"SVGZoom\", listener: (ev: SVGZoomEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGSVGElement: {\n    prototype: SVGSVGElement;\n    new(): SVGSVGElement;\n}\n\ninterface SVGScriptElement extends SVGElement, SVGExternalResourcesRequired, SVGURIReference {\n    type: string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGScriptElement: {\n    prototype: SVGScriptElement;\n    new(): SVGScriptElement;\n}\n\ninterface SVGStopElement extends SVGElement, SVGStylable {\n    offset: SVGAnimatedNumber;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGStopElement: {\n    prototype: SVGStopElement;\n    new(): SVGStopElement;\n}\n\ninterface SVGStringList {\n    numberOfItems: number;\n    appendItem(newItem: string): string;\n    clear(): void;\n    getItem(index: number): string;\n    initialize(newItem: string): string;\n    insertItemBefore(newItem: string, index: number): string;\n    removeItem(index: number): string;\n    replaceItem(newItem: string, index: number): string;\n}\n\ndeclare var SVGStringList: {\n    prototype: SVGStringList;\n    new(): SVGStringList;\n}\n\ninterface SVGStyleElement extends SVGElement, SVGLangSpace {\n    media: string;\n    title: string;\n    type: string;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGStyleElement: {\n    prototype: SVGStyleElement;\n    new(): SVGStyleElement;\n}\n\ninterface SVGSwitchElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGSwitchElement: {\n    prototype: SVGSwitchElement;\n    new(): SVGSwitchElement;\n}\n\ninterface SVGSymbolElement extends SVGElement, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGSymbolElement: {\n    prototype: SVGSymbolElement;\n    new(): SVGSymbolElement;\n}\n\ninterface SVGTSpanElement extends SVGTextPositioningElement {\n}\n\ndeclare var SVGTSpanElement: {\n    prototype: SVGTSpanElement;\n    new(): SVGTSpanElement;\n}\n\ninterface SVGTextContentElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\n    lengthAdjust: SVGAnimatedEnumeration;\n    textLength: SVGAnimatedLength;\n    getCharNumAtPosition(point: SVGPoint): number;\n    getComputedTextLength(): number;\n    getEndPositionOfChar(charnum: number): SVGPoint;\n    getExtentOfChar(charnum: number): SVGRect;\n    getNumberOfChars(): number;\n    getRotationOfChar(charnum: number): number;\n    getStartPositionOfChar(charnum: number): SVGPoint;\n    getSubStringLength(charnum: number, nchars: number): number;\n    selectSubString(charnum: number, nchars: number): void;\n    LENGTHADJUST_SPACING: number;\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\n    LENGTHADJUST_UNKNOWN: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGTextContentElement: {\n    prototype: SVGTextContentElement;\n    new(): SVGTextContentElement;\n    LENGTHADJUST_SPACING: number;\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\n    LENGTHADJUST_UNKNOWN: number;\n}\n\ninterface SVGTextElement extends SVGTextPositioningElement, SVGTransformable {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGTextElement: {\n    prototype: SVGTextElement;\n    new(): SVGTextElement;\n}\n\ninterface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {\n    method: SVGAnimatedEnumeration;\n    spacing: SVGAnimatedEnumeration;\n    startOffset: SVGAnimatedLength;\n    TEXTPATH_METHODTYPE_ALIGN: number;\n    TEXTPATH_METHODTYPE_STRETCH: number;\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\n    TEXTPATH_SPACINGTYPE_AUTO: number;\n    TEXTPATH_SPACINGTYPE_EXACT: number;\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGTextPathElement: {\n    prototype: SVGTextPathElement;\n    new(): SVGTextPathElement;\n    TEXTPATH_METHODTYPE_ALIGN: number;\n    TEXTPATH_METHODTYPE_STRETCH: number;\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\n    TEXTPATH_SPACINGTYPE_AUTO: number;\n    TEXTPATH_SPACINGTYPE_EXACT: number;\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\n}\n\ninterface SVGTextPositioningElement extends SVGTextContentElement {\n    dx: SVGAnimatedLengthList;\n    dy: SVGAnimatedLengthList;\n    rotate: SVGAnimatedNumberList;\n    x: SVGAnimatedLengthList;\n    y: SVGAnimatedLengthList;\n}\n\ndeclare var SVGTextPositioningElement: {\n    prototype: SVGTextPositioningElement;\n    new(): SVGTextPositioningElement;\n}\n\ninterface SVGTitleElement extends SVGElement, SVGStylable, SVGLangSpace {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGTitleElement: {\n    prototype: SVGTitleElement;\n    new(): SVGTitleElement;\n}\n\ninterface SVGTransform {\n    angle: number;\n    matrix: SVGMatrix;\n    type: number;\n    setMatrix(matrix: SVGMatrix): void;\n    setRotate(angle: number, cx: number, cy: number): void;\n    setScale(sx: number, sy: number): void;\n    setSkewX(angle: number): void;\n    setSkewY(angle: number): void;\n    setTranslate(tx: number, ty: number): void;\n    SVG_TRANSFORM_MATRIX: number;\n    SVG_TRANSFORM_ROTATE: number;\n    SVG_TRANSFORM_SCALE: number;\n    SVG_TRANSFORM_SKEWX: number;\n    SVG_TRANSFORM_SKEWY: number;\n    SVG_TRANSFORM_TRANSLATE: number;\n    SVG_TRANSFORM_UNKNOWN: number;\n}\n\ndeclare var SVGTransform: {\n    prototype: SVGTransform;\n    new(): SVGTransform;\n    SVG_TRANSFORM_MATRIX: number;\n    SVG_TRANSFORM_ROTATE: number;\n    SVG_TRANSFORM_SCALE: number;\n    SVG_TRANSFORM_SKEWX: number;\n    SVG_TRANSFORM_SKEWY: number;\n    SVG_TRANSFORM_TRANSLATE: number;\n    SVG_TRANSFORM_UNKNOWN: number;\n}\n\ninterface SVGTransformList {\n    numberOfItems: number;\n    appendItem(newItem: SVGTransform): SVGTransform;\n    clear(): void;\n    consolidate(): SVGTransform;\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\n    getItem(index: number): SVGTransform;\n    initialize(newItem: SVGTransform): SVGTransform;\n    insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;\n    removeItem(index: number): SVGTransform;\n    replaceItem(newItem: SVGTransform, index: number): SVGTransform;\n}\n\ndeclare var SVGTransformList: {\n    prototype: SVGTransformList;\n    new(): SVGTransformList;\n}\n\ninterface SVGUnitTypes {\n    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\n    SVG_UNIT_TYPE_UNKNOWN: number;\n    SVG_UNIT_TYPE_USERSPACEONUSE: number;\n}\ndeclare var SVGUnitTypes: SVGUnitTypes;\n\ninterface SVGUseElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference {\n    animatedInstanceRoot: SVGElementInstance;\n    height: SVGAnimatedLength;\n    instanceRoot: SVGElementInstance;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    y: SVGAnimatedLength;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGUseElement: {\n    prototype: SVGUseElement;\n    new(): SVGUseElement;\n}\n\ninterface SVGViewElement extends SVGElement, SVGExternalResourcesRequired, SVGFitToViewBox, SVGZoomAndPan {\n    viewTarget: SVGStringList;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var SVGViewElement: {\n    prototype: SVGViewElement;\n    new(): SVGViewElement;\n}\n\ninterface SVGZoomAndPan {\n    SVG_ZOOMANDPAN_DISABLE: number;\n    SVG_ZOOMANDPAN_MAGNIFY: number;\n    SVG_ZOOMANDPAN_UNKNOWN: number;\n}\ndeclare var SVGZoomAndPan: SVGZoomAndPan;\n\ninterface SVGZoomEvent extends UIEvent {\n    newScale: number;\n    newTranslate: SVGPoint;\n    previousScale: number;\n    previousTranslate: SVGPoint;\n    zoomRectScreen: SVGRect;\n}\n\ndeclare var SVGZoomEvent: {\n    prototype: SVGZoomEvent;\n    new(): SVGZoomEvent;\n}\n\ninterface Screen extends EventTarget {\n    availHeight: number;\n    availWidth: number;\n    bufferDepth: number;\n    colorDepth: number;\n    deviceXDPI: number;\n    deviceYDPI: number;\n    fontSmoothingEnabled: boolean;\n    height: number;\n    logicalXDPI: number;\n    logicalYDPI: number;\n    msOrientation: string;\n    onmsorientationchange: (ev: Event) => any;\n    pixelDepth: number;\n    systemXDPI: number;\n    systemYDPI: number;\n    width: number;\n    msLockOrientation(orientations: string | string[]): boolean;\n    msUnlockOrientation(): void;\n    addEventListener(type: \"MSOrientationChange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Screen: {\n    prototype: Screen;\n    new(): Screen;\n}\n\ninterface ScriptNotifyEvent extends Event {\n    callingUri: string;\n    value: string;\n}\n\ndeclare var ScriptNotifyEvent: {\n    prototype: ScriptNotifyEvent;\n    new(): ScriptNotifyEvent;\n}\n\ninterface ScriptProcessorNode extends AudioNode {\n    bufferSize: number;\n    onaudioprocess: (ev: AudioProcessingEvent) => any;\n    addEventListener(type: \"audioprocess\", listener: (ev: AudioProcessingEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var ScriptProcessorNode: {\n    prototype: ScriptProcessorNode;\n    new(): ScriptProcessorNode;\n}\n\ninterface Selection {\n    anchorNode: Node;\n    anchorOffset: number;\n    focusNode: Node;\n    focusOffset: number;\n    isCollapsed: boolean;\n    rangeCount: number;\n    type: string;\n    addRange(range: Range): void;\n    collapse(parentNode: Node, offset: number): void;\n    collapseToEnd(): void;\n    collapseToStart(): void;\n    containsNode(node: Node, partlyContained: boolean): boolean;\n    deleteFromDocument(): void;\n    empty(): void;\n    extend(newNode: Node, offset: number): void;\n    getRangeAt(index: number): Range;\n    removeAllRanges(): void;\n    removeRange(range: Range): void;\n    selectAllChildren(parentNode: Node): void;\n    setBaseAndExtent(baseNode: Node, baseOffset: number, extentNode: Node, extentOffset: number): void;\n    toString(): string;\n}\n\ndeclare var Selection: {\n    prototype: Selection;\n    new(): Selection;\n}\n\ninterface SourceBuffer extends EventTarget {\n    appendWindowEnd: number;\n    appendWindowStart: number;\n    audioTracks: AudioTrackList;\n    buffered: TimeRanges;\n    mode: string;\n    timestampOffset: number;\n    updating: boolean;\n    videoTracks: VideoTrackList;\n    abort(): void;\n    appendBuffer(data: ArrayBuffer | ArrayBufferView): void;\n    appendStream(stream: MSStream, maxSize?: number): void;\n    remove(start: number, end: number): void;\n}\n\ndeclare var SourceBuffer: {\n    prototype: SourceBuffer;\n    new(): SourceBuffer;\n}\n\ninterface SourceBufferList extends EventTarget {\n    length: number;\n    item(index: number): SourceBuffer;\n    [index: number]: SourceBuffer;\n}\n\ndeclare var SourceBufferList: {\n    prototype: SourceBufferList;\n    new(): SourceBufferList;\n}\n\ninterface StereoPannerNode extends AudioNode {\n    pan: AudioParam;\n}\n\ndeclare var StereoPannerNode: {\n    prototype: StereoPannerNode;\n    new(): StereoPannerNode;\n}\n\ninterface Storage {\n    length: number;\n    clear(): void;\n    getItem(key: string): any;\n    key(index: number): string;\n    removeItem(key: string): void;\n    setItem(key: string, data: string): void;\n    [key: string]: any;\n    [index: number]: string;\n}\n\ndeclare var Storage: {\n    prototype: Storage;\n    new(): Storage;\n}\n\ninterface StorageEvent extends Event {\n    url: string;\n    key?: string;\n    oldValue?: string;\n    newValue?: string;\n    storageArea?: Storage;\n}\n\ndeclare var StorageEvent: {\n    prototype: StorageEvent;\n    new (type: string, eventInitDict?: StorageEventInit): StorageEvent;\n}\n\ninterface StyleMedia {\n    type: string;\n    matchMedium(mediaquery: string): boolean;\n}\n\ndeclare var StyleMedia: {\n    prototype: StyleMedia;\n    new(): StyleMedia;\n}\n\ninterface StyleSheet {\n    disabled: boolean;\n    href: string;\n    media: MediaList;\n    ownerNode: Node;\n    parentStyleSheet: StyleSheet;\n    title: string;\n    type: string;\n}\n\ndeclare var StyleSheet: {\n    prototype: StyleSheet;\n    new(): StyleSheet;\n}\n\ninterface StyleSheetList {\n    length: number;\n    item(index?: number): StyleSheet;\n    [index: number]: StyleSheet;\n}\n\ndeclare var StyleSheetList: {\n    prototype: StyleSheetList;\n    new(): StyleSheetList;\n}\n\ninterface StyleSheetPageList {\n    length: number;\n    item(index: number): CSSPageRule;\n    [index: number]: CSSPageRule;\n}\n\ndeclare var StyleSheetPageList: {\n    prototype: StyleSheetPageList;\n    new(): StyleSheetPageList;\n}\n\ninterface SubtleCrypto {\n    decrypt(algorithm: string | Algorithm, key: CryptoKey, data: ArrayBufferView): any;\n    deriveBits(algorithm: string | Algorithm, baseKey: CryptoKey, length: number): any;\n    deriveKey(algorithm: string | Algorithm, baseKey: CryptoKey, derivedKeyType: string | Algorithm, extractable: boolean, keyUsages: string[]): any;\n    digest(algorithm: string | Algorithm, data: ArrayBufferView): any;\n    encrypt(algorithm: string | Algorithm, key: CryptoKey, data: ArrayBufferView): any;\n    exportKey(format: string, key: CryptoKey): any;\n    generateKey(algorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): any;\n    importKey(format: string, keyData: ArrayBufferView, algorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): any;\n    sign(algorithm: string | Algorithm, key: CryptoKey, data: ArrayBufferView): any;\n    unwrapKey(format: string, wrappedKey: ArrayBufferView, unwrappingKey: CryptoKey, unwrapAlgorithm: string | Algorithm, unwrappedKeyAlgorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): any;\n    verify(algorithm: string | Algorithm, key: CryptoKey, signature: ArrayBufferView, data: ArrayBufferView): any;\n    wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: string | Algorithm): any;\n}\n\ndeclare var SubtleCrypto: {\n    prototype: SubtleCrypto;\n    new(): SubtleCrypto;\n}\n\ninterface Text extends CharacterData {\n    wholeText: string;\n    replaceWholeText(content: string): Text;\n    splitText(offset: number): Text;\n}\n\ndeclare var Text: {\n    prototype: Text;\n    new(): Text;\n}\n\ninterface TextEvent extends UIEvent {\n    data: string;\n    inputMethod: number;\n    locale: string;\n    initTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, inputMethod: number, locale: string): void;\n    DOM_INPUT_METHOD_DROP: number;\n    DOM_INPUT_METHOD_HANDWRITING: number;\n    DOM_INPUT_METHOD_IME: number;\n    DOM_INPUT_METHOD_KEYBOARD: number;\n    DOM_INPUT_METHOD_MULTIMODAL: number;\n    DOM_INPUT_METHOD_OPTION: number;\n    DOM_INPUT_METHOD_PASTE: number;\n    DOM_INPUT_METHOD_SCRIPT: number;\n    DOM_INPUT_METHOD_UNKNOWN: number;\n    DOM_INPUT_METHOD_VOICE: number;\n}\n\ndeclare var TextEvent: {\n    prototype: TextEvent;\n    new(): TextEvent;\n    DOM_INPUT_METHOD_DROP: number;\n    DOM_INPUT_METHOD_HANDWRITING: number;\n    DOM_INPUT_METHOD_IME: number;\n    DOM_INPUT_METHOD_KEYBOARD: number;\n    DOM_INPUT_METHOD_MULTIMODAL: number;\n    DOM_INPUT_METHOD_OPTION: number;\n    DOM_INPUT_METHOD_PASTE: number;\n    DOM_INPUT_METHOD_SCRIPT: number;\n    DOM_INPUT_METHOD_UNKNOWN: number;\n    DOM_INPUT_METHOD_VOICE: number;\n}\n\ninterface TextMetrics {\n    width: number;\n}\n\ndeclare var TextMetrics: {\n    prototype: TextMetrics;\n    new(): TextMetrics;\n}\n\ninterface TextRange {\n    boundingHeight: number;\n    boundingLeft: number;\n    boundingTop: number;\n    boundingWidth: number;\n    htmlText: string;\n    offsetLeft: number;\n    offsetTop: number;\n    text: string;\n    collapse(start?: boolean): void;\n    compareEndPoints(how: string, sourceRange: TextRange): number;\n    duplicate(): TextRange;\n    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;\n    execCommandShowHelp(cmdID: string): boolean;\n    expand(Unit: string): boolean;\n    findText(string: string, count?: number, flags?: number): boolean;\n    getBookmark(): string;\n    getBoundingClientRect(): ClientRect;\n    getClientRects(): ClientRectList;\n    inRange(range: TextRange): boolean;\n    isEqual(range: TextRange): boolean;\n    move(unit: string, count?: number): number;\n    moveEnd(unit: string, count?: number): number;\n    moveStart(unit: string, count?: number): number;\n    moveToBookmark(bookmark: string): boolean;\n    moveToElementText(element: Element): void;\n    moveToPoint(x: number, y: number): void;\n    parentElement(): Element;\n    pasteHTML(html: string): void;\n    queryCommandEnabled(cmdID: string): boolean;\n    queryCommandIndeterm(cmdID: string): boolean;\n    queryCommandState(cmdID: string): boolean;\n    queryCommandSupported(cmdID: string): boolean;\n    queryCommandText(cmdID: string): string;\n    queryCommandValue(cmdID: string): any;\n    scrollIntoView(fStart?: boolean): void;\n    select(): void;\n    setEndPoint(how: string, SourceRange: TextRange): void;\n}\n\ndeclare var TextRange: {\n    prototype: TextRange;\n    new(): TextRange;\n}\n\ninterface TextRangeCollection {\n    length: number;\n    item(index: number): TextRange;\n    [index: number]: TextRange;\n}\n\ndeclare var TextRangeCollection: {\n    prototype: TextRangeCollection;\n    new(): TextRangeCollection;\n}\n\ninterface TextTrack extends EventTarget {\n    activeCues: TextTrackCueList;\n    cues: TextTrackCueList;\n    inBandMetadataTrackDispatchType: string;\n    kind: string;\n    label: string;\n    language: string;\n    mode: any;\n    oncuechange: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onload: (ev: Event) => any;\n    readyState: number;\n    addCue(cue: TextTrackCue): void;\n    removeCue(cue: TextTrackCue): void;\n    DISABLED: number;\n    ERROR: number;\n    HIDDEN: number;\n    LOADED: number;\n    LOADING: number;\n    NONE: number;\n    SHOWING: number;\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var TextTrack: {\n    prototype: TextTrack;\n    new(): TextTrack;\n    DISABLED: number;\n    ERROR: number;\n    HIDDEN: number;\n    LOADED: number;\n    LOADING: number;\n    NONE: number;\n    SHOWING: number;\n}\n\ninterface TextTrackCue extends EventTarget {\n    endTime: number;\n    id: string;\n    onenter: (ev: Event) => any;\n    onexit: (ev: Event) => any;\n    pauseOnExit: boolean;\n    startTime: number;\n    text: string;\n    track: TextTrack;\n    getCueAsHTML(): DocumentFragment;\n    addEventListener(type: \"enter\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"exit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var TextTrackCue: {\n    prototype: TextTrackCue;\n    new(startTime: number, endTime: number, text: string): TextTrackCue;\n}\n\ninterface TextTrackCueList {\n    length: number;\n    getCueById(id: string): TextTrackCue;\n    item(index: number): TextTrackCue;\n    [index: number]: TextTrackCue;\n}\n\ndeclare var TextTrackCueList: {\n    prototype: TextTrackCueList;\n    new(): TextTrackCueList;\n}\n\ninterface TextTrackList extends EventTarget {\n    length: number;\n    onaddtrack: (ev: TrackEvent) => any;\n    item(index: number): TextTrack;\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n    [index: number]: TextTrack;\n}\n\ndeclare var TextTrackList: {\n    prototype: TextTrackList;\n    new(): TextTrackList;\n}\n\ninterface TimeRanges {\n    length: number;\n    end(index: number): number;\n    start(index: number): number;\n}\n\ndeclare var TimeRanges: {\n    prototype: TimeRanges;\n    new(): TimeRanges;\n}\n\ninterface Touch {\n    clientX: number;\n    clientY: number;\n    identifier: number;\n    pageX: number;\n    pageY: number;\n    screenX: number;\n    screenY: number;\n    target: EventTarget;\n}\n\ndeclare var Touch: {\n    prototype: Touch;\n    new(): Touch;\n}\n\ninterface TouchEvent extends UIEvent {\n    altKey: boolean;\n    changedTouches: TouchList;\n    ctrlKey: boolean;\n    metaKey: boolean;\n    shiftKey: boolean;\n    targetTouches: TouchList;\n    touches: TouchList;\n}\n\ndeclare var TouchEvent: {\n    prototype: TouchEvent;\n    new(): TouchEvent;\n}\n\ninterface TouchList {\n    length: number;\n    item(index: number): Touch;\n    [index: number]: Touch;\n}\n\ndeclare var TouchList: {\n    prototype: TouchList;\n    new(): TouchList;\n}\n\ninterface TrackEvent extends Event {\n    track: any;\n}\n\ndeclare var TrackEvent: {\n    prototype: TrackEvent;\n    new(): TrackEvent;\n}\n\ninterface TransitionEvent extends Event {\n    elapsedTime: number;\n    propertyName: string;\n    initTransitionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, propertyNameArg: string, elapsedTimeArg: number): void;\n}\n\ndeclare var TransitionEvent: {\n    prototype: TransitionEvent;\n    new(): TransitionEvent;\n}\n\ninterface TreeWalker {\n    currentNode: Node;\n    expandEntityReferences: boolean;\n    filter: NodeFilter;\n    root: Node;\n    whatToShow: number;\n    firstChild(): Node;\n    lastChild(): Node;\n    nextNode(): Node;\n    nextSibling(): Node;\n    parentNode(): Node;\n    previousNode(): Node;\n    previousSibling(): Node;\n}\n\ndeclare var TreeWalker: {\n    prototype: TreeWalker;\n    new(): TreeWalker;\n}\n\ninterface UIEvent extends Event {\n    detail: number;\n    view: Window;\n    initUIEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number): void;\n}\n\ndeclare var UIEvent: {\n    prototype: UIEvent;\n    new(type: string, eventInitDict?: UIEventInit): UIEvent;\n}\n\ninterface URL {\n    createObjectURL(object: any, options?: ObjectURLOptions): string;\n    revokeObjectURL(url: string): void;\n}\ndeclare var URL: URL;\n\ninterface UnviewableContentIdentifiedEvent extends NavigationEventWithReferrer {\n    mediaType: string;\n}\n\ndeclare var UnviewableContentIdentifiedEvent: {\n    prototype: UnviewableContentIdentifiedEvent;\n    new(): UnviewableContentIdentifiedEvent;\n}\n\ninterface ValidityState {\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    typeMismatch: boolean;\n    valid: boolean;\n    valueMissing: boolean;\n}\n\ndeclare var ValidityState: {\n    prototype: ValidityState;\n    new(): ValidityState;\n}\n\ninterface VideoPlaybackQuality {\n    corruptedVideoFrames: number;\n    creationTime: number;\n    droppedVideoFrames: number;\n    totalFrameDelay: number;\n    totalVideoFrames: number;\n}\n\ndeclare var VideoPlaybackQuality: {\n    prototype: VideoPlaybackQuality;\n    new(): VideoPlaybackQuality;\n}\n\ninterface VideoTrack {\n    id: string;\n    kind: string;\n    label: string;\n    language: string;\n    selected: boolean;\n    sourceBuffer: SourceBuffer;\n}\n\ndeclare var VideoTrack: {\n    prototype: VideoTrack;\n    new(): VideoTrack;\n}\n\ninterface VideoTrackList extends EventTarget {\n    length: number;\n    onaddtrack: (ev: TrackEvent) => any;\n    onchange: (ev: Event) => any;\n    onremovetrack: (ev: TrackEvent) => any;\n    selectedIndex: number;\n    getTrackById(id: string): VideoTrack;\n    item(index: number): VideoTrack;\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"removetrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n    [index: number]: VideoTrack;\n}\n\ndeclare var VideoTrackList: {\n    prototype: VideoTrackList;\n    new(): VideoTrackList;\n}\n\ninterface WEBGL_compressed_texture_s3tc {\n    COMPRESSED_RGBA_S3TC_DXT1_EXT: number;\n    COMPRESSED_RGBA_S3TC_DXT3_EXT: number;\n    COMPRESSED_RGBA_S3TC_DXT5_EXT: number;\n    COMPRESSED_RGB_S3TC_DXT1_EXT: number;\n}\n\ndeclare var WEBGL_compressed_texture_s3tc: {\n    prototype: WEBGL_compressed_texture_s3tc;\n    new(): WEBGL_compressed_texture_s3tc;\n    COMPRESSED_RGBA_S3TC_DXT1_EXT: number;\n    COMPRESSED_RGBA_S3TC_DXT3_EXT: number;\n    COMPRESSED_RGBA_S3TC_DXT5_EXT: number;\n    COMPRESSED_RGB_S3TC_DXT1_EXT: number;\n}\n\ninterface WEBGL_debug_renderer_info {\n    UNMASKED_RENDERER_WEBGL: number;\n    UNMASKED_VENDOR_WEBGL: number;\n}\n\ndeclare var WEBGL_debug_renderer_info: {\n    prototype: WEBGL_debug_renderer_info;\n    new(): WEBGL_debug_renderer_info;\n    UNMASKED_RENDERER_WEBGL: number;\n    UNMASKED_VENDOR_WEBGL: number;\n}\n\ninterface WEBGL_depth_texture {\n    UNSIGNED_INT_24_8_WEBGL: number;\n}\n\ndeclare var WEBGL_depth_texture: {\n    prototype: WEBGL_depth_texture;\n    new(): WEBGL_depth_texture;\n    UNSIGNED_INT_24_8_WEBGL: number;\n}\n\ninterface WaveShaperNode extends AudioNode {\n    curve: Float32Array;\n    oversample: string;\n}\n\ndeclare var WaveShaperNode: {\n    prototype: WaveShaperNode;\n    new(): WaveShaperNode;\n}\n\ninterface WebGLActiveInfo {\n    name: string;\n    size: number;\n    type: number;\n}\n\ndeclare var WebGLActiveInfo: {\n    prototype: WebGLActiveInfo;\n    new(): WebGLActiveInfo;\n}\n\ninterface WebGLBuffer extends WebGLObject {\n}\n\ndeclare var WebGLBuffer: {\n    prototype: WebGLBuffer;\n    new(): WebGLBuffer;\n}\n\ninterface WebGLContextEvent extends Event {\n    statusMessage: string;\n}\n\ndeclare var WebGLContextEvent: {\n    prototype: WebGLContextEvent;\n    new(): WebGLContextEvent;\n}\n\ninterface WebGLFramebuffer extends WebGLObject {\n}\n\ndeclare var WebGLFramebuffer: {\n    prototype: WebGLFramebuffer;\n    new(): WebGLFramebuffer;\n}\n\ninterface WebGLObject {\n}\n\ndeclare var WebGLObject: {\n    prototype: WebGLObject;\n    new(): WebGLObject;\n}\n\ninterface WebGLProgram extends WebGLObject {\n}\n\ndeclare var WebGLProgram: {\n    prototype: WebGLProgram;\n    new(): WebGLProgram;\n}\n\ninterface WebGLRenderbuffer extends WebGLObject {\n}\n\ndeclare var WebGLRenderbuffer: {\n    prototype: WebGLRenderbuffer;\n    new(): WebGLRenderbuffer;\n}\n\ninterface WebGLRenderingContext {\n    canvas: HTMLCanvasElement;\n    drawingBufferHeight: number;\n    drawingBufferWidth: number;\n    activeTexture(texture: number): void;\n    attachShader(program: WebGLProgram, shader: WebGLShader): void;\n    bindAttribLocation(program: WebGLProgram, index: number, name: string): void;\n    bindBuffer(target: number, buffer: WebGLBuffer): void;\n    bindFramebuffer(target: number, framebuffer: WebGLFramebuffer): void;\n    bindRenderbuffer(target: number, renderbuffer: WebGLRenderbuffer): void;\n    bindTexture(target: number, texture: WebGLTexture): void;\n    blendColor(red: number, green: number, blue: number, alpha: number): void;\n    blendEquation(mode: number): void;\n    blendEquationSeparate(modeRGB: number, modeAlpha: number): void;\n    blendFunc(sfactor: number, dfactor: number): void;\n    blendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;\n    bufferData(target: number, size: number | ArrayBufferView | ArrayBuffer, usage: number): void;\n    bufferSubData(target: number, offset: number, data: ArrayBufferView | ArrayBuffer): void;\n    checkFramebufferStatus(target: number): number;\n    clear(mask: number): void;\n    clearColor(red: number, green: number, blue: number, alpha: number): void;\n    clearDepth(depth: number): void;\n    clearStencil(s: number): void;\n    colorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void;\n    compileShader(shader: WebGLShader): void;\n    compressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, data: ArrayBufferView): void;\n    compressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, data: ArrayBufferView): void;\n    copyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void;\n    copyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;\n    createBuffer(): WebGLBuffer;\n    createFramebuffer(): WebGLFramebuffer;\n    createProgram(): WebGLProgram;\n    createRenderbuffer(): WebGLRenderbuffer;\n    createShader(type: number): WebGLShader;\n    createTexture(): WebGLTexture;\n    cullFace(mode: number): void;\n    deleteBuffer(buffer: WebGLBuffer): void;\n    deleteFramebuffer(framebuffer: WebGLFramebuffer): void;\n    deleteProgram(program: WebGLProgram): void;\n    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer): void;\n    deleteShader(shader: WebGLShader): void;\n    deleteTexture(texture: WebGLTexture): void;\n    depthFunc(func: number): void;\n    depthMask(flag: boolean): void;\n    depthRange(zNear: number, zFar: number): void;\n    detachShader(program: WebGLProgram, shader: WebGLShader): void;\n    disable(cap: number): void;\n    disableVertexAttribArray(index: number): void;\n    drawArrays(mode: number, first: number, count: number): void;\n    drawElements(mode: number, count: number, type: number, offset: number): void;\n    enable(cap: number): void;\n    enableVertexAttribArray(index: number): void;\n    finish(): void;\n    flush(): void;\n    framebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: WebGLRenderbuffer): void;\n    framebufferTexture2D(target: number, attachment: number, textarget: number, texture: WebGLTexture, level: number): void;\n    frontFace(mode: number): void;\n    generateMipmap(target: number): void;\n    getActiveAttrib(program: WebGLProgram, index: number): WebGLActiveInfo;\n    getActiveUniform(program: WebGLProgram, index: number): WebGLActiveInfo;\n    getAttachedShaders(program: WebGLProgram): WebGLShader[];\n    getAttribLocation(program: WebGLProgram, name: string): number;\n    getBufferParameter(target: number, pname: number): any;\n    getContextAttributes(): WebGLContextAttributes;\n    getError(): number;\n    getExtension(name: string): any;\n    getFramebufferAttachmentParameter(target: number, attachment: number, pname: number): any;\n    getParameter(pname: number): any;\n    getProgramInfoLog(program: WebGLProgram): string;\n    getProgramParameter(program: WebGLProgram, pname: number): any;\n    getRenderbufferParameter(target: number, pname: number): any;\n    getShaderInfoLog(shader: WebGLShader): string;\n    getShaderParameter(shader: WebGLShader, pname: number): any;\n    getShaderPrecisionFormat(shadertype: number, precisiontype: number): WebGLShaderPrecisionFormat;\n    getShaderSource(shader: WebGLShader): string;\n    getSupportedExtensions(): string[];\n    getTexParameter(target: number, pname: number): any;\n    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;\n    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation;\n    getVertexAttrib(index: number, pname: number): any;\n    getVertexAttribOffset(index: number, pname: number): number;\n    hint(target: number, mode: number): void;\n    isBuffer(buffer: WebGLBuffer): boolean;\n    isContextLost(): boolean;\n    isEnabled(cap: number): boolean;\n    isFramebuffer(framebuffer: WebGLFramebuffer): boolean;\n    isProgram(program: WebGLProgram): boolean;\n    isRenderbuffer(renderbuffer: WebGLRenderbuffer): boolean;\n    isShader(shader: WebGLShader): boolean;\n    isTexture(texture: WebGLTexture): boolean;\n    lineWidth(width: number): void;\n    linkProgram(program: WebGLProgram): void;\n    pixelStorei(pname: number, param: number): void;\n    polygonOffset(factor: number, units: number): void;\n    readPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;\n    renderbufferStorage(target: number, internalformat: number, width: number, height: number): void;\n    sampleCoverage(value: number, invert: boolean): void;\n    scissor(x: number, y: number, width: number, height: number): void;\n    shaderSource(shader: WebGLShader, source: string): void;\n    stencilFunc(func: number, ref: number, mask: number): void;\n    stencilFuncSeparate(face: number, func: number, ref: number, mask: number): void;\n    stencilMask(mask: number): void;\n    stencilMaskSeparate(face: number, mask: number): void;\n    stencilOp(fail: number, zfail: number, zpass: number): void;\n    stencilOpSeparate(face: number, fail: number, zfail: number, zpass: number): void;\n    texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void;\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, image: HTMLImageElement): void;\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, canvas: HTMLCanvasElement): void;\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, video: HTMLVideoElement): void;\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageData): void;\n    texParameterf(target: number, pname: number, param: number): void;\n    texParameteri(target: number, pname: number, param: number): void;\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, image: HTMLImageElement): void;\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, canvas: HTMLCanvasElement): void;\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, video: HTMLVideoElement): void;\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageData): void;\n    uniform1f(location: WebGLUniformLocation, x: number): void;\n    uniform1fv(location: WebGLUniformLocation, v: Float32Array): void;\n    uniform1i(location: WebGLUniformLocation, x: number): void;\n    uniform1iv(location: WebGLUniformLocation, v: Int32Array): void;\n    uniform2f(location: WebGLUniformLocation, x: number, y: number): void;\n    uniform2fv(location: WebGLUniformLocation, v: Float32Array): void;\n    uniform2i(location: WebGLUniformLocation, x: number, y: number): void;\n    uniform2iv(location: WebGLUniformLocation, v: Int32Array): void;\n    uniform3f(location: WebGLUniformLocation, x: number, y: number, z: number): void;\n    uniform3fv(location: WebGLUniformLocation, v: Float32Array): void;\n    uniform3i(location: WebGLUniformLocation, x: number, y: number, z: number): void;\n    uniform3iv(location: WebGLUniformLocation, v: Int32Array): void;\n    uniform4f(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void;\n    uniform4fv(location: WebGLUniformLocation, v: Float32Array): void;\n    uniform4i(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void;\n    uniform4iv(location: WebGLUniformLocation, v: Int32Array): void;\n    uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;\n    uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;\n    uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;\n    useProgram(program: WebGLProgram): void;\n    validateProgram(program: WebGLProgram): void;\n    vertexAttrib1f(indx: number, x: number): void;\n    vertexAttrib1fv(indx: number, values: Float32Array): void;\n    vertexAttrib2f(indx: number, x: number, y: number): void;\n    vertexAttrib2fv(indx: number, values: Float32Array): void;\n    vertexAttrib3f(indx: number, x: number, y: number, z: number): void;\n    vertexAttrib3fv(indx: number, values: Float32Array): void;\n    vertexAttrib4f(indx: number, x: number, y: number, z: number, w: number): void;\n    vertexAttrib4fv(indx: number, values: Float32Array): void;\n    vertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, offset: number): void;\n    viewport(x: number, y: number, width: number, height: number): void;\n    ACTIVE_ATTRIBUTES: number;\n    ACTIVE_TEXTURE: number;\n    ACTIVE_UNIFORMS: number;\n    ALIASED_LINE_WIDTH_RANGE: number;\n    ALIASED_POINT_SIZE_RANGE: number;\n    ALPHA: number;\n    ALPHA_BITS: number;\n    ALWAYS: number;\n    ARRAY_BUFFER: number;\n    ARRAY_BUFFER_BINDING: number;\n    ATTACHED_SHADERS: number;\n    BACK: number;\n    BLEND: number;\n    BLEND_COLOR: number;\n    BLEND_DST_ALPHA: number;\n    BLEND_DST_RGB: number;\n    BLEND_EQUATION: number;\n    BLEND_EQUATION_ALPHA: number;\n    BLEND_EQUATION_RGB: number;\n    BLEND_SRC_ALPHA: number;\n    BLEND_SRC_RGB: number;\n    BLUE_BITS: number;\n    BOOL: number;\n    BOOL_VEC2: number;\n    BOOL_VEC3: number;\n    BOOL_VEC4: number;\n    BROWSER_DEFAULT_WEBGL: number;\n    BUFFER_SIZE: number;\n    BUFFER_USAGE: number;\n    BYTE: number;\n    CCW: number;\n    CLAMP_TO_EDGE: number;\n    COLOR_ATTACHMENT0: number;\n    COLOR_BUFFER_BIT: number;\n    COLOR_CLEAR_VALUE: number;\n    COLOR_WRITEMASK: number;\n    COMPILE_STATUS: number;\n    COMPRESSED_TEXTURE_FORMATS: number;\n    CONSTANT_ALPHA: number;\n    CONSTANT_COLOR: number;\n    CONTEXT_LOST_WEBGL: number;\n    CULL_FACE: number;\n    CULL_FACE_MODE: number;\n    CURRENT_PROGRAM: number;\n    CURRENT_VERTEX_ATTRIB: number;\n    CW: number;\n    DECR: number;\n    DECR_WRAP: number;\n    DELETE_STATUS: number;\n    DEPTH_ATTACHMENT: number;\n    DEPTH_BITS: number;\n    DEPTH_BUFFER_BIT: number;\n    DEPTH_CLEAR_VALUE: number;\n    DEPTH_COMPONENT: number;\n    DEPTH_COMPONENT16: number;\n    DEPTH_FUNC: number;\n    DEPTH_RANGE: number;\n    DEPTH_STENCIL: number;\n    DEPTH_STENCIL_ATTACHMENT: number;\n    DEPTH_TEST: number;\n    DEPTH_WRITEMASK: number;\n    DITHER: number;\n    DONT_CARE: number;\n    DST_ALPHA: number;\n    DST_COLOR: number;\n    DYNAMIC_DRAW: number;\n    ELEMENT_ARRAY_BUFFER: number;\n    ELEMENT_ARRAY_BUFFER_BINDING: number;\n    EQUAL: number;\n    FASTEST: number;\n    FLOAT: number;\n    FLOAT_MAT2: number;\n    FLOAT_MAT3: number;\n    FLOAT_MAT4: number;\n    FLOAT_VEC2: number;\n    FLOAT_VEC3: number;\n    FLOAT_VEC4: number;\n    FRAGMENT_SHADER: number;\n    FRAMEBUFFER: number;\n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;\n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;\n    FRAMEBUFFER_BINDING: number;\n    FRAMEBUFFER_COMPLETE: number;\n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;\n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;\n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;\n    FRAMEBUFFER_UNSUPPORTED: number;\n    FRONT: number;\n    FRONT_AND_BACK: number;\n    FRONT_FACE: number;\n    FUNC_ADD: number;\n    FUNC_REVERSE_SUBTRACT: number;\n    FUNC_SUBTRACT: number;\n    GENERATE_MIPMAP_HINT: number;\n    GEQUAL: number;\n    GREATER: number;\n    GREEN_BITS: number;\n    HIGH_FLOAT: number;\n    HIGH_INT: number;\n    IMPLEMENTATION_COLOR_READ_FORMAT: number;\n    IMPLEMENTATION_COLOR_READ_TYPE: number;\n    INCR: number;\n    INCR_WRAP: number;\n    INT: number;\n    INT_VEC2: number;\n    INT_VEC3: number;\n    INT_VEC4: number;\n    INVALID_ENUM: number;\n    INVALID_FRAMEBUFFER_OPERATION: number;\n    INVALID_OPERATION: number;\n    INVALID_VALUE: number;\n    INVERT: number;\n    KEEP: number;\n    LEQUAL: number;\n    LESS: number;\n    LINEAR: number;\n    LINEAR_MIPMAP_LINEAR: number;\n    LINEAR_MIPMAP_NEAREST: number;\n    LINES: number;\n    LINE_LOOP: number;\n    LINE_STRIP: number;\n    LINE_WIDTH: number;\n    LINK_STATUS: number;\n    LOW_FLOAT: number;\n    LOW_INT: number;\n    LUMINANCE: number;\n    LUMINANCE_ALPHA: number;\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;\n    MAX_CUBE_MAP_TEXTURE_SIZE: number;\n    MAX_FRAGMENT_UNIFORM_VECTORS: number;\n    MAX_RENDERBUFFER_SIZE: number;\n    MAX_TEXTURE_IMAGE_UNITS: number;\n    MAX_TEXTURE_SIZE: number;\n    MAX_VARYING_VECTORS: number;\n    MAX_VERTEX_ATTRIBS: number;\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;\n    MAX_VERTEX_UNIFORM_VECTORS: number;\n    MAX_VIEWPORT_DIMS: number;\n    MEDIUM_FLOAT: number;\n    MEDIUM_INT: number;\n    MIRRORED_REPEAT: number;\n    NEAREST: number;\n    NEAREST_MIPMAP_LINEAR: number;\n    NEAREST_MIPMAP_NEAREST: number;\n    NEVER: number;\n    NICEST: number;\n    NONE: number;\n    NOTEQUAL: number;\n    NO_ERROR: number;\n    ONE: number;\n    ONE_MINUS_CONSTANT_ALPHA: number;\n    ONE_MINUS_CONSTANT_COLOR: number;\n    ONE_MINUS_DST_ALPHA: number;\n    ONE_MINUS_DST_COLOR: number;\n    ONE_MINUS_SRC_ALPHA: number;\n    ONE_MINUS_SRC_COLOR: number;\n    OUT_OF_MEMORY: number;\n    PACK_ALIGNMENT: number;\n    POINTS: number;\n    POLYGON_OFFSET_FACTOR: number;\n    POLYGON_OFFSET_FILL: number;\n    POLYGON_OFFSET_UNITS: number;\n    RED_BITS: number;\n    RENDERBUFFER: number;\n    RENDERBUFFER_ALPHA_SIZE: number;\n    RENDERBUFFER_BINDING: number;\n    RENDERBUFFER_BLUE_SIZE: number;\n    RENDERBUFFER_DEPTH_SIZE: number;\n    RENDERBUFFER_GREEN_SIZE: number;\n    RENDERBUFFER_HEIGHT: number;\n    RENDERBUFFER_INTERNAL_FORMAT: number;\n    RENDERBUFFER_RED_SIZE: number;\n    RENDERBUFFER_STENCIL_SIZE: number;\n    RENDERBUFFER_WIDTH: number;\n    RENDERER: number;\n    REPEAT: number;\n    REPLACE: number;\n    RGB: number;\n    RGB565: number;\n    RGB5_A1: number;\n    RGBA: number;\n    RGBA4: number;\n    SAMPLER_2D: number;\n    SAMPLER_CUBE: number;\n    SAMPLES: number;\n    SAMPLE_ALPHA_TO_COVERAGE: number;\n    SAMPLE_BUFFERS: number;\n    SAMPLE_COVERAGE: number;\n    SAMPLE_COVERAGE_INVERT: number;\n    SAMPLE_COVERAGE_VALUE: number;\n    SCISSOR_BOX: number;\n    SCISSOR_TEST: number;\n    SHADER_TYPE: number;\n    SHADING_LANGUAGE_VERSION: number;\n    SHORT: number;\n    SRC_ALPHA: number;\n    SRC_ALPHA_SATURATE: number;\n    SRC_COLOR: number;\n    STATIC_DRAW: number;\n    STENCIL_ATTACHMENT: number;\n    STENCIL_BACK_FAIL: number;\n    STENCIL_BACK_FUNC: number;\n    STENCIL_BACK_PASS_DEPTH_FAIL: number;\n    STENCIL_BACK_PASS_DEPTH_PASS: number;\n    STENCIL_BACK_REF: number;\n    STENCIL_BACK_VALUE_MASK: number;\n    STENCIL_BACK_WRITEMASK: number;\n    STENCIL_BITS: number;\n    STENCIL_BUFFER_BIT: number;\n    STENCIL_CLEAR_VALUE: number;\n    STENCIL_FAIL: number;\n    STENCIL_FUNC: number;\n    STENCIL_INDEX: number;\n    STENCIL_INDEX8: number;\n    STENCIL_PASS_DEPTH_FAIL: number;\n    STENCIL_PASS_DEPTH_PASS: number;\n    STENCIL_REF: number;\n    STENCIL_TEST: number;\n    STENCIL_VALUE_MASK: number;\n    STENCIL_WRITEMASK: number;\n    STREAM_DRAW: number;\n    SUBPIXEL_BITS: number;\n    TEXTURE: number;\n    TEXTURE0: number;\n    TEXTURE1: number;\n    TEXTURE10: number;\n    TEXTURE11: number;\n    TEXTURE12: number;\n    TEXTURE13: number;\n    TEXTURE14: number;\n    TEXTURE15: number;\n    TEXTURE16: number;\n    TEXTURE17: number;\n    TEXTURE18: number;\n    TEXTURE19: number;\n    TEXTURE2: number;\n    TEXTURE20: number;\n    TEXTURE21: number;\n    TEXTURE22: number;\n    TEXTURE23: number;\n    TEXTURE24: number;\n    TEXTURE25: number;\n    TEXTURE26: number;\n    TEXTURE27: number;\n    TEXTURE28: number;\n    TEXTURE29: number;\n    TEXTURE3: number;\n    TEXTURE30: number;\n    TEXTURE31: number;\n    TEXTURE4: number;\n    TEXTURE5: number;\n    TEXTURE6: number;\n    TEXTURE7: number;\n    TEXTURE8: number;\n    TEXTURE9: number;\n    TEXTURE_2D: number;\n    TEXTURE_BINDING_2D: number;\n    TEXTURE_BINDING_CUBE_MAP: number;\n    TEXTURE_CUBE_MAP: number;\n    TEXTURE_CUBE_MAP_NEGATIVE_X: number;\n    TEXTURE_CUBE_MAP_NEGATIVE_Y: number;\n    TEXTURE_CUBE_MAP_NEGATIVE_Z: number;\n    TEXTURE_CUBE_MAP_POSITIVE_X: number;\n    TEXTURE_CUBE_MAP_POSITIVE_Y: number;\n    TEXTURE_CUBE_MAP_POSITIVE_Z: number;\n    TEXTURE_MAG_FILTER: number;\n    TEXTURE_MIN_FILTER: number;\n    TEXTURE_WRAP_S: number;\n    TEXTURE_WRAP_T: number;\n    TRIANGLES: number;\n    TRIANGLE_FAN: number;\n    TRIANGLE_STRIP: number;\n    UNPACK_ALIGNMENT: number;\n    UNPACK_COLORSPACE_CONVERSION_WEBGL: number;\n    UNPACK_FLIP_Y_WEBGL: number;\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;\n    UNSIGNED_BYTE: number;\n    UNSIGNED_INT: number;\n    UNSIGNED_SHORT: number;\n    UNSIGNED_SHORT_4_4_4_4: number;\n    UNSIGNED_SHORT_5_5_5_1: number;\n    UNSIGNED_SHORT_5_6_5: number;\n    VALIDATE_STATUS: number;\n    VENDOR: number;\n    VERSION: number;\n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;\n    VERTEX_ATTRIB_ARRAY_ENABLED: number;\n    VERTEX_ATTRIB_ARRAY_NORMALIZED: number;\n    VERTEX_ATTRIB_ARRAY_POINTER: number;\n    VERTEX_ATTRIB_ARRAY_SIZE: number;\n    VERTEX_ATTRIB_ARRAY_STRIDE: number;\n    VERTEX_ATTRIB_ARRAY_TYPE: number;\n    VERTEX_SHADER: number;\n    VIEWPORT: number;\n    ZERO: number;\n}\n\ndeclare var WebGLRenderingContext: {\n    prototype: WebGLRenderingContext;\n    new(): WebGLRenderingContext;\n    ACTIVE_ATTRIBUTES: number;\n    ACTIVE_TEXTURE: number;\n    ACTIVE_UNIFORMS: number;\n    ALIASED_LINE_WIDTH_RANGE: number;\n    ALIASED_POINT_SIZE_RANGE: number;\n    ALPHA: number;\n    ALPHA_BITS: number;\n    ALWAYS: number;\n    ARRAY_BUFFER: number;\n    ARRAY_BUFFER_BINDING: number;\n    ATTACHED_SHADERS: number;\n    BACK: number;\n    BLEND: number;\n    BLEND_COLOR: number;\n    BLEND_DST_ALPHA: number;\n    BLEND_DST_RGB: number;\n    BLEND_EQUATION: number;\n    BLEND_EQUATION_ALPHA: number;\n    BLEND_EQUATION_RGB: number;\n    BLEND_SRC_ALPHA: number;\n    BLEND_SRC_RGB: number;\n    BLUE_BITS: number;\n    BOOL: number;\n    BOOL_VEC2: number;\n    BOOL_VEC3: number;\n    BOOL_VEC4: number;\n    BROWSER_DEFAULT_WEBGL: number;\n    BUFFER_SIZE: number;\n    BUFFER_USAGE: number;\n    BYTE: number;\n    CCW: number;\n    CLAMP_TO_EDGE: number;\n    COLOR_ATTACHMENT0: number;\n    COLOR_BUFFER_BIT: number;\n    COLOR_CLEAR_VALUE: number;\n    COLOR_WRITEMASK: number;\n    COMPILE_STATUS: number;\n    COMPRESSED_TEXTURE_FORMATS: number;\n    CONSTANT_ALPHA: number;\n    CONSTANT_COLOR: number;\n    CONTEXT_LOST_WEBGL: number;\n    CULL_FACE: number;\n    CULL_FACE_MODE: number;\n    CURRENT_PROGRAM: number;\n    CURRENT_VERTEX_ATTRIB: number;\n    CW: number;\n    DECR: number;\n    DECR_WRAP: number;\n    DELETE_STATUS: number;\n    DEPTH_ATTACHMENT: number;\n    DEPTH_BITS: number;\n    DEPTH_BUFFER_BIT: number;\n    DEPTH_CLEAR_VALUE: number;\n    DEPTH_COMPONENT: number;\n    DEPTH_COMPONENT16: number;\n    DEPTH_FUNC: number;\n    DEPTH_RANGE: number;\n    DEPTH_STENCIL: number;\n    DEPTH_STENCIL_ATTACHMENT: number;\n    DEPTH_TEST: number;\n    DEPTH_WRITEMASK: number;\n    DITHER: number;\n    DONT_CARE: number;\n    DST_ALPHA: number;\n    DST_COLOR: number;\n    DYNAMIC_DRAW: number;\n    ELEMENT_ARRAY_BUFFER: number;\n    ELEMENT_ARRAY_BUFFER_BINDING: number;\n    EQUAL: number;\n    FASTEST: number;\n    FLOAT: number;\n    FLOAT_MAT2: number;\n    FLOAT_MAT3: number;\n    FLOAT_MAT4: number;\n    FLOAT_VEC2: number;\n    FLOAT_VEC3: number;\n    FLOAT_VEC4: number;\n    FRAGMENT_SHADER: number;\n    FRAMEBUFFER: number;\n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;\n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;\n    FRAMEBUFFER_BINDING: number;\n    FRAMEBUFFER_COMPLETE: number;\n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;\n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;\n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;\n    FRAMEBUFFER_UNSUPPORTED: number;\n    FRONT: number;\n    FRONT_AND_BACK: number;\n    FRONT_FACE: number;\n    FUNC_ADD: number;\n    FUNC_REVERSE_SUBTRACT: number;\n    FUNC_SUBTRACT: number;\n    GENERATE_MIPMAP_HINT: number;\n    GEQUAL: number;\n    GREATER: number;\n    GREEN_BITS: number;\n    HIGH_FLOAT: number;\n    HIGH_INT: number;\n    IMPLEMENTATION_COLOR_READ_FORMAT: number;\n    IMPLEMENTATION_COLOR_READ_TYPE: number;\n    INCR: number;\n    INCR_WRAP: number;\n    INT: number;\n    INT_VEC2: number;\n    INT_VEC3: number;\n    INT_VEC4: number;\n    INVALID_ENUM: number;\n    INVALID_FRAMEBUFFER_OPERATION: number;\n    INVALID_OPERATION: number;\n    INVALID_VALUE: number;\n    INVERT: number;\n    KEEP: number;\n    LEQUAL: number;\n    LESS: number;\n    LINEAR: number;\n    LINEAR_MIPMAP_LINEAR: number;\n    LINEAR_MIPMAP_NEAREST: number;\n    LINES: number;\n    LINE_LOOP: number;\n    LINE_STRIP: number;\n    LINE_WIDTH: number;\n    LINK_STATUS: number;\n    LOW_FLOAT: number;\n    LOW_INT: number;\n    LUMINANCE: number;\n    LUMINANCE_ALPHA: number;\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;\n    MAX_CUBE_MAP_TEXTURE_SIZE: number;\n    MAX_FRAGMENT_UNIFORM_VECTORS: number;\n    MAX_RENDERBUFFER_SIZE: number;\n    MAX_TEXTURE_IMAGE_UNITS: number;\n    MAX_TEXTURE_SIZE: number;\n    MAX_VARYING_VECTORS: number;\n    MAX_VERTEX_ATTRIBS: number;\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;\n    MAX_VERTEX_UNIFORM_VECTORS: number;\n    MAX_VIEWPORT_DIMS: number;\n    MEDIUM_FLOAT: number;\n    MEDIUM_INT: number;\n    MIRRORED_REPEAT: number;\n    NEAREST: number;\n    NEAREST_MIPMAP_LINEAR: number;\n    NEAREST_MIPMAP_NEAREST: number;\n    NEVER: number;\n    NICEST: number;\n    NONE: number;\n    NOTEQUAL: number;\n    NO_ERROR: number;\n    ONE: number;\n    ONE_MINUS_CONSTANT_ALPHA: number;\n    ONE_MINUS_CONSTANT_COLOR: number;\n    ONE_MINUS_DST_ALPHA: number;\n    ONE_MINUS_DST_COLOR: number;\n    ONE_MINUS_SRC_ALPHA: number;\n    ONE_MINUS_SRC_COLOR: number;\n    OUT_OF_MEMORY: number;\n    PACK_ALIGNMENT: number;\n    POINTS: number;\n    POLYGON_OFFSET_FACTOR: number;\n    POLYGON_OFFSET_FILL: number;\n    POLYGON_OFFSET_UNITS: number;\n    RED_BITS: number;\n    RENDERBUFFER: number;\n    RENDERBUFFER_ALPHA_SIZE: number;\n    RENDERBUFFER_BINDING: number;\n    RENDERBUFFER_BLUE_SIZE: number;\n    RENDERBUFFER_DEPTH_SIZE: number;\n    RENDERBUFFER_GREEN_SIZE: number;\n    RENDERBUFFER_HEIGHT: number;\n    RENDERBUFFER_INTERNAL_FORMAT: number;\n    RENDERBUFFER_RED_SIZE: number;\n    RENDERBUFFER_STENCIL_SIZE: number;\n    RENDERBUFFER_WIDTH: number;\n    RENDERER: number;\n    REPEAT: number;\n    REPLACE: number;\n    RGB: number;\n    RGB565: number;\n    RGB5_A1: number;\n    RGBA: number;\n    RGBA4: number;\n    SAMPLER_2D: number;\n    SAMPLER_CUBE: number;\n    SAMPLES: number;\n    SAMPLE_ALPHA_TO_COVERAGE: number;\n    SAMPLE_BUFFERS: number;\n    SAMPLE_COVERAGE: number;\n    SAMPLE_COVERAGE_INVERT: number;\n    SAMPLE_COVERAGE_VALUE: number;\n    SCISSOR_BOX: number;\n    SCISSOR_TEST: number;\n    SHADER_TYPE: number;\n    SHADING_LANGUAGE_VERSION: number;\n    SHORT: number;\n    SRC_ALPHA: number;\n    SRC_ALPHA_SATURATE: number;\n    SRC_COLOR: number;\n    STATIC_DRAW: number;\n    STENCIL_ATTACHMENT: number;\n    STENCIL_BACK_FAIL: number;\n    STENCIL_BACK_FUNC: number;\n    STENCIL_BACK_PASS_DEPTH_FAIL: number;\n    STENCIL_BACK_PASS_DEPTH_PASS: number;\n    STENCIL_BACK_REF: number;\n    STENCIL_BACK_VALUE_MASK: number;\n    STENCIL_BACK_WRITEMASK: number;\n    STENCIL_BITS: number;\n    STENCIL_BUFFER_BIT: number;\n    STENCIL_CLEAR_VALUE: number;\n    STENCIL_FAIL: number;\n    STENCIL_FUNC: number;\n    STENCIL_INDEX: number;\n    STENCIL_INDEX8: number;\n    STENCIL_PASS_DEPTH_FAIL: number;\n    STENCIL_PASS_DEPTH_PASS: number;\n    STENCIL_REF: number;\n    STENCIL_TEST: number;\n    STENCIL_VALUE_MASK: number;\n    STENCIL_WRITEMASK: number;\n    STREAM_DRAW: number;\n    SUBPIXEL_BITS: number;\n    TEXTURE: number;\n    TEXTURE0: number;\n    TEXTURE1: number;\n    TEXTURE10: number;\n    TEXTURE11: number;\n    TEXTURE12: number;\n    TEXTURE13: number;\n    TEXTURE14: number;\n    TEXTURE15: number;\n    TEXTURE16: number;\n    TEXTURE17: number;\n    TEXTURE18: number;\n    TEXTURE19: number;\n    TEXTURE2: number;\n    TEXTURE20: number;\n    TEXTURE21: number;\n    TEXTURE22: number;\n    TEXTURE23: number;\n    TEXTURE24: number;\n    TEXTURE25: number;\n    TEXTURE26: number;\n    TEXTURE27: number;\n    TEXTURE28: number;\n    TEXTURE29: number;\n    TEXTURE3: number;\n    TEXTURE30: number;\n    TEXTURE31: number;\n    TEXTURE4: number;\n    TEXTURE5: number;\n    TEXTURE6: number;\n    TEXTURE7: number;\n    TEXTURE8: number;\n    TEXTURE9: number;\n    TEXTURE_2D: number;\n    TEXTURE_BINDING_2D: number;\n    TEXTURE_BINDING_CUBE_MAP: number;\n    TEXTURE_CUBE_MAP: number;\n    TEXTURE_CUBE_MAP_NEGATIVE_X: number;\n    TEXTURE_CUBE_MAP_NEGATIVE_Y: number;\n    TEXTURE_CUBE_MAP_NEGATIVE_Z: number;\n    TEXTURE_CUBE_MAP_POSITIVE_X: number;\n    TEXTURE_CUBE_MAP_POSITIVE_Y: number;\n    TEXTURE_CUBE_MAP_POSITIVE_Z: number;\n    TEXTURE_MAG_FILTER: number;\n    TEXTURE_MIN_FILTER: number;\n    TEXTURE_WRAP_S: number;\n    TEXTURE_WRAP_T: number;\n    TRIANGLES: number;\n    TRIANGLE_FAN: number;\n    TRIANGLE_STRIP: number;\n    UNPACK_ALIGNMENT: number;\n    UNPACK_COLORSPACE_CONVERSION_WEBGL: number;\n    UNPACK_FLIP_Y_WEBGL: number;\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;\n    UNSIGNED_BYTE: number;\n    UNSIGNED_INT: number;\n    UNSIGNED_SHORT: number;\n    UNSIGNED_SHORT_4_4_4_4: number;\n    UNSIGNED_SHORT_5_5_5_1: number;\n    UNSIGNED_SHORT_5_6_5: number;\n    VALIDATE_STATUS: number;\n    VENDOR: number;\n    VERSION: number;\n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;\n    VERTEX_ATTRIB_ARRAY_ENABLED: number;\n    VERTEX_ATTRIB_ARRAY_NORMALIZED: number;\n    VERTEX_ATTRIB_ARRAY_POINTER: number;\n    VERTEX_ATTRIB_ARRAY_SIZE: number;\n    VERTEX_ATTRIB_ARRAY_STRIDE: number;\n    VERTEX_ATTRIB_ARRAY_TYPE: number;\n    VERTEX_SHADER: number;\n    VIEWPORT: number;\n    ZERO: number;\n}\n\ninterface WebGLShader extends WebGLObject {\n}\n\ndeclare var WebGLShader: {\n    prototype: WebGLShader;\n    new(): WebGLShader;\n}\n\ninterface WebGLShaderPrecisionFormat {\n    precision: number;\n    rangeMax: number;\n    rangeMin: number;\n}\n\ndeclare var WebGLShaderPrecisionFormat: {\n    prototype: WebGLShaderPrecisionFormat;\n    new(): WebGLShaderPrecisionFormat;\n}\n\ninterface WebGLTexture extends WebGLObject {\n}\n\ndeclare var WebGLTexture: {\n    prototype: WebGLTexture;\n    new(): WebGLTexture;\n}\n\ninterface WebGLUniformLocation {\n}\n\ndeclare var WebGLUniformLocation: {\n    prototype: WebGLUniformLocation;\n    new(): WebGLUniformLocation;\n}\n\ninterface WebKitCSSMatrix {\n    a: number;\n    b: number;\n    c: number;\n    d: number;\n    e: number;\n    f: number;\n    m11: number;\n    m12: number;\n    m13: number;\n    m14: number;\n    m21: number;\n    m22: number;\n    m23: number;\n    m24: number;\n    m31: number;\n    m32: number;\n    m33: number;\n    m34: number;\n    m41: number;\n    m42: number;\n    m43: number;\n    m44: number;\n    inverse(): WebKitCSSMatrix;\n    multiply(secondMatrix: WebKitCSSMatrix): WebKitCSSMatrix;\n    rotate(angleX: number, angleY?: number, angleZ?: number): WebKitCSSMatrix;\n    rotateAxisAngle(x: number, y: number, z: number, angle: number): WebKitCSSMatrix;\n    scale(scaleX: number, scaleY?: number, scaleZ?: number): WebKitCSSMatrix;\n    setMatrixValue(value: string): void;\n    skewX(angle: number): WebKitCSSMatrix;\n    skewY(angle: number): WebKitCSSMatrix;\n    toString(): string;\n    translate(x: number, y: number, z?: number): WebKitCSSMatrix;\n}\n\ndeclare var WebKitCSSMatrix: {\n    prototype: WebKitCSSMatrix;\n    new(text?: string): WebKitCSSMatrix;\n}\n\ninterface WebKitPoint {\n    x: number;\n    y: number;\n}\n\ndeclare var WebKitPoint: {\n    prototype: WebKitPoint;\n    new(x?: number, y?: number): WebKitPoint;\n}\n\ninterface WebSocket extends EventTarget {\n    binaryType: string;\n    bufferedAmount: number;\n    extensions: string;\n    onclose: (ev: CloseEvent) => any;\n    onerror: (ev: Event) => any;\n    onmessage: (ev: MessageEvent) => any;\n    onopen: (ev: Event) => any;\n    protocol: string;\n    readyState: number;\n    url: string;\n    close(code?: number, reason?: string): void;\n    send(data: any): void;\n    CLOSED: number;\n    CLOSING: number;\n    CONNECTING: number;\n    OPEN: number;\n    addEventListener(type: \"close\", listener: (ev: CloseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"open\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var WebSocket: {\n    prototype: WebSocket;\n    new(url: string, protocols?: string | string[]): WebSocket;\n    CLOSED: number;\n    CLOSING: number;\n    CONNECTING: number;\n    OPEN: number;\n}\n\ninterface WheelEvent extends MouseEvent {\n    deltaMode: number;\n    deltaX: number;\n    deltaY: number;\n    deltaZ: number;\n    getCurrentPoint(element: Element): void;\n    initWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number): void;\n    DOM_DELTA_LINE: number;\n    DOM_DELTA_PAGE: number;\n    DOM_DELTA_PIXEL: number;\n}\n\ndeclare var WheelEvent: {\n    prototype: WheelEvent;\n    new(typeArg: string, eventInitDict?: WheelEventInit): WheelEvent;\n    DOM_DELTA_LINE: number;\n    DOM_DELTA_PAGE: number;\n    DOM_DELTA_PIXEL: number;\n}\n\ninterface Window extends EventTarget, WindowTimers, WindowSessionStorage, WindowLocalStorage, WindowConsole, GlobalEventHandlers, IDBEnvironment, WindowBase64 {\n    animationStartTime: number;\n    applicationCache: ApplicationCache;\n    clientInformation: Navigator;\n    closed: boolean;\n    crypto: Crypto;\n    defaultStatus: string;\n    devicePixelRatio: number;\n    doNotTrack: string;\n    document: Document;\n    event: Event;\n    external: External;\n    frameElement: Element;\n    frames: Window;\n    history: History;\n    innerHeight: number;\n    innerWidth: number;\n    length: number;\n    location: Location;\n    locationbar: BarProp;\n    menubar: BarProp;\n    msAnimationStartTime: number;\n    name: string;\n    navigator: Navigator;\n    offscreenBuffering: string | boolean;\n    onabort: (ev: Event) => any;\n    onafterprint: (ev: Event) => any;\n    onbeforeprint: (ev: Event) => any;\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\n    onblur: (ev: FocusEvent) => any;\n    oncanplay: (ev: Event) => any;\n    oncanplaythrough: (ev: Event) => any;\n    onchange: (ev: Event) => any;\n    onclick: (ev: MouseEvent) => any;\n    oncompassneedscalibration: (ev: Event) => any;\n    oncontextmenu: (ev: PointerEvent) => any;\n    ondblclick: (ev: MouseEvent) => any;\n    ondevicemotion: (ev: DeviceMotionEvent) => any;\n    ondeviceorientation: (ev: DeviceOrientationEvent) => any;\n    ondrag: (ev: DragEvent) => any;\n    ondragend: (ev: DragEvent) => any;\n    ondragenter: (ev: DragEvent) => any;\n    ondragleave: (ev: DragEvent) => any;\n    ondragover: (ev: DragEvent) => any;\n    ondragstart: (ev: DragEvent) => any;\n    ondrop: (ev: DragEvent) => any;\n    ondurationchange: (ev: Event) => any;\n    onemptied: (ev: Event) => any;\n    onended: (ev: Event) => any;\n    onerror: ErrorEventHandler;\n    onfocus: (ev: FocusEvent) => any;\n    onhashchange: (ev: HashChangeEvent) => any;\n    oninput: (ev: Event) => any;\n    onkeydown: (ev: KeyboardEvent) => any;\n    onkeypress: (ev: KeyboardEvent) => any;\n    onkeyup: (ev: KeyboardEvent) => any;\n    onload: (ev: Event) => any;\n    onloadeddata: (ev: Event) => any;\n    onloadedmetadata: (ev: Event) => any;\n    onloadstart: (ev: Event) => any;\n    onmessage: (ev: MessageEvent) => any;\n    onmousedown: (ev: MouseEvent) => any;\n    onmouseenter: (ev: MouseEvent) => any;\n    onmouseleave: (ev: MouseEvent) => any;\n    onmousemove: (ev: MouseEvent) => any;\n    onmouseout: (ev: MouseEvent) => any;\n    onmouseover: (ev: MouseEvent) => any;\n    onmouseup: (ev: MouseEvent) => any;\n    onmousewheel: (ev: MouseWheelEvent) => any;\n    onmsgesturechange: (ev: MSGestureEvent) => any;\n    onmsgesturedoubletap: (ev: MSGestureEvent) => any;\n    onmsgestureend: (ev: MSGestureEvent) => any;\n    onmsgesturehold: (ev: MSGestureEvent) => any;\n    onmsgesturestart: (ev: MSGestureEvent) => any;\n    onmsgesturetap: (ev: MSGestureEvent) => any;\n    onmsinertiastart: (ev: MSGestureEvent) => any;\n    onmspointercancel: (ev: MSPointerEvent) => any;\n    onmspointerdown: (ev: MSPointerEvent) => any;\n    onmspointerenter: (ev: MSPointerEvent) => any;\n    onmspointerleave: (ev: MSPointerEvent) => any;\n    onmspointermove: (ev: MSPointerEvent) => any;\n    onmspointerout: (ev: MSPointerEvent) => any;\n    onmspointerover: (ev: MSPointerEvent) => any;\n    onmspointerup: (ev: MSPointerEvent) => any;\n    onoffline: (ev: Event) => any;\n    ononline: (ev: Event) => any;\n    onorientationchange: (ev: Event) => any;\n    onpagehide: (ev: PageTransitionEvent) => any;\n    onpageshow: (ev: PageTransitionEvent) => any;\n    onpause: (ev: Event) => any;\n    onplay: (ev: Event) => any;\n    onplaying: (ev: Event) => any;\n    onpopstate: (ev: PopStateEvent) => any;\n    onprogress: (ev: ProgressEvent) => any;\n    onratechange: (ev: Event) => any;\n    onreadystatechange: (ev: ProgressEvent) => any;\n    onreset: (ev: Event) => any;\n    onresize: (ev: UIEvent) => any;\n    onscroll: (ev: UIEvent) => any;\n    onseeked: (ev: Event) => any;\n    onseeking: (ev: Event) => any;\n    onselect: (ev: UIEvent) => any;\n    onstalled: (ev: Event) => any;\n    onstorage: (ev: StorageEvent) => any;\n    onsubmit: (ev: Event) => any;\n    onsuspend: (ev: Event) => any;\n    ontimeupdate: (ev: Event) => any;\n    ontouchcancel: any;\n    ontouchend: any;\n    ontouchmove: any;\n    ontouchstart: any;\n    onunload: (ev: Event) => any;\n    onvolumechange: (ev: Event) => any;\n    onwaiting: (ev: Event) => any;\n    opener: Window;\n    orientation: string | number;\n    outerHeight: number;\n    outerWidth: number;\n    pageXOffset: number;\n    pageYOffset: number;\n    parent: Window;\n    performance: Performance;\n    personalbar: BarProp;\n    screen: Screen;\n    screenLeft: number;\n    screenTop: number;\n    screenX: number;\n    screenY: number;\n    scrollX: number;\n    scrollY: number;\n    scrollbars: BarProp;\n    self: Window;\n    status: string;\n    statusbar: BarProp;\n    styleMedia: StyleMedia;\n    toolbar: BarProp;\n    top: Window;\n    window: Window;\n    URL: URL;\n    alert(message?: any): void;\n    blur(): void;\n    cancelAnimationFrame(handle: number): void;\n    captureEvents(): void;\n    close(): void;\n    confirm(message?: string): boolean;\n    focus(): void;\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\n    getMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList;\n    getSelection(): Selection;\n    matchMedia(mediaQuery: string): MediaQueryList;\n    moveBy(x?: number, y?: number): void;\n    moveTo(x?: number, y?: number): void;\n    msCancelRequestAnimationFrame(handle: number): void;\n    msMatchMedia(mediaQuery: string): MediaQueryList;\n    msRequestAnimationFrame(callback: FrameRequestCallback): number;\n    msWriteProfilerMark(profilerMarkName: string): void;\n    open(url?: string, target?: string, features?: string, replace?: boolean): Window;\n    postMessage(message: any, targetOrigin: string, ports?: any): void;\n    print(): void;\n    prompt(message?: string, _default?: string): string;\n    releaseEvents(): void;\n    requestAnimationFrame(callback: FrameRequestCallback): number;\n    resizeBy(x?: number, y?: number): void;\n    resizeTo(x?: number, y?: number): void;\n    scroll(x?: number, y?: number): void;\n    scrollBy(x?: number, y?: number): void;\n    scrollTo(x?: number, y?: number): void;\n    webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint;\n    webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint;\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"compassneedscalibration\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"devicemotion\", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"deviceorientation\", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n    [index: number]: Window;\n}\n\ndeclare var Window: {\n    prototype: Window;\n    new(): Window;\n}\n\ninterface Worker extends EventTarget, AbstractWorker {\n    onmessage: (ev: MessageEvent) => any;\n    postMessage(message: any, ports?: any): void;\n    terminate(): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var Worker: {\n    prototype: Worker;\n    new(stringUrl: string): Worker;\n}\n\ninterface XMLDocument extends Document {\n}\n\ndeclare var XMLDocument: {\n    prototype: XMLDocument;\n    new(): XMLDocument;\n}\n\ninterface XMLHttpRequest extends EventTarget, XMLHttpRequestEventTarget {\n    msCaching: string;\n    onreadystatechange: (ev: ProgressEvent) => any;\n    readyState: number;\n    response: any;\n    responseBody: any;\n    responseText: string;\n    responseType: string;\n    responseXML: any;\n    status: number;\n    statusText: string;\n    timeout: number;\n    upload: XMLHttpRequestUpload;\n    withCredentials: boolean;\n    abort(): void;\n    getAllResponseHeaders(): string;\n    getResponseHeader(header: string): string;\n    msCachingEnabled(): boolean;\n    open(method: string, url: string, async?: boolean, user?: string, password?: string): void;\n    overrideMimeType(mime: string): void;\n    send(data?: Document): void;\n    send(data?: string): void;\n    send(data?: any): void;\n    setRequestHeader(header: string, value: string): void;\n    DONE: number;\n    HEADERS_RECEIVED: number;\n    LOADING: number;\n    OPENED: number;\n    UNSENT: number;\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeout\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var XMLHttpRequest: {\n    prototype: XMLHttpRequest;\n    new(): XMLHttpRequest;\n    DONE: number;\n    HEADERS_RECEIVED: number;\n    LOADING: number;\n    OPENED: number;\n    UNSENT: number;\n    create(): XMLHttpRequest;\n}\n\ninterface XMLHttpRequestUpload extends EventTarget, XMLHttpRequestEventTarget {\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ndeclare var XMLHttpRequestUpload: {\n    prototype: XMLHttpRequestUpload;\n    new(): XMLHttpRequestUpload;\n}\n\ninterface XMLSerializer {\n    serializeToString(target: Node): string;\n}\n\ndeclare var XMLSerializer: {\n    prototype: XMLSerializer;\n    new(): XMLSerializer;\n}\n\ninterface XPathEvaluator {\n    createExpression(expression: string, resolver: XPathNSResolver): XPathExpression;\n    createNSResolver(nodeResolver?: Node): XPathNSResolver;\n    evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult;\n}\n\ndeclare var XPathEvaluator: {\n    prototype: XPathEvaluator;\n    new(): XPathEvaluator;\n}\n\ninterface XPathExpression {\n    evaluate(contextNode: Node, type: number, result: XPathResult): XPathExpression;\n}\n\ndeclare var XPathExpression: {\n    prototype: XPathExpression;\n    new(): XPathExpression;\n}\n\ninterface XPathNSResolver {\n    lookupNamespaceURI(prefix: string): string;\n}\n\ndeclare var XPathNSResolver: {\n    prototype: XPathNSResolver;\n    new(): XPathNSResolver;\n}\n\ninterface XPathResult {\n    booleanValue: boolean;\n    invalidIteratorState: boolean;\n    numberValue: number;\n    resultType: number;\n    singleNodeValue: Node;\n    snapshotLength: number;\n    stringValue: string;\n    iterateNext(): Node;\n    snapshotItem(index: number): Node;\n    ANY_TYPE: number;\n    ANY_UNORDERED_NODE_TYPE: number;\n    BOOLEAN_TYPE: number;\n    FIRST_ORDERED_NODE_TYPE: number;\n    NUMBER_TYPE: number;\n    ORDERED_NODE_ITERATOR_TYPE: number;\n    ORDERED_NODE_SNAPSHOT_TYPE: number;\n    STRING_TYPE: number;\n    UNORDERED_NODE_ITERATOR_TYPE: number;\n    UNORDERED_NODE_SNAPSHOT_TYPE: number;\n}\n\ndeclare var XPathResult: {\n    prototype: XPathResult;\n    new(): XPathResult;\n    ANY_TYPE: number;\n    ANY_UNORDERED_NODE_TYPE: number;\n    BOOLEAN_TYPE: number;\n    FIRST_ORDERED_NODE_TYPE: number;\n    NUMBER_TYPE: number;\n    ORDERED_NODE_ITERATOR_TYPE: number;\n    ORDERED_NODE_SNAPSHOT_TYPE: number;\n    STRING_TYPE: number;\n    UNORDERED_NODE_ITERATOR_TYPE: number;\n    UNORDERED_NODE_SNAPSHOT_TYPE: number;\n}\n\ninterface XSLTProcessor {\n    clearParameters(): void;\n    getParameter(namespaceURI: string, localName: string): any;\n    importStylesheet(style: Node): void;\n    removeParameter(namespaceURI: string, localName: string): void;\n    reset(): void;\n    setParameter(namespaceURI: string, localName: string, value: any): void;\n    transformToDocument(source: Node): Document;\n    transformToFragment(source: Node, document: Document): DocumentFragment;\n}\n\ndeclare var XSLTProcessor: {\n    prototype: XSLTProcessor;\n    new(): XSLTProcessor;\n}\n\ninterface AbstractWorker {\n    onerror: (ev: Event) => any;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ninterface ChildNode {\n    remove(): void;\n}\n\ninterface DOML2DeprecatedColorProperty {\n    color: string;\n}\n\ninterface DOML2DeprecatedSizeProperty {\n    size: number;\n}\n\ninterface DocumentEvent {\n    createEvent(eventInterface:\"AnimationEvent\"): AnimationEvent;\n    createEvent(eventInterface:\"AriaRequestEvent\"): AriaRequestEvent;\n    createEvent(eventInterface:\"AudioProcessingEvent\"): AudioProcessingEvent;\n    createEvent(eventInterface:\"BeforeUnloadEvent\"): BeforeUnloadEvent;\n    createEvent(eventInterface:\"ClipboardEvent\"): ClipboardEvent;\n    createEvent(eventInterface:\"CloseEvent\"): CloseEvent;\n    createEvent(eventInterface:\"CommandEvent\"): CommandEvent;\n    createEvent(eventInterface:\"CompositionEvent\"): CompositionEvent;\n    createEvent(eventInterface:\"CustomEvent\"): CustomEvent;\n    createEvent(eventInterface:\"DeviceMotionEvent\"): DeviceMotionEvent;\n    createEvent(eventInterface:\"DeviceOrientationEvent\"): DeviceOrientationEvent;\n    createEvent(eventInterface:\"DragEvent\"): DragEvent;\n    createEvent(eventInterface:\"ErrorEvent\"): ErrorEvent;\n    createEvent(eventInterface:\"Event\"): Event;\n    createEvent(eventInterface:\"Events\"): Event;\n    createEvent(eventInterface:\"FocusEvent\"): FocusEvent;\n    createEvent(eventInterface:\"GamepadEvent\"): GamepadEvent;\n    createEvent(eventInterface:\"HashChangeEvent\"): HashChangeEvent;\n    createEvent(eventInterface:\"IDBVersionChangeEvent\"): IDBVersionChangeEvent;\n    createEvent(eventInterface:\"KeyboardEvent\"): KeyboardEvent;\n    createEvent(eventInterface:\"LongRunningScriptDetectedEvent\"): LongRunningScriptDetectedEvent;\n    createEvent(eventInterface:\"MSGestureEvent\"): MSGestureEvent;\n    createEvent(eventInterface:\"MSManipulationEvent\"): MSManipulationEvent;\n    createEvent(eventInterface:\"MSMediaKeyMessageEvent\"): MSMediaKeyMessageEvent;\n    createEvent(eventInterface:\"MSMediaKeyNeededEvent\"): MSMediaKeyNeededEvent;\n    createEvent(eventInterface:\"MSPointerEvent\"): MSPointerEvent;\n    createEvent(eventInterface:\"MSSiteModeEvent\"): MSSiteModeEvent;\n    createEvent(eventInterface:\"MessageEvent\"): MessageEvent;\n    createEvent(eventInterface:\"MouseEvent\"): MouseEvent;\n    createEvent(eventInterface:\"MouseEvents\"): MouseEvent;\n    createEvent(eventInterface:\"MouseWheelEvent\"): MouseWheelEvent;\n    createEvent(eventInterface:\"MutationEvent\"): MutationEvent;\n    createEvent(eventInterface:\"MutationEvents\"): MutationEvent;\n    createEvent(eventInterface:\"NavigationCompletedEvent\"): NavigationCompletedEvent;\n    createEvent(eventInterface:\"NavigationEvent\"): NavigationEvent;\n    createEvent(eventInterface:\"NavigationEventWithReferrer\"): NavigationEventWithReferrer;\n    createEvent(eventInterface:\"OfflineAudioCompletionEvent\"): OfflineAudioCompletionEvent;\n    createEvent(eventInterface:\"PageTransitionEvent\"): PageTransitionEvent;\n    createEvent(eventInterface:\"PermissionRequestedEvent\"): PermissionRequestedEvent;\n    createEvent(eventInterface:\"PointerEvent\"): PointerEvent;\n    createEvent(eventInterface:\"PopStateEvent\"): PopStateEvent;\n    createEvent(eventInterface:\"ProgressEvent\"): ProgressEvent;\n    createEvent(eventInterface:\"SVGZoomEvent\"): SVGZoomEvent;\n    createEvent(eventInterface:\"SVGZoomEvents\"): SVGZoomEvent;\n    createEvent(eventInterface:\"ScriptNotifyEvent\"): ScriptNotifyEvent;\n    createEvent(eventInterface:\"StorageEvent\"): StorageEvent;\n    createEvent(eventInterface:\"TextEvent\"): TextEvent;\n    createEvent(eventInterface:\"TouchEvent\"): TouchEvent;\n    createEvent(eventInterface:\"TrackEvent\"): TrackEvent;\n    createEvent(eventInterface:\"TransitionEvent\"): TransitionEvent;\n    createEvent(eventInterface:\"UIEvent\"): UIEvent;\n    createEvent(eventInterface:\"UIEvents\"): UIEvent;\n    createEvent(eventInterface:\"UnviewableContentIdentifiedEvent\"): UnviewableContentIdentifiedEvent;\n    createEvent(eventInterface:\"WebGLContextEvent\"): WebGLContextEvent;\n    createEvent(eventInterface:\"WheelEvent\"): WheelEvent;\n    createEvent(eventInterface: string): Event;\n}\n\ninterface ElementTraversal {\n    childElementCount: number;\n    firstElementChild: Element;\n    lastElementChild: Element;\n    nextElementSibling: Element;\n    previousElementSibling: Element;\n}\n\ninterface GetSVGDocument {\n    getSVGDocument(): Document;\n}\n\ninterface GlobalEventHandlers {\n    onpointercancel: (ev: PointerEvent) => any;\n    onpointerdown: (ev: PointerEvent) => any;\n    onpointerenter: (ev: PointerEvent) => any;\n    onpointerleave: (ev: PointerEvent) => any;\n    onpointermove: (ev: PointerEvent) => any;\n    onpointerout: (ev: PointerEvent) => any;\n    onpointerover: (ev: PointerEvent) => any;\n    onpointerup: (ev: PointerEvent) => any;\n    onwheel: (ev: WheelEvent) => any;\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ninterface HTMLTableAlignment {\n    /**\n      * Sets or retrieves a value that you can use to implement your own ch functionality for the object.\n      */\n    ch: string;\n    /**\n      * Sets or retrieves a value that you can use to implement your own chOff functionality for the object.\n      */\n    chOff: string;\n    /**\n      * Sets or retrieves how text and other content are vertically aligned within the object that contains them.\n      */\n    vAlign: string;\n}\n\ninterface IDBEnvironment {\n    indexedDB: IDBFactory;\n    msIndexedDB: IDBFactory;\n}\n\ninterface LinkStyle {\n    sheet: StyleSheet;\n}\n\ninterface MSBaseReader {\n    onabort: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onload: (ev: Event) => any;\n    onloadend: (ev: ProgressEvent) => any;\n    onloadstart: (ev: Event) => any;\n    onprogress: (ev: ProgressEvent) => any;\n    readyState: number;\n    result: any;\n    abort(): void;\n    DONE: number;\n    EMPTY: number;\n    LOADING: number;\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ninterface MSFileSaver {\n    msSaveBlob(blob: any, defaultName?: string): boolean;\n    msSaveOrOpenBlob(blob: any, defaultName?: string): boolean;\n}\n\ninterface MSNavigatorDoNotTrack {\n    confirmSiteSpecificTrackingException(args: ConfirmSiteSpecificExceptionsInformation): boolean;\n    confirmWebWideTrackingException(args: ExceptionInformation): boolean;\n    removeSiteSpecificTrackingException(args: ExceptionInformation): void;\n    removeWebWideTrackingException(args: ExceptionInformation): void;\n    storeSiteSpecificTrackingException(args: StoreSiteSpecificExceptionsInformation): void;\n    storeWebWideTrackingException(args: StoreExceptionsInformation): void;\n}\n\ninterface NavigatorContentUtils {\n}\n\ninterface NavigatorGeolocation {\n    geolocation: Geolocation;\n}\n\ninterface NavigatorID {\n    appName: string;\n    appVersion: string;\n    platform: string;\n    product: string;\n    productSub: string;\n    userAgent: string;\n    vendor: string;\n    vendorSub: string;\n}\n\ninterface NavigatorOnLine {\n    onLine: boolean;\n}\n\ninterface NavigatorStorageUtils {\n}\n\ninterface NodeSelector {\n    querySelector(selectors: string): Element;\n    querySelectorAll(selectors: string): NodeListOf<Element>;\n}\n\ninterface RandomSource {\n    getRandomValues(array: ArrayBufferView): ArrayBufferView;\n}\n\ninterface SVGAnimatedPathData {\n    pathSegList: SVGPathSegList;\n}\n\ninterface SVGAnimatedPoints {\n    animatedPoints: SVGPointList;\n    points: SVGPointList;\n}\n\ninterface SVGExternalResourcesRequired {\n    externalResourcesRequired: SVGAnimatedBoolean;\n}\n\ninterface SVGFilterPrimitiveStandardAttributes extends SVGStylable {\n    height: SVGAnimatedLength;\n    result: SVGAnimatedString;\n    width: SVGAnimatedLength;\n    x: SVGAnimatedLength;\n    y: SVGAnimatedLength;\n}\n\ninterface SVGFitToViewBox {\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\n    viewBox: SVGAnimatedRect;\n}\n\ninterface SVGLangSpace {\n    xmllang: string;\n    xmlspace: string;\n}\n\ninterface SVGLocatable {\n    farthestViewportElement: SVGElement;\n    nearestViewportElement: SVGElement;\n    getBBox(): SVGRect;\n    getCTM(): SVGMatrix;\n    getScreenCTM(): SVGMatrix;\n    getTransformToElement(element: SVGElement): SVGMatrix;\n}\n\ninterface SVGStylable {\n    className: any;\n    style: CSSStyleDeclaration;\n}\n\ninterface SVGTests {\n    requiredExtensions: SVGStringList;\n    requiredFeatures: SVGStringList;\n    systemLanguage: SVGStringList;\n    hasExtension(extension: string): boolean;\n}\n\ninterface SVGTransformable extends SVGLocatable {\n    transform: SVGAnimatedTransformList;\n}\n\ninterface SVGURIReference {\n    href: SVGAnimatedString;\n}\n\ninterface WindowBase64 {\n    atob(encodedString: string): string;\n    btoa(rawString: string): string;\n}\n\ninterface WindowConsole {\n    console: Console;\n}\n\ninterface WindowLocalStorage {\n    localStorage: Storage;\n}\n\ninterface WindowSessionStorage {\n    sessionStorage: Storage;\n}\n\ninterface WindowTimers extends Object, WindowTimersExtension {\n    clearInterval(handle: number): void;\n    clearTimeout(handle: number): void;\n    setInterval(handler: any, timeout?: any, ...args: any[]): number;\n    setTimeout(handler: any, timeout?: any, ...args: any[]): number;\n}\n\ninterface WindowTimersExtension {\n    clearImmediate(handle: number): void;\n    msClearImmediate(handle: number): void;\n    msSetImmediate(expression: any, ...args: any[]): number;\n    setImmediate(expression: any, ...args: any[]): number;\n}\n\ninterface XMLHttpRequestEventTarget {\n    onabort: (ev: Event) => any;\n    onerror: (ev: Event) => any;\n    onload: (ev: Event) => any;\n    onloadend: (ev: ProgressEvent) => any;\n    onloadstart: (ev: Event) => any;\n    onprogress: (ev: ProgressEvent) => any;\n    ontimeout: (ev: ProgressEvent) => any;\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: \"timeout\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\n}\n\ninterface StorageEventInit extends EventInit {\n    key?: string;\n    oldValue?: string;\n    newValue?: string;\n    url: string;\n    storageArea?: Storage;\n}\n\ninterface IDBObjectStoreParameters {\n    keyPath?: string | string[];\n    autoIncrement?: boolean;\n}\n\ninterface IDBIndexParameters {\n    unique?: boolean;\n    multiEntry?: boolean;\n}\n\ninterface NodeListOf<TNode extends Node> extends NodeList {\n    length: number;\n    item(index: number): TNode;\n    [index: number]: TNode;\n}\n\ninterface BlobPropertyBag {\n    type?: string;\n    endings?: string;\n}\n\ninterface FilePropertyBag {\n    type?: string;\n    lastModified?: number;\n}\n\ninterface EventListenerObject {\n    handleEvent(evt: Event): void;\n}\n\ninterface MessageEventInit extends EventInit {\n    data?: any;\n    origin?: string;\n    lastEventId?: string;\n    channel?: string;\n    source?: any;\n    ports?: MessagePort[];\n}\n\ninterface ProgressEventInit extends EventInit {\n    lengthComputable?: boolean;\n    loaded?: number;\n    total?: number;\n}\n\ninterface HTMLTemplateElement extends HTMLElement {\n    content: DocumentFragment;\n}\n\ndeclare var HTMLTemplateElement: {\n    prototype: HTMLTemplateElement;\n    new(): HTMLTemplateElement;\n}\n\ninterface HTMLPictureElement extends HTMLElement {\n}\n\ndeclare var HTMLPictureElement: {\n    prototype: HTMLPictureElement;\n    new(): HTMLPictureElement;\n}\n\ndeclare type EventListenerOrEventListenerObject = EventListener | EventListenerObject;\n\ninterface ErrorEventHandler {\n    (message: string, filename?: string, lineno?: number, colno?: number, error?:Error): void;\n}\ninterface PositionCallback {\n    (position: Position): void;\n}\ninterface PositionErrorCallback {\n    (error: PositionError): void;\n}\ninterface MediaQueryListListener {\n    (mql: MediaQueryList): void;\n}\ninterface MSLaunchUriCallback {\n    (): void;\n}\ninterface FrameRequestCallback {\n    (time: number): void;\n}\ninterface MSUnsafeFunctionCallback {\n    (): any;\n}\ninterface MSExecAtPriorityFunctionCallback {\n    (...args: any[]): any;\n}\ninterface MutationCallback {\n    (mutations: MutationRecord[], observer: MutationObserver): void;\n}\ninterface DecodeSuccessCallback {\n    (decodedData: AudioBuffer): void;\n}\ninterface DecodeErrorCallback {\n    (): void;\n}\ninterface FunctionStringCallback {\n    (data: string): void;\n}\ndeclare var Audio: {new(src?: string): HTMLAudioElement; };\ndeclare var Image: {new(width?: number, height?: number): HTMLImageElement; };\ndeclare var Option: {new(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean): HTMLOptionElement; };\ndeclare var animationStartTime: number;\ndeclare var applicationCache: ApplicationCache;\ndeclare var clientInformation: Navigator;\ndeclare var closed: boolean;\ndeclare var crypto: Crypto;\ndeclare var defaultStatus: string;\ndeclare var devicePixelRatio: number;\ndeclare var doNotTrack: string;\ndeclare var document: Document;\ndeclare var event: Event;\ndeclare var external: External;\ndeclare var frameElement: Element;\ndeclare var frames: Window;\ndeclare var history: History;\ndeclare var innerHeight: number;\ndeclare var innerWidth: number;\ndeclare var length: number;\ndeclare var location: Location;\ndeclare var locationbar: BarProp;\ndeclare var menubar: BarProp;\ndeclare var msAnimationStartTime: number;\ndeclare var name: string;\ndeclare var navigator: Navigator;\ndeclare var offscreenBuffering: string | boolean;\ndeclare var onabort: (ev: Event) => any;\ndeclare var onafterprint: (ev: Event) => any;\ndeclare var onbeforeprint: (ev: Event) => any;\ndeclare var onbeforeunload: (ev: BeforeUnloadEvent) => any;\ndeclare var onblur: (ev: FocusEvent) => any;\ndeclare var oncanplay: (ev: Event) => any;\ndeclare var oncanplaythrough: (ev: Event) => any;\ndeclare var onchange: (ev: Event) => any;\ndeclare var onclick: (ev: MouseEvent) => any;\ndeclare var oncompassneedscalibration: (ev: Event) => any;\ndeclare var oncontextmenu: (ev: PointerEvent) => any;\ndeclare var ondblclick: (ev: MouseEvent) => any;\ndeclare var ondevicemotion: (ev: DeviceMotionEvent) => any;\ndeclare var ondeviceorientation: (ev: DeviceOrientationEvent) => any;\ndeclare var ondrag: (ev: DragEvent) => any;\ndeclare var ondragend: (ev: DragEvent) => any;\ndeclare var ondragenter: (ev: DragEvent) => any;\ndeclare var ondragleave: (ev: DragEvent) => any;\ndeclare var ondragover: (ev: DragEvent) => any;\ndeclare var ondragstart: (ev: DragEvent) => any;\ndeclare var ondrop: (ev: DragEvent) => any;\ndeclare var ondurationchange: (ev: Event) => any;\ndeclare var onemptied: (ev: Event) => any;\ndeclare var onended: (ev: Event) => any;\ndeclare var onerror: ErrorEventHandler;\ndeclare var onfocus: (ev: FocusEvent) => any;\ndeclare var onhashchange: (ev: HashChangeEvent) => any;\ndeclare var oninput: (ev: Event) => any;\ndeclare var onkeydown: (ev: KeyboardEvent) => any;\ndeclare var onkeypress: (ev: KeyboardEvent) => any;\ndeclare var onkeyup: (ev: KeyboardEvent) => any;\ndeclare var onload: (ev: Event) => any;\ndeclare var onloadeddata: (ev: Event) => any;\ndeclare var onloadedmetadata: (ev: Event) => any;\ndeclare var onloadstart: (ev: Event) => any;\ndeclare var onmessage: (ev: MessageEvent) => any;\ndeclare var onmousedown: (ev: MouseEvent) => any;\ndeclare var onmouseenter: (ev: MouseEvent) => any;\ndeclare var onmouseleave: (ev: MouseEvent) => any;\ndeclare var onmousemove: (ev: MouseEvent) => any;\ndeclare var onmouseout: (ev: MouseEvent) => any;\ndeclare var onmouseover: (ev: MouseEvent) => any;\ndeclare var onmouseup: (ev: MouseEvent) => any;\ndeclare var onmousewheel: (ev: MouseWheelEvent) => any;\ndeclare var onmsgesturechange: (ev: MSGestureEvent) => any;\ndeclare var onmsgesturedoubletap: (ev: MSGestureEvent) => any;\ndeclare var onmsgestureend: (ev: MSGestureEvent) => any;\ndeclare var onmsgesturehold: (ev: MSGestureEvent) => any;\ndeclare var onmsgesturestart: (ev: MSGestureEvent) => any;\ndeclare var onmsgesturetap: (ev: MSGestureEvent) => any;\ndeclare var onmsinertiastart: (ev: MSGestureEvent) => any;\ndeclare var onmspointercancel: (ev: MSPointerEvent) => any;\ndeclare var onmspointerdown: (ev: MSPointerEvent) => any;\ndeclare var onmspointerenter: (ev: MSPointerEvent) => any;\ndeclare var onmspointerleave: (ev: MSPointerEvent) => any;\ndeclare var onmspointermove: (ev: MSPointerEvent) => any;\ndeclare var onmspointerout: (ev: MSPointerEvent) => any;\ndeclare var onmspointerover: (ev: MSPointerEvent) => any;\ndeclare var onmspointerup: (ev: MSPointerEvent) => any;\ndeclare var onoffline: (ev: Event) => any;\ndeclare var ononline: (ev: Event) => any;\ndeclare var onorientationchange: (ev: Event) => any;\ndeclare var onpagehide: (ev: PageTransitionEvent) => any;\ndeclare var onpageshow: (ev: PageTransitionEvent) => any;\ndeclare var onpause: (ev: Event) => any;\ndeclare var onplay: (ev: Event) => any;\ndeclare var onplaying: (ev: Event) => any;\ndeclare var onpopstate: (ev: PopStateEvent) => any;\ndeclare var onprogress: (ev: ProgressEvent) => any;\ndeclare var onratechange: (ev: Event) => any;\ndeclare var onreadystatechange: (ev: ProgressEvent) => any;\ndeclare var onreset: (ev: Event) => any;\ndeclare var onresize: (ev: UIEvent) => any;\ndeclare var onscroll: (ev: UIEvent) => any;\ndeclare var onseeked: (ev: Event) => any;\ndeclare var onseeking: (ev: Event) => any;\ndeclare var onselect: (ev: UIEvent) => any;\ndeclare var onstalled: (ev: Event) => any;\ndeclare var onstorage: (ev: StorageEvent) => any;\ndeclare var onsubmit: (ev: Event) => any;\ndeclare var onsuspend: (ev: Event) => any;\ndeclare var ontimeupdate: (ev: Event) => any;\ndeclare var ontouchcancel: any;\ndeclare var ontouchend: any;\ndeclare var ontouchmove: any;\ndeclare var ontouchstart: any;\ndeclare var onunload: (ev: Event) => any;\ndeclare var onvolumechange: (ev: Event) => any;\ndeclare var onwaiting: (ev: Event) => any;\ndeclare var opener: Window;\ndeclare var orientation: string | number;\ndeclare var outerHeight: number;\ndeclare var outerWidth: number;\ndeclare var pageXOffset: number;\ndeclare var pageYOffset: number;\ndeclare var parent: Window;\ndeclare var performance: Performance;\ndeclare var personalbar: BarProp;\ndeclare var screen: Screen;\ndeclare var screenLeft: number;\ndeclare var screenTop: number;\ndeclare var screenX: number;\ndeclare var screenY: number;\ndeclare var scrollX: number;\ndeclare var scrollY: number;\ndeclare var scrollbars: BarProp;\ndeclare var self: Window;\ndeclare var status: string;\ndeclare var statusbar: BarProp;\ndeclare var styleMedia: StyleMedia;\ndeclare var toolbar: BarProp;\ndeclare var top: Window;\ndeclare var window: Window;\ndeclare var URL: URL;\ndeclare function alert(message?: any): void;\ndeclare function blur(): void;\ndeclare function cancelAnimationFrame(handle: number): void;\ndeclare function captureEvents(): void;\ndeclare function close(): void;\ndeclare function confirm(message?: string): boolean;\ndeclare function focus(): void;\ndeclare function getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\ndeclare function getMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList;\ndeclare function getSelection(): Selection;\ndeclare function matchMedia(mediaQuery: string): MediaQueryList;\ndeclare function moveBy(x?: number, y?: number): void;\ndeclare function moveTo(x?: number, y?: number): void;\ndeclare function msCancelRequestAnimationFrame(handle: number): void;\ndeclare function msMatchMedia(mediaQuery: string): MediaQueryList;\ndeclare function msRequestAnimationFrame(callback: FrameRequestCallback): number;\ndeclare function msWriteProfilerMark(profilerMarkName: string): void;\ndeclare function open(url?: string, target?: string, features?: string, replace?: boolean): Window;\ndeclare function postMessage(message: any, targetOrigin: string, ports?: any): void;\ndeclare function print(): void;\ndeclare function prompt(message?: string, _default?: string): string;\ndeclare function releaseEvents(): void;\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\ndeclare function resizeBy(x?: number, y?: number): void;\ndeclare function resizeTo(x?: number, y?: number): void;\ndeclare function scroll(x?: number, y?: number): void;\ndeclare function scrollBy(x?: number, y?: number): void;\ndeclare function scrollTo(x?: number, y?: number): void;\ndeclare function webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint;\ndeclare function webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint;\ndeclare function toString(): string;\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\ndeclare function dispatchEvent(evt: Event): boolean;\ndeclare function removeEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\ndeclare function clearInterval(handle: number): void;\ndeclare function clearTimeout(handle: number): void;\ndeclare function setInterval(handler: any, timeout?: any, ...args: any[]): number;\ndeclare function setTimeout(handler: any, timeout?: any, ...args: any[]): number;\ndeclare function clearImmediate(handle: number): void;\ndeclare function msClearImmediate(handle: number): void;\ndeclare function msSetImmediate(expression: any, ...args: any[]): number;\ndeclare function setImmediate(expression: any, ...args: any[]): number;\ndeclare var sessionStorage: Storage;\ndeclare var localStorage: Storage;\ndeclare var console: Console;\ndeclare var onpointercancel: (ev: PointerEvent) => any;\ndeclare var onpointerdown: (ev: PointerEvent) => any;\ndeclare var onpointerenter: (ev: PointerEvent) => any;\ndeclare var onpointerleave: (ev: PointerEvent) => any;\ndeclare var onpointermove: (ev: PointerEvent) => any;\ndeclare var onpointerout: (ev: PointerEvent) => any;\ndeclare var onpointerover: (ev: PointerEvent) => any;\ndeclare var onpointerup: (ev: PointerEvent) => any;\ndeclare var onwheel: (ev: WheelEvent) => any;\ndeclare var indexedDB: IDBFactory;\ndeclare var msIndexedDB: IDBFactory;\ndeclare function atob(encodedString: string): string;\ndeclare function btoa(rawString: string): string;\ndeclare function addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"compassneedscalibration\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"devicemotion\", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"deviceorientation\", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;interface DOMTokenList {\n    [Symbol.iterator](): IterableIterator<string>;\n}\n\ninterface NodeList {\n    [Symbol.iterator](): IterableIterator<Node>\n}\n\ninterface NodeListOf<TNode extends Node> {\n    [Symbol.iterator](): IterableIterator<TNode>\n}\n\n/////////////////////////////\n/// WorkerGlobalScope APIs\n/////////////////////////////\n// These are only available in a Web Worker\ndeclare function importScripts(...urls: string[]): void;\n\n\n/////////////////////////////\n/// Windows Script Host APIS\n/////////////////////////////\n\n\ninterface ActiveXObject {\n    new (s: string): any;\n}\ndeclare var ActiveXObject: ActiveXObject;\n\ninterface ITextWriter {\n    Write(s: string): void;\n    WriteLine(s: string): void;\n    Close(): void;\n}\n\ninterface TextStreamBase {\n    /**\n     * The column number of the current character position in an input stream.\n     */\n    Column: number;\n\n    /**\n     * The current line number in an input stream.\n     */\n    Line: number;\n\n    /**\n     * Closes a text stream.\n     * It is not necessary to close standard streams; they close automatically when the process ends. If\n     * you close a standard stream, be aware that any other pointers to that standard stream become invalid.\n     */\n    Close(): void;\n}\n\ninterface TextStreamWriter extends TextStreamBase {\n    /**\n     * Sends a string to an output stream.\n     */\n    Write(s: string): void;\n\n    /**\n     * Sends a specified number of blank lines (newline characters) to an output stream.\n     */\n    WriteBlankLines(intLines: number): void;\n\n    /**\n     * Sends a string followed by a newline character to an output stream.\n     */\n    WriteLine(s: string): void;\n}\n\ninterface TextStreamReader extends TextStreamBase {\n    /**\n     * Returns a specified number of characters from an input stream, starting at the current pointer position.\n     * Does not return until the ENTER key is pressed.\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\n     */\n    Read(characters: number): string;\n\n    /**\n     * Returns all characters from an input stream.\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\n     */\n    ReadAll(): string;\n\n    /**\n     * Returns an entire line from an input stream.\n     * Although this method extracts the newline character, it does not add it to the returned string.\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\n     */\n    ReadLine(): string;\n\n    /**\n     * Skips a specified number of characters when reading from an input text stream.\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\n     * @param characters Positive number of characters to skip forward. (Backward skipping is not supported.)\n     */\n    Skip(characters: number): void;\n\n    /**\n     * Skips the next line when reading from an input text stream.\n     * Can only be used on a stream in reading mode, not writing or appending mode.\n     */\n    SkipLine(): void;\n\n    /**\n     * Indicates whether the stream pointer position is at the end of a line.\n     */\n    AtEndOfLine: boolean;\n\n    /**\n     * Indicates whether the stream pointer position is at the end of a stream.\n     */\n    AtEndOfStream: boolean;\n}\n\ndeclare var WScript: {\n    /**\n    * Outputs text to either a message box (under WScript.exe) or the command console window followed by\n    * a newline (under CScript.exe).\n    */\n    Echo(s: any): void;\n\n    /**\n     * Exposes the write-only error output stream for the current script.\n     * Can be accessed only while using CScript.exe.\n     */\n    StdErr: TextStreamWriter;\n\n    /**\n     * Exposes the write-only output stream for the current script.\n     * Can be accessed only while using CScript.exe.\n     */\n    StdOut: TextStreamWriter;\n    Arguments: { length: number; Item(n: number): string; };\n\n    /**\n     *  The full path of the currently running script.\n     */\n    ScriptFullName: string;\n\n    /**\n     * Forces the script to stop immediately, with an optional exit code.\n     */\n    Quit(exitCode?: number): number;\n\n    /**\n     * The Windows Script Host build version number.\n     */\n    BuildVersion: number;\n\n    /**\n     * Fully qualified path of the host executable.\n     */\n    FullName: string;\n\n    /**\n     * Gets/sets the script mode - interactive(true) or batch(false).\n     */\n    Interactive: boolean;\n\n    /**\n     * The name of the host executable (WScript.exe or CScript.exe).\n     */\n    Name: string;\n\n    /**\n     * Path of the directory containing the host executable.\n     */\n    Path: string;\n\n    /**\n     * The filename of the currently running script.\n     */\n    ScriptName: string;\n\n    /**\n     * Exposes the read-only input stream for the current script.\n     * Can be accessed only while using CScript.exe.\n     */\n    StdIn: TextStreamReader;\n\n    /**\n     * Windows Script Host version\n     */\n    Version: string;\n\n    /**\n     * Connects a COM object's event sources to functions named with a given prefix, in the form prefix_event.\n     */\n    ConnectObject(objEventSource: any, strPrefix: string): void;\n\n    /**\n     * Creates a COM object.\n     * @param strProgiID\n     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\n     */\n    CreateObject(strProgID: string, strPrefix?: string): any;\n\n    /**\n     * Disconnects a COM object from its event sources.\n     */\n    DisconnectObject(obj: any): void;\n\n    /**\n     * Retrieves an existing object with the specified ProgID from memory, or creates a new one from a file.\n     * @param strPathname Fully qualified path to the file containing the object persisted to disk.\n     *                       For objects in memory, pass a zero-length string.\n     * @param strProgID\n     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\n     */\n    GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any;\n\n    /**\n     * Suspends script execution for a specified length of time, then continues execution.\n     * @param intTime Interval (in milliseconds) to suspend script execution.\n     */\n    Sleep(intTime: number): void;\n};\n\n/**\n * Allows enumerating over a COM collection, which may not have indexed item access.\n */\ninterface Enumerator<T> {\n    /**\n     * Returns true if the current item is the last one in the collection, or the collection is empty,\n     * or the current item is undefined.\n     */\n    atEnd(): boolean;\n\n    /**\n     * Returns the current item in the collection\n     */\n    item(): T;\n\n    /**\n     * Resets the current item in the collection to the first item. If there are no items in the collection,\n     * the current item is set to undefined.\n     */\n    moveFirst(): void;\n\n    /**\n     * Moves the current item to the next item in the collection. If the enumerator is at the end of\n     * the collection or the collection is empty, the current item is set to undefined.\n     */\n    moveNext(): void;\n}\n\ninterface EnumeratorConstructor {\n    new <T>(collection: any): Enumerator<T>;\n    new (collection: any): Enumerator<any>;\n}\n\ndeclare var Enumerator: EnumeratorConstructor;\n\n/**\n * Enables reading from a COM safe array, which might have an alternate lower bound, or multiple dimensions.\n */\ninterface VBArray<T> {\n    /**\n     * Returns the number of dimensions (1-based).\n     */\n    dimensions(): number;\n\n    /**\n     * Takes an index for each dimension in the array, and returns the item at the corresponding location.\n     */\n    getItem(dimension1Index: number, ...dimensionNIndexes: number[]): T;\n\n    /**\n     * Returns the smallest available index for a given dimension.\n     * @param dimension 1-based dimension (defaults to 1)\n     */\n    lbound(dimension?: number): number;\n\n    /**\n     * Returns the largest available index for a given dimension.\n     * @param dimension 1-based dimension (defaults to 1)\n     */\n    ubound(dimension?: number): number;\n\n    /**\n     * Returns a Javascript array with all the elements in the VBArray. If there are multiple dimensions,\n     * each successive dimension is appended to the end of the array.\n     * Example: [[1,2,3],[4,5,6]] becomes [1,2,3,4,5,6]\n     */\n    toArray(): T[];\n}\n\ninterface VBArrayConstructor {\n    new <T>(safeArray: any): VBArray<T>;\n    new (safeArray: any): VBArray<any>;\n}\n\ndeclare var VBArray: VBArrayConstructor;\n"});

